{"ast":null,"code":"import _asyncToGenerator from \"/Users/klaushougesen/_repos/consulting/lahi/github/duet-example-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Built with Duet Design System\n */\nimport { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-eb374972.js';\nimport { c as createID } from './create-id-981107da.js';\nimport { c as cleanValue } from './input-utils-f4cafee1.js';\nimport { i as inheritGlobalTheme } from './themeable-component-572685dd.js';\nconst duetTextareaCss = \"*.sc-duet-textarea,*.sc-duet-textarea::after,*.sc-duet-textarea::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-textarea-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-right:16px !important;margin-bottom:12px !important;display:block;width:100%;max-width:100%;text-align:left}.sc-duet-textarea-h:last-child,.sc-duet-textarea-h:last-of-type{margin-right:0 !important}@media (min-width: 36em){.sc-duet-textarea-h{width:calc(50% - 16px - 3px)}.duet-expand.sc-duet-textarea-h{width:100% !important}}.duet-m-0.sc-duet-textarea-h{margin:0 !important}duet-tooltip.sc-duet-textarea{position:absolute;top:12px;right:0}@media (min-width: 48em){duet-tooltip.sc-duet-textarea{position:relative;top:4px;right:auto}}.duet-textarea-container.sc-duet-textarea{position:relative;width:100%;height:100%}.duet-textarea-container.sc-duet-textarea .duet-input-top-caption.sc-duet-textarea{display:none}.duet-textarea-container.duet-input-top-caption-shown.sc-duet-textarea .duet-input-top-caption.sc-duet-textarea{display:flex !important}.duet-textarea-wrapper.sc-duet-textarea{position:relative}.duet-textarea-placeholder.sc-duet-textarea{position:absolute;top:-9px;left:9px;z-index:200;display:block;width:auto;max-width:60%;padding:0 0.25rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;background:white}.duet-textarea.sc-duet-textarea{padding:15px !important;position:relative;z-index:100;display:block;width:100%;min-width:8rem;min-height:160px;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-size:1rem;font-weight:400;font-variant-numeric:tabular-nums;line-height:1.25;color:#00294d;resize:vertical;background:white;border:1px solid #909599;border-radius:4px;transition:150ms ease}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea{font-family:\\\"turva-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";color:#171c3a;border-color:#747475}.has-error.sc-duet-textarea .duet-textarea.sc-duet-textarea{border-color:#de2362 !important}.duet-theme-turva.has-error.sc-duet-textarea .duet-textarea.sc-duet-textarea{border-color:#e02a0d !important}.duet-textarea.sc-duet-textarea::-webkit-input-placeholder{color:#657787;opacity:1 !important;transition:color 300ms ease}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea::-webkit-input-placeholder{color:#747475}.duet-textarea.sc-duet-textarea:focus::-webkit-input-placeholder{color:#cfd2d4}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea:focus::-webkit-input-placeholder{color:#cfcfd1}.duet-textarea.sc-duet-textarea::-moz-placeholder{color:#657787;opacity:1 !important}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea::-moz-placeholder{color:#747475}.duet-textarea.sc-duet-textarea:focus::-moz-placeholder{color:#cfd2d4}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea:focus::-moz-placeholder{color:#cfcfd1}.duet-textarea.sc-duet-textarea:-ms-input-placeholder{color:#657787}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea:-ms-input-placeholder{color:#747475}.duet-textarea.sc-duet-textarea:focus:-ms-input-placeholder{color:#cfd2d4}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea:focus:-ms-input-placeholder{color:#cfcfd1}.duet-textarea[disabled].sc-duet-textarea{color:#657787 !important;cursor:default !important;background:#f5f8fa !important;border-color:#f5f8fa !important}.duet-theme-turva.sc-duet-textarea .duet-textarea[disabled].sc-duet-textarea{color:#747475 !important;background:#f5f5f7 !important;border-color:#f5f5f7 !important}.duet-textarea.sc-duet-textarea:hover:not(:disabled){box-shadow:0 0 0 1px #909599}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea:hover:not(:disabled){box-shadow:0 0 0 1px #747475}.has-error.sc-duet-textarea .duet-textarea.sc-duet-textarea:hover:not(:disabled){box-shadow:0 0 0 1px #de2362}.duet-theme-turva.has-error.sc-duet-textarea .duet-textarea.sc-duet-textarea:hover:not(:disabled){box-shadow:0 0 0 1px #e02a0d}.duet-textarea.sc-duet-textarea:focus{border-color:#0077b3;outline:0;box-shadow:0 0 0 1px #0077b3;transition:none}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea:focus{border-color:#171c3a;box-shadow:0 0 0 1px #171c3a}.has-error.sc-duet-textarea .duet-textarea.sc-duet-textarea:focus{box-shadow:0 0 0 1px #de2362}.duet-theme-turva.has-error.sc-duet-textarea .duet-textarea.sc-duet-textarea:focus{box-shadow:0 0 0 1px #e02a0d}.duet-textarea.sc-duet-textarea:not(:focus):not(:hover):invalid{box-shadow:none}.duet-textarea-help.sc-duet-textarea{font-size:0.875rem;line-height:1.25}.duet-textarea-help.sc-duet-textarea span.sc-duet-textarea{display:block;margin-top:8px}.has-error.sc-duet-textarea .duet-textarea-help.sc-duet-textarea{color:#de2362}.duet-theme-turva.has-error.sc-duet-textarea .duet-textarea-help.sc-duet-textarea{color:#e02a0d}.duet-label-hidden.sc-duet-textarea duet-label.sc-duet-textarea{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0 0 0 0);border:0}.duet-character-count.sc-duet-textarea{display:block;margin:8px 0 0 auto}\";\n\nconst CharacterCount = ({\n  value,\n  maxlength,\n  label,\n  theme\n}) => {\n  if (maxlength == null) {\n    return;\n  }\n\n  const length = value.length;\n  const remainder = Math.max(maxlength - length, 0); // ensure we never have negative numbers\n\n  const isApproachingLimit = remainder / maxlength <= 0.1; // <= 10% chars remaining\n\n  return h(\"div\", {\n    class: \"duet-character-count\"\n  }, h(\"duet-caption\", {\n    margin: \"none\",\n    theme: theme,\n    size: \"small\"\n  }, h(\"duet-visually-hidden\", {\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\",\n    class: \"duet-textarea-counter-remaining\"\n  }, isApproachingLimit && `${remainder} ${label}`), h(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, length, \"/\", maxlength)));\n};\n\nlet DuetTextarea = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.duetInput = createEvent(this, \"duetInput\", 7);\n    this.duetChange = createEvent(this, \"duetChange\", 7);\n    this.duetBlur = createEvent(this, \"duetBlur\", 7);\n    this.duetFocus = createEvent(this, \"duetFocus\", 7);\n    /**\n     * Own Properties\n     */\n\n    this.textareaId = createID(\"DuetTextarea\");\n    this.topCaptionId = createID(\"DuetCaptionTop\");\n    this.topCaptionPlaceholderId = createID(\"DuetCaptionPlaceholderTop\");\n    this.labelId = createID(\"DuetLabel\");\n    this.errorId = createID(\"DuetError\");\n    this.disallowPatternRegex = null;\n    /**\n     * Controls the margin of the component.\n     */\n\n    this.margin = \"auto\";\n    /**\n     * Theme of the textarea.\n     */\n\n    this.theme = \"\";\n    /**\n     * Expands the textarea to fill 100% of the container width.\n     */\n\n    this.expand = false;\n    /**\n     * Makes the textarea component disabled. This prevents users from being able\n     * to interact with the textarea, and conveys its inactive state to assistive\n     * technologies.\n     */\n\n    this.disabled = false;\n    /**\n     * Set whether the textarea is required or not. Please note that this is required for\n     * accessible inputs when the user is required to fill them. When using this property\n     * you need to also set “novalidate” attribute to your form element to prevent\n     * browser from displaying its own validation errors.\n     */\n\n    this.required = false;\n    /**\n     * Label for the textarea.\n     */\n\n    this.label = \"label\";\n    /**\n     * Visually hide the label, but still show it to screen readers.\n     */\n\n    this.labelHidden = false;\n    /**\n     * If form input field has a placeholder text, and user types anything (causing the text to dissapear),\n     * settings this to true will \"echo\" it into the caption slot - this option will be false by default for the next few versions, but will eventually be true by default (scheduled for 4.30.0)\n     */\n\n    this.echoPlaceholder = false;\n    /**\n     * Display the textarea in error state along with an error message.\n     */\n\n    this.error = \"\";\n    /**\n     * Tooltip to display next to the label of the input.\n     */\n\n    this.tooltip = \"\";\n    /**\n     * With direction setting you can force the tooltip to always open towards left\n     * or right instead of automatically determining the direction.\n     */\n\n    this.tooltipDirection = \"auto\";\n    /**\n     * Value of the textarea.\n     */\n\n    this.value = \"\";\n    /**\n     * A regular expression that matches any characters which should be *disallowed*.\n     * This differs from `pattern`, as it actively prevents users entering any characters which match the regular expression.\n     * e.g. the following will disallow any non-numeric characters `[^0-9]`\n     */\n\n    this.disallowPattern = null;\n    /**\n     * Display character counter. Must be used in conjunction with\n     * **maxlength** and **counterLabel** properties.\n     */\n\n    this.counter = false;\n    /**\n     * Component event handling.\n     */\n\n    this.handleInput = ev => {\n      if (this.disallowPatternRegex) {\n        cleanValue(this.nativeInput, this.disallowPatternRegex);\n      }\n\n      this.value = this.nativeInput.value;\n      this.isCaptionVisible = !!this.caption;\n      this.duetInput.emit({\n        originalEvent: ev,\n        value: this.value,\n        component: \"duet-textarea\"\n      });\n    };\n\n    this.handleChange = ev => {\n      this.value = this.nativeInput.value;\n      this.duetChange.emit({\n        originalEvent: ev,\n        value: this.value,\n        component: \"duet-textarea\"\n      });\n    };\n\n    this.handleBlur = ev => {\n      this.duetBlur.emit({\n        originalEvent: ev,\n        value: this.value,\n        component: \"duet-textarea\"\n      });\n    };\n\n    this.handleFocus = ev => {\n      this.duetFocus.emit({\n        originalEvent: ev,\n        value: this.value,\n        component: \"duet-textarea\"\n      });\n    };\n  }\n\n  disallowedPatternChange() {\n    this.disallowPatternRegex = this.disallowPattern ? new RegExp(this.disallowPattern, \"g\") : null;\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n    this.disallowedPatternChange();\n    this.isCaptionVisible = !!this.caption;\n\n    if (this.counter && this.maxlength == null) {\n      console.warn(\"[DUET WARNING]: counter will only take effect if maxlength is set\");\n    }\n\n    if (!this.counter && this.counterLabel != null) {\n      console.warn(\"[DUET WARNING]: counter-label is redundant unless used with counter\");\n    }\n\n    if (this.counter && !this.counterLabel) {\n      console.warn(\"[DUET WARNING]: counter requires counter-label to be set\");\n    }\n  }\n  /**\n   * Sets focus on the specified `duet-textarea`. Use this method instead of the global\n   * `textarea.focus()`.\n   */\n\n\n  setFocus(options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.nativeInput.focus(options);\n    })();\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    const identifier = this.identifier || this.textareaId;\n    return h(Host, {\n      class: {\n        \"duet-m-0\": this.margin === \"none\",\n        \"duet-has-counter\": this.counter && !this.error,\n        \"duet-expand\": this.expand\n      }\n    }, h(\"div\", {\n      class: {\n        \"duet-textarea-container\": true,\n        \"duet-theme-turva\": this.theme === \"turva\",\n        \"duet-label-hidden\": this.labelHidden,\n        \"duet-input-top-caption-shown\": this.isCaptionVisible,\n        \"has-error\": !!this.error\n      }\n    }, h(\"duet-label\", {\n      theme: this.theme === \"turva\" ? \"turva\" : \"default\",\n      class: {\n        \"duet-has-tooltip\": !!this.tooltip\n      },\n      margin: this.isCaptionVisible ? \"small\" : \"auto\",\n      id: this.labelId,\n      for: identifier\n    }, this.label), this.tooltip && h(\"duet-tooltip\", {\n      direction: this.tooltipDirection,\n      accessibleInputLabel: this.label\n    }, this.tooltip), this.caption && h(\"duet-caption\", {\n      id: this.topCaptionId,\n      size: \"medium\"\n    }, this.caption), h(\"div\", {\n      class: \"duet-textarea-wrapper\"\n    }, this.placeholder && this.echoPlaceholder && this.value && h(\"duet-caption\", {\n      id: this.topCaptionPlaceholderId,\n      class: \"duet-textarea-placeholder\",\n      size: \"small\"\n    }, this.placeholder), h(\"textarea\", {\n      onInput: this.handleInput,\n      onChange: this.handleChange,\n      onBlur: this.handleBlur,\n      onFocus: this.handleFocus,\n      ref: input => this.nativeInput = input,\n      class: {\n        \"duet-textarea\": true,\n        disabled: this.disabled\n      },\n      value: this.value,\n      disabled: this.disabled,\n      \"aria-labelledby\": `${this.labelId} ${this.errorId}`,\n      \"aria-controls\": this.accessibleControls,\n      \"aria-autocomplete\": this.accessibleAutocomplete,\n      \"aria-activedescendant\": this.accessibleActiveDescendant,\n      \"aria-owns\": this.accessibleOwns,\n      \"aria-describedby\": `${this.isCaptionVisible ? this.topCaptionId : \"\"} ${this.accessibleDescribedBy}`,\n      placeholder: this.placeholder,\n      spellcheck: \"false\",\n      required: this.required,\n      minlength: this.minlength,\n      maxlength: this.maxlength,\n      role: this.role,\n      name: this.name,\n      id: identifier\n    })), h(\"duet-grid\", {\n      alignment: \"stretch\"\n    }, h(\"duet-grid-item\", {\n      margin: \"none\",\n      fill: true\n    }, h(\"div\", {\n      class: \"duet-textarea-help\",\n      id: this.errorId,\n      \"aria-live\": \"assertive\",\n      \"aria-relevant\": \"additions removals\"\n    }, this.error && h(\"span\", null, this.error))), h(\"duet-grid-item\", {\n      margin: \"none\",\n      class: \"duet-character-count-caption\"\n    }, this.counter && h(CharacterCount, {\n      theme: this.theme,\n      value: this.value,\n      maxlength: this.maxlength,\n      label: this.counterLabel\n    })))));\n  }\n\n  get element() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"disallowPattern\": [\"disallowedPatternChange\"]\n    };\n  }\n\n};\nDuetTextarea.style = duetTextareaCss;\nexport { DuetTextarea as duet_textarea };","map":null,"metadata":{},"sourceType":"module"}