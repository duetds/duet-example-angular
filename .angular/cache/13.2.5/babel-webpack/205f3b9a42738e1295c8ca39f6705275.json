{"ast":null,"code":"import _asyncToGenerator from \"/Users/klaushougesen/_repos/consulting/lahi/github/duet-example-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Built with Duet Design System\n */\nimport { E as Env, r as registerInstance, h, H as Host, g as getElement } from './index-795979f3.js';\nimport { i as inheritGlobalTheme } from './themeable-component-572685dd.js';\nimport { g as getColorByName } from './token-utils-75f78ca4.js';\nimport './tokens.module-49cbf963.js';\n\nconst cleanupSvg = svgContent => {\n  if (typeof document === \"undefined\" || !svgContent) {\n    return;\n  }\n\n  const div = document.createElement(\"div\");\n  div.innerHTML = svgContent; // setup this way to ensure it works on our buddy IE\n\n  for (let i = div.childNodes.length - 1; i >= 0; i--) {\n    const child = div.childNodes[i];\n\n    if (child.nodeName.toLowerCase() !== \"svg\") {\n      div.removeChild(div.childNodes[i]);\n    }\n  }\n\n  return div.firstElementChild;\n};\n\nconst isValid = elm => {\n  if (elm.nodeName.toLowerCase() === \"script\") {\n    return false;\n  }\n\n  for (let i = 0; i < elm.attributes.length; i++) {\n    const attribute = elm.attributes[i];\n\n    if (attribute.name.toLowerCase().indexOf(\"on\") === 0) {\n      return false;\n    }\n  }\n\n  if (elm.children) {\n    for (let i = 0; i < elm.children.length; i++) {\n      if (!isValid(elm.children[i])) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nconst buildIconUrl = iconName => {\n  // under normal operations the Icons should always be loaded from the CDN\n  {\n    return `${Env.cdnURIProd}/icons/${Env.duetIconVersion}/lib/assets/${iconName}.svg`;\n  }\n};\n\nconst iconCache = {};\n\nfunction fetchIconByUrl(url) {\n  if (iconCache[url]) {\n    return iconCache[url];\n  } // we create a function that covers all the fetching, cleanup, validation etc,\n  // this way we can perform that work just once, and then return the same promise in future.\n\n\n  function doFetch() {\n    return _doFetch.apply(this, arguments);\n  } // we do not `await` the fetch, as we only care about initiating the work,\n  // it's the responsibility of the calling code to wait for the response.\n\n\n  function _doFetch() {\n    _doFetch = _asyncToGenerator(function* () {\n      const res = yield fetch(url);\n\n      if (!res.ok) {\n        throw new Error(`SVG request failed: ${res.status} ${res.statusText}`);\n      }\n\n      const responseText = yield res.text();\n      const svgElement = cleanupSvg(responseText);\n\n      if (!isValid(svgElement)) {\n        throw new Error(\"SVG validation failed\");\n      } // OuterHTML does not unfortunately work here with IE11\n      // was previously: resolve(svgElement.outerHTML)\n\n\n      const div = document.createElement(\"div\");\n      div.appendChild(svgElement);\n      return div.innerHTML;\n    });\n    return _doFetch.apply(this, arguments);\n  }\n\n  const req = doFetch(); // cache for the repeat requests\n\n  return iconCache[url] = req;\n}\n\nconst duetIconCss = \"*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-bottom:16px !important;display:inline-block;width:auto;max-width:100%;color:inherit;-webkit-tap-highlight-color:transparent}@media (max-width: 35.9375em){:host(.duet-icon-has-outline){margin-bottom:0 !important}}@media (max-width: 35.9375em){:host(.duet-icon-has-background){margin-bottom:0 !important}}:host(.duet-m-0){margin:0 !important}@media (max-width: 35.9375em){:host(.duet-m-0){margin:0 !important}}.duet-icon{-webkit-user-select:none;user-select:none;width:100%;height:100%;transform-origin:top center}.duet-icon.duet-icon-has-outline{padding:12px;border-style:solid;border-width:1px;border-radius:50%}@media (max-width: 35.9375em){.duet-icon.duet-icon-has-outline{outline:1px solid transparent;transform:scale(0.8)}}.duet-icon.duet-icon-has-background{padding:16px;color:white;border-radius:50%}@media (max-width: 35.9375em){.duet-icon.duet-icon-has-background{outline:1px solid transparent;transform:scale(0.8)}}.duet-icon.duet-icon-has-background.duet-theme-turva,.duet-icon.duet-icon-has-background.duet-theme-default{color:white}.duet-icon.duet-icon-has-background.xxx-small .duet-icon-svg,.duet-icon.duet-icon-has-outline.xxx-small .duet-icon-svg{width:10px;height:10px}.duet-icon.duet-icon-has-background.xx-small .duet-icon-svg,.duet-icon.duet-icon-has-outline.xx-small .duet-icon-svg{width:16px;height:16px}@media (max-width: 35.9375em){.duet-icon.duet-icon-not-responsive{transform:scale(1) !important}}.duet-icon.duet-theme-default{color:#0077b3}.duet-icon.duet-theme-turva{color:#c60c30}.duet-icon.auto .duet-icon-svg{width:100%;height:100%}.duet-icon.xxx-small .duet-icon-svg{width:7px;height:7px}.duet-icon.duet-icon-has-background.xxx-small{padding:6px}.duet-icon.duet-icon-has-outline.xxx-small{padding:4px}.duet-icon.xx-small .duet-icon-svg{width:10px;height:10px}.duet-icon.duet-icon-has-background.xx-small{padding:8px}.duet-icon.duet-icon-has-outline.xx-small{padding:7px}.duet-icon.x-small .duet-icon-svg{width:16px;height:16px}.duet-icon.duet-icon-has-outline.x-small{padding:10px}.duet-icon.duet-icon-has-background.x-small{padding:12px}.duet-icon.small .duet-icon-svg{width:20px;height:20px}.duet-icon.duet-icon-has-background.small{padding:14px}.duet-icon.large .duet-icon-svg{width:30px;height:30px}.duet-icon.x-large .duet-icon-svg{width:36px;height:36px}.duet-icon.xx-large .duet-icon-svg{width:48px;height:48px}.duet-icon.xxx-large .duet-icon-svg{width:48px;height:48px}@media (min-width: 48em){.duet-icon.xxx-large .duet-icon-svg{width:72px;height:72px}}.duet-icon .duet-icon-svg{display:block;width:24px;min-width:100%;height:24px;font-size:0}.duet-icon svg{width:100%;min-width:100%;fill:currentColor}\";\nlet DuetIcon = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * Theme of the icon. This setting will be overridden when you set the color\n     * property\n     */\n\n    this.theme = \"\";\n    /**\n     * Icon name from Duet to display.\n     */\n\n    this.name = \"action-add\";\n    /**\n     * Controls the margin of the component.\n     */\n\n    this.margin = \"auto\";\n    /**\n     * Whether the icon changes its size responsively or not.\n     */\n\n    this.responsive = true;\n    /**\n     * Custom color to be used for the icon, as a design token entered in camelCase\n     * or kebab-case. Example: \"color-primary\". This property can also be set to\n     * \"currentColor\" which forces the icon to use the CSS text color of parent\n     * element instead. Useful when you want to control the color in stylesheet\n     * instead.\n     */\n\n    this.color = \"\";\n    /**\n     * Custom color to be used for a circular background, as a design token entered\n     * in camelCase or kebab-case. Using this option the icon will always be resized\n     * to $size-icon-medium on mobile viewports. Example: \"color-primary\".\n     */\n\n    this.background = \"\";\n    /**\n     * Icon size. Entered as one of the icon size design tokens.\n     */\n\n    this.size = \"medium\";\n    /**\n     * Custom color to be used for a circular border and icon outline, as a design\n     * token entered in camelCase or kebab-case. Using this option the icon will\n     * always be resized to $size-icon-medium on mobile viewports.\n     * Example: \"color-primary\".\n     */\n\n    this.outline = \"\";\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n\n    if (this.src && this.icon) {\n      console.warn(\"[DUET COMPONENTS]: <duet-icon> should have either have src or icon attributes, but not both. icon attribute will take precedence\", \"icon:\", this.icon, \"src:\", this.src);\n    }\n\n    this.loadIcon();\n  }\n\n  loadIcon() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // static icon known at build-time, so we can set it synchronously\n      if (_this.icon) {\n        _this.svgContent = _this.icon;\n        return;\n      } // dynamically load icon from url\n\n\n      const src = _this.src ? _this.src : buildIconUrl(_this.name);\n\n      try {\n        _this.svgContent = yield fetchIconByUrl(src);\n      } catch (e) {\n        console.warn(`[DUET COMPONENTS]: <duet-icon> could not load SVG from URL: ${src}.`, e);\n      }\n    })();\n  }\n  /**\n   * render() function.\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    const color = this.color === \"currentColor\" ? \"currentColor\" : getColorByName(this.color, this.theme) || getColorByName(this.outline, this.theme);\n    const styles = {\n      color,\n      background: getColorByName(this.background, this.theme),\n      \"border-color\": getColorByName(this.outline, this.theme)\n    };\n    return h(Host, {\n      class: {\n        \"duet-m-0\": this.margin === \"none\",\n        \"duet-icon-has-outline\": !!this.outline,\n        \"duet-icon-has-background\": !!this.background\n      }\n    }, h(\"div\", {\n      \"aria-hidden\": \"true\",\n      style: styles,\n      class: {\n        \"duet-icon\": true,\n        [this.size]: true,\n        \"duet-theme-turva\": this.theme === \"turva\",\n        \"duet-theme-default\": this.theme === \"default\",\n        \"duet-icon-has-outline\": !!this.outline,\n        \"duet-icon-has-background\": !!this.background,\n        \"duet-icon-not-responsive\": !this.responsive\n      }\n    }, h(\"span\", {\n      \"aria-hidden\": \"true\",\n      class: \"duet-icon-svg\",\n      innerHTML: this.svgContent\n    })));\n  }\n\n  get element() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"src\": [\"loadIcon\"],\n      \"icon\": [\"loadIcon\"],\n      \"name\": [\"loadIcon\"]\n    };\n  }\n\n};\nDuetIcon.style = duetIconCss;\nexport { DuetIcon as duet_icon };","map":null,"metadata":{},"sourceType":"module"}