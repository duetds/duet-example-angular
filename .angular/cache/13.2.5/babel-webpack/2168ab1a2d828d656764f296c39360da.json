{"ast":null,"code":"/*!\n * Built with Duet Design System\n */\nimport { c as convertHtmlQuotes } from './string-utils-2f1793b8.js';\nconst localeLookUpTable = {\n  fi: \"fi-FI\",\n  en: \"en-GB\",\n  us: \"en-US\",\n  sv: \"sv-SE\"\n};\nconst localeMonetarySignifierLookUpTable = {\n  fi: \"€\",\n  en: \"£\",\n  us: \"$\",\n  sv: \"€\"\n};\nconst defLanguageArray = [\"fi\", \"en\", \"sv\"];\nconst defaultLanguage = \"fi\";\n\nconst getCurrentLanguage = () => {\n  return document.documentElement.lang ? document.documentElement.lang.toLowerCase() : defaultLanguage;\n};\n\nconst isOfTypeLanguage = keyInput => {\n  return defLanguageArray.includes(keyInput);\n};\n\nconst checkForLanguage = (languageString = getCurrentLanguage()) => {\n  if (isOfTypeLanguage(languageString)) {\n    return languageString;\n  } else {\n    return defaultLanguage;\n  }\n};\n/**\n * Returns the current language as a string representation (taken from html lang attribute)\n * If language is not fi|sv|en it will default to \"fi\"\n * @param {string} lang=fi - \"fi\" | \"sv\" | \"en\"\n * @default {string} \"fi\"\n */\n\n\nconst getLanguage = (languageString = getCurrentLanguage()) => checkForLanguage(languageString);\n/**\n * Returns the current language and locale\n * If language is not fi|sv|en it will default to \"fi\"\n * special case where lang can be ALSO be \"us\" in addition to other types - if user decides to override local language\n * @param {string} lang=\"fi\" - \"fi\" | \"sv\" | \"en\" | \"us\"\n * @default {object} {locale: \"fi-FI\", money: \"€\"}\n */\n\n\nconst getLocale = lang => {\n  const returnObj = {\n    locale: localeLookUpTable[lang],\n    money: localeMonetarySignifierLookUpTable[lang]\n  };\n\n  if (returnObj.locale && returnObj.money) {\n    return returnObj;\n  }\n\n  throw new Error(`Locale for \"${lang}\" not found`);\n};\n/**\n * Takes any json object that is passed and/or htmlencoded and converts it to proper json\n */\n\n\nconst sanitizeString = string => {\n  const argIsString = typeof string === \"string\";\n\n  if (argIsString) {\n    try {\n      return JSON.parse(convertHtmlQuotes(string));\n    } catch (e) {\n      console.log(\"sanitizeString received a string, that didnt parse to json object\", string, e);\n    }\n  }\n\n  return string;\n};\n/**\n * Returns the current string / object from a given translation object\n * If language is not fi|sv|en it will default to \"fi\"\n * special case where lang can be ALSO be \"us\" in addition to other types - if user decides to override local language\n * @param {object} langObject - {fi: \"finnish\", sv: \"swedish\", en: \"english\"} | string will get JSON.parsed\n * @param {boolean} languageOverride = false - in case you want to override the actual language set in html tag\n * @default {object} {locale: \"fi-FI\", money: \"€\"}\n * @returns {(string|Object)} given example contains {fi:\"something\"} and language===fi this will return \"something\"\n */\n\n\nconst getLocaleString = (langObject, languageOverride) => {\n  const obj = sanitizeString(langObject);\n\n  if (languageOverride) {\n    return obj[checkForLanguage(languageOverride)];\n  } else {\n    return obj[getLanguage()];\n  }\n};\n\nexport { getLanguage as a, getLocale as b, getLocaleString as g, sanitizeString as s };","map":null,"metadata":{},"sourceType":"module"}