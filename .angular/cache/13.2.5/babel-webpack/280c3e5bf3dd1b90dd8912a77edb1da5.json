{"ast":null,"code":"import _asyncToGenerator from \"/Users/klaushougesen/_repos/consulting/lahi/github/duet-example-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Built with Duet Design System\n */\nimport { r as registerInstance, c as createEvent, h, g as getElement } from './index-eb374972.js';\nimport { d as disableBodyScroll, e as enableBodyScroll } from './bodyScrollLock.es6-61b5e9a4.js';\nimport { c as createID } from './create-id-981107da.js';\nimport { f as focusElement, F as FocusGuard } from './focus-utils-d3cd655b.js';\nimport { f as isEscapeKey } from './keyboard-utils-584cedd7.js';\nimport { a as getLanguage, g as getLocaleString } from './language-utils-344d894c.js';\nimport { i as inheritGlobalTheme } from './themeable-component-572685dd.js';\nimport './string-utils-2f1793b8.js';\nconst duetModalCss = \"*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.duet-modal-overlay{position:fixed;top:0;right:0;bottom:0;left:0;z-index:900;max-height:100vh;overflow-y:auto;visibility:hidden;background:rgba(0, 41, 77, 0.85);opacity:0;transition:300ms ease;transition-delay:200ms}.duet-modal-overlay.duet-theme-turva{background:rgba(23, 28, 58, 0.85)}.duet-modal-overlay.duet-modal-active{visibility:visible;opacity:1;transition:300ms ease;transition-delay:0s}.duet-modal-overlay.duet-disable-transitions{transition:none}::slotted(img){width:100%}.duet-modal-inner{display:flex;align-items:center;width:100%;min-height:100%;padding:20px 16px}@media (min-width: 36em){.duet-modal-inner{padding:48px 16px}}@media (max-width: 35.9375em){.duet-modal-inner.duet-modal-large{padding-right:0;padding-left:0}}.duet-modal{position:relative;width:100%;max-width:686px;margin:auto;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-weight:400;font-variant-numeric:tabular-nums;line-height:1.5;color:#00294d;background:white;border-radius:4px;opacity:0;transition:300ms ease;transition-delay:0ms;transform:scale(0.96)}.duet-theme-turva .duet-modal{font-family:\\\"turva-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";color:#171c3a}.duet-modal-active .duet-modal{opacity:1;transition:300ms ease;transition-delay:200ms;transform:none}.duet-disable-transitions .duet-modal{transition:none}.duet-modal.small{max-width:545px}.duet-modal.large{max-width:100%}@media (min-width: 36em){.duet-modal.large{max-width:1110px}}.duet-modal:focus{outline:0}.duet-modal-body{width:100%;padding:36px 28px}.duet-modal-body.duet-modal-gutter-small{padding:36px 20px}.duet-modal-body.duet-modal-gutter-large{padding:48px 36px}@media (max-width: 22.5em){.duet-modal-body{padding:36px 20px}.duet-modal-body.duet-modal-gutter-large{padding:48px 28px}}@media (max-width: 35.9375em){.duet-modal-body{padding:36px 20px}.duet-modal-body.duet-modal-gutter-large{padding:48px 36px}}@media (min-width: 36em){.duet-modal-body{padding:36px}.duet-modal-body.duet-modal-gutter-large{padding:28px 72px}}@media (min-width: 48em){.duet-modal-body{padding:36px 72px}.duet-modal-body.duet-modal-gutter-large{padding:36px 72px}}@media (min-width: 76.25em){.duet-modal-body{padding:36px 48px 48px}.duet-modal-body.duet-modal-gutter-large{padding:48px 94px}.small .duet-modal-body{padding:36px 48px}}.duet-modal-header{text-align:center}.duet-modal-close{position:absolute;top:12px;right:12px}.duet-modal-heading{width:100%;padding-right:60px;overflow:hidden;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-size:1.25rem;font-style:normal;font-weight:600;font-variant-numeric:tabular-nums;line-height:1.25;color:#00294d;text-decoration:none;text-overflow:ellipsis;letter-spacing:-0.01rem;white-space:nowrap}.duet-modal-heading.duet-p-0{padding:0 !important}.duet-modal-heading.duet-m-0{margin:0 !important}\"; // The transition below is slightly higher than the actual CSS transition as VoiceOver on\n// iOS has otherwise problems moving the focus from modal back to the original element.\n// This issue is similar to what we’ve seen in Duet Date Picker + iOS VoiceOver.\n\nconst TRANSITION_MS = 600;\nlet DuetModal = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.duetOpen = createEvent(this, \"duetOpen\", 7);\n    this.duetClose = createEvent(this, \"duetClose\", 7);\n    this.duetBeforeClose = createEvent(this, \"duetBeforeClose\", 7);\n\n    var _a, _b;\n    /**\n     * Own Properties.\n     */\n\n\n    this.modalId = createID(\"DuetModal\");\n    this.slotDefaultId = createID(\"DuetModal-default-slot\");\n    this.isAndroidDevice = ((_b = (_a = navigator === null || navigator === void 0 ? void 0 : navigator.userAgent) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.indexOf(\"android\")) > -1 || null;\n    this.isSafariBrowser = /^((?!chrome|android).)*safari/i.test(navigator === null || navigator === void 0 ? void 0 : navigator.userAgent);\n\n    this.handleAndroidResizeEvents = () => {\n      if (document.activeElement.tagName == \"INPUT\") {\n        window.setTimeout(function () {\n          var _a;\n\n          try {\n            //@ts-ignore\n            (_a = document === null || document === void 0 ? void 0 : document.activeElement) === null || _a === void 0 ? void 0 : _a.scrollIntoViewIfNeeded(true);\n          } catch (e) {//dev-null any errors here\n          }\n        }, 100);\n      }\n    };\n    /**\n     * State() variables\n     * Inlined decorator, alphabetical order.\n     */\n\n\n    this.open = false;\n    /**\n     * The currently active language. This setting also changes the logo to match\n     * the chosen language.\n     * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing\n     * @default \"fi\"\n     */\n\n    this.language = getLanguage();\n    /**\n     * Defaults for accessibleCloseLabel\n     * @default {fi: \"Sulje ikkuna\", sv: \"Stäng fönstret\", en: \"Close the dialog\", }\n     */\n\n    this.accessibleCloseLabelDefaults = {\n      fi: \"Sulje ikkuna\",\n      sv: \"Stäng fönstret\",\n      en: \"Close the dialog\"\n    };\n    /**\n     * Adds accessible label for the close icon that is only shown for screen\n     * readers. This property is always required to create an accessibly interface!\n     * Swedish translation for this property is “Stäng fönstret”.\n     * @default {fi: \"Sulje ikkuna\", sv: \"Stäng fönstret\", en: \"Close the dialog\", }\n     */\n\n    this.accessibleCloseLabel = getLocaleString(this.accessibleCloseLabelDefaults, this.language);\n    /**\n     * Size of the modal window.\n     */\n\n    this.size = \"medium\";\n    /**\n     * Size of the modal window.\n     */\n\n    this.gutterSize = \"medium\";\n    /**\n     * Theme of the modal.\n     */\n\n    this.theme = \"\";\n    /**\n     * Accessible heading displayed in the modal. The modal marks this as the\n     * label of the modal when used. This helps screen reader users which is\n     * why this is a required property.\n     */\n\n    this.heading = \"\";\n    /**\n     * Accessible heading size\n     */\n\n    this.headingLevel = \"h3\";\n    /**\n     * Icon to display above the heading (from Duet’s icons). Example:\n     * \"form-location\"\n     */\n\n    this.icon = \"\";\n    /**\n     * Custom color to be used for the icon, as a design token entered in camelCase\n     * or kebab-case. Example: \"primary\".\n     */\n\n    this.color = \"\";\n    /**\n     * Use this property when you need to have the modal dialog initially active.\n     */\n\n    this.active = false;\n    /**\n     * Use this property when you want the modal to close when clicked outside of modal.\n     */\n\n    this.closeOnBlur = false;\n  }\n\n  openChanged() {\n    if (this.open) {\n      if (this.modalEl && this.modalEl.scrollTop) {\n        this.modalEl.scrollTop = 0;\n      }\n\n      this.focusedElBeforeOpen = document.activeElement;\n      disableBodyScroll(this.modalEl, {\n        reserveScrollBarGap: true\n      });\n      setTimeout(() => {\n        this.buttonEl.setFocus();\n      }, TRANSITION_MS);\n      setTimeout(() => {\n        this.modalEl.classList.add(\"duet-disable-transitions\");\n      }, TRANSITION_MS + 200); // fix for android devices where scrolling and softKeyboards MAY be\n      // acting weird when the modal contains an input field\n\n      if (this.isAndroidDevice) {\n        window.addEventListener(\"resize\", this.handleAndroidResizeEvents);\n      }\n\n      this.duetOpen.emit();\n    } else {\n      this.modalEl.classList.remove(\"duet-disable-transitions\");\n      enableBodyScroll(this.modalEl);\n      this.duetClose.emit();\n      setTimeout(() => {\n        focusElement(this.focusedElBeforeOpen);\n      }, TRANSITION_MS);\n\n      if (this.isAndroidDevice) {\n        window.removeEventListener(\"resize\", this.handleAndroidResizeEvents);\n      }\n    }\n  }\n\n  activeChanged() {\n    this.open = this.active;\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n  }\n\n  componentDidLoad() {\n    if (this.active) {\n      // This specific line below can’t be moved to componentWillLoad()\n      // as it breaks body scroll enabling.\n      this.open = true;\n      this.modalEl.classList.add(\"duet-disable-transitions\");\n    }\n  }\n\n  disconnectedCallback() {\n    enableBodyScroll(this.modalEl);\n  }\n  /**\n   * Component event handling.\n   */\n\n\n  handleKeyUp(ev) {\n    if (this.open) {\n      // When Esc is pressed the modal should be closed\n      if (isEscapeKey(ev)) {\n        this.closeModal(ev);\n      }\n    }\n  }\n  /**\n   * Shows the modal dialog. Additionally saves the element that triggered\n   * the modal so that focus can be moved back to this specific element when\n   * the modal dialog is closed.\n   */\n\n\n  show() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.open = true;\n    })();\n  }\n  /**\n   * Hides the modal dialog and puts focus back to the original element\n   * that triggered the modal (if we’re still in the same view).\n   */\n\n\n  hide() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.open = false;\n    })();\n  }\n  /**\n   * Local methods.\n   */\n\n\n  closeModal(ev) {\n    this.duetBeforeClose.emit({\n      originalEvent: ev,\n      component: \"duet-modal\"\n    }); // Make sure the event wasn’t prevented previously\n\n    if (!ev.defaultPrevented) {\n      setTimeout(() => {\n        this.hide();\n      }, 1);\n    }\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    let iconColor = \"primary\";\n    let closeColor = \"secondary\";\n\n    if (this.theme === \"turva\") {\n      iconColor = \"primary-turva\";\n      closeColor = \"secondary-turva\";\n    }\n\n    return h(\"div\", {\n      ref: modal => this.modalEl = modal,\n      \"aria-labelledby\": this.heading ? this.modalId : false,\n      \"aria-describedby\": this.slotDefaultId,\n      role: \"dialog\",\n      \"aria-modal\": this.isSafariBrowser ? false : true,\n      tabindex: \"-1\",\n      \"aria-flowto\": this.slotDefaultId,\n      class: {\n        \"duet-modal-overlay\": true,\n        \"duet-theme-turva\": this.theme === \"turva\",\n        \"duet-modal-active\": this.open\n      }\n    }, h(FocusGuard, {\n      moveFocusTo: this.buttonEl\n    }), h(\"div\", {\n      class: {\n        \"duet-modal-inner\": true,\n        \"duet-modal-large\": this.size === \"large\"\n      },\n      role: \"document\",\n      onClick: e => {\n        if (this.closeOnBlur) {\n          this.closeModal(e);\n        }\n      }\n    }, h(\"div\", {\n      class: {\n        \"duet-modal\": true,\n        [this.size]: true\n      },\n      onClick: e => {\n        if (this.closeOnBlur) {\n          e.stopPropagation();\n        }\n      }\n    }, h(\"duet-spacer\", null), h(\"div\", {\n      class: \"duet-modal-close\"\n    }, h(\"duet-button\", {\n      ref: button => this.buttonEl = button,\n      variation: \"plain\",\n      accessibleLabel: this.accessibleCloseLabel,\n      color: closeColor,\n      iconSize: \"large\",\n      icon: \"navigation-close\",\n      iconOnly: true,\n      margin: \"none\",\n      theme: this.theme,\n      onClick: ev => this.closeModal(ev),\n      fixed: true\n    })), h(\"div\", {\n      class: {\n        \"duet-modal-body\": true,\n        \"duet-modal-gutter-small\": this.gutterSize === \"small\",\n        \"duet-modal-gutter-medium\": this.gutterSize === \"medium\",\n        \"duet-modal-gutter-large\": this.gutterSize === \"large\"\n      }\n    }, h(\"div\", {\n      class: \"duet-modal-header\"\n    }, h(\"span\", {\n      class: \"duet-modal-inner-slot-top\"\n    }, h(\"slot\", {\n      name: \"top\"\n    })), this.icon && h(\"duet-icon\", {\n      name: this.icon,\n      size: \"xx-large\",\n      color: this.color || iconColor\n    }), this.heading && h(\"duet-heading\", {\n      level: this.headingLevel,\n      theme: this.theme,\n      id: this.modalId\n    }, this.heading)), h(\"span\", {\n      class: \"duet-modal-inner-slot-default\",\n      id: this.slotDefaultId\n    }, h(\"slot\", null))))), h(FocusGuard, {\n      moveFocusTo: this.buttonEl\n    }));\n  }\n\n  get element() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"open\": [\"openChanged\"],\n      \"active\": [\"activeChanged\"]\n    };\n  }\n\n};\nDuetModal.style = duetModalCss;\nexport { DuetModal as duet_modal };","map":null,"metadata":{},"sourceType":"module"}