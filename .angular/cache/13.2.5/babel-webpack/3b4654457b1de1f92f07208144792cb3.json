{"ast":null,"code":"import _asyncToGenerator from \"/Users/klaushougesen/_repos/consulting/lahi/github/duet-example-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Built with Duet Design System\n */\nimport { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-eb374972.js';\nimport { c as createID } from './create-id-981107da.js';\nimport { a as isArrowRightKey, b as isArrowUpKey, c as isArrowDownKey, d as isArrowLeftKey, e as isBackspaceKey } from './keyboard-utils-584cedd7.js';\nimport { a as getLanguage, b as getLocale, g as getLocaleString } from './language-utils-344d894c.js';\nimport { i as inheritGlobalTheme } from './themeable-component-572685dd.js';\nimport './string-utils-2f1793b8.js';\nvar actionAdd = {\n  \"title\": \"action-add\",\n  \"tags\": \"action add plus\",\n  \"svg\": \"<svg fill=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" role=\\\"img\\\"><path d=\\\"M12 24a.75.75 0 0 1-.75-.75v-10.5H.75a.75.75 0 0 1 0-1.5h10.5V.75a.75.75 0 0 1 1.5 0v10.5h10.5a.75.75 0 0 1 0 1.5h-10.5v10.5A.75.75 0 0 1 12 24z\\\"/></svg>\"\n};\nvar actionSubtract = {\n  \"title\": \"action-subtract\",\n  \"tags\": \"action subtract minus remove delete cancel\",\n  \"svg\": \"<svg fill=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" role=\\\"img\\\"><path d=\\\"M.75 12.788a.75.75 0 0 1 0-1.5h22.5a.75.75 0 0 1 0 1.5z\\\"/></svg>\"\n};\n\nconst parseLocaleFloat = (str, locale) => {\n  // remove spaces and non-numeric characters\n  // \"12 345,67€\" -> \"12345,67\"\n  // \"12,345.67€\" -> \"12,345.67\"\n  str = str.replace(/\\s+/g, \"\").replace(/[^0-9\\.,]+/g, \"\");\n\n  switch (locale) {\n    case \"fi-FI\":\n    case \"sv-SE\":\n      // \"12345,67\" -> \"12345.67\"\n      str = str.replace(\",\", \".\");\n      break;\n\n    case \"en-US\":\n    case \"en-GB\":\n      // \"12,345.67\" -> \"12345.67\"\n      str = str.replace(/,/g, \"\");\n      break;\n\n    default:\n      throw new TypeError(`Unrecognised locale: ${locale}`);\n  }\n\n  return parseFloat(str);\n};\n\nconst roundTo = (val, multiple) => Math.round(val / multiple) * multiple;\n\nconst clamp = (val, min, max) => Math.min(Math.max(val, min), max);\n\nconst duetNumberInputCss = \"*.sc-duet-number-input,*.sc-duet-number-input::after,*.sc-duet-number-input::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-number-input-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-right:16px !important;margin-bottom:12px !important;display:inline-flex;width:100%;min-width:calc(33.333% - 8px);max-width:100%;line-height:1.25;text-align:left;vertical-align:bottom}.sc-duet-number-input-h:last-child,.sc-duet-number-input-h:last-of-type{margin-right:0 !important}@media (min-width: 36em){.sc-duet-number-input-h{width:calc(50% - 16px - 3px)}}.duet-expand.sc-duet-number-input-h{width:100% !important}.duet-m-0.sc-duet-number-input-h{margin:0 !important}.duet-number-container.sc-duet-number-input{position:relative;width:100%}.duet-number-buttons.sc-duet-number-input{-webkit-user-select:none;user-select:none;position:absolute;top:1px;right:1px;z-index:200;width:96px;height:calc(100% - 2px)}.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input{position:relative;display:inline-flex;align-items:center;justify-content:center;width:50%;height:100%;text-align:center;cursor:pointer;background:transparent;-webkit-appearance:none;appearance:none}.duet-number-buttons.sc-duet-number-input .duet-number-button[aria-disabled=true].sc-duet-number-input,.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:disabled{pointer-events:none}.duet-number-buttons.sc-duet-number-input .duet-number-button[aria-disabled=true].sc-duet-number-input duet-icon.sc-duet-number-input,.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:disabled duet-icon.sc-duet-number-input{opacity:0.4}.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:active duet-icon.sc-duet-number-input{transform:translateY(1px)}.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:focus{outline:0}.user-is-tabbing.sc-duet-number-input-h .duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:focus{z-index:2;box-shadow:0 0 0 2px #0077b3}.duet-theme-turva .user-is-tabbing.sc-duet-number-input-h .duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:focus{box-shadow:0 0 0 2px #171c3a}.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:first-of-type{border-left:1px solid #cfd2d4}.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:first-of-type::before{position:absolute;top:0;left:-6px;width:6px;height:100%;content:\\\"\\\";background:linear-gradient(to left, rgba(207, 210, 212, 0.2) 0%, rgba(207, 210, 212, 0.2) 1px, rgba(207, 210, 212, 0.1) 1px, rgba(207, 210, 212, 0) 100%)}.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:last-of-type{border-top-right-radius:4px;border-bottom-right-radius:4px}.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:last-of-type::before{position:absolute;top:20%;left:0;width:1px;height:60%;content:\\\"\\\";background:#e1e3e6}.duet-theme-turva.sc-duet-number-input-h .duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:first-of-type::before{background:linear-gradient(to left, rgba(207, 207, 209, 0.2) 0%, rgba(207, 207, 209, 0.2) 1px, rgba(207, 207, 209, 0.1) 1px, rgba(207, 207, 209, 0) 100%)}.duet-theme-turva.sc-duet-number-input-h .duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:last-of-type::before{background:#e4e4e6}\";\nlet DuetNumberInput = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.duetChange = createEvent(this, \"duetChange\", 3);\n    this.duetInput = createEvent(this, \"duetInput\", 3);\n    this.duetBlur = createEvent(this, \"duetBlur\", 7);\n    this.duetFocus = createEvent(this, \"duetFocus\", 7);\n    this.inputId = createID(\"DuetInput\");\n    /**\n     * The currently active language. This setting changes the accessible labels to match the\n     * chosen language.\n     * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing\n     * @default \"fi\"\n     */\n\n    this.language = getLanguage();\n    /**\n     * Locale used to format the entered value.\n     */\n\n    this.locale = getLocale(this.language).locale;\n    /**\n     * Unit for the number input.\n     */\n\n    this.unit = getLocale(this.language).money;\n    /**\n     * Defaults for accessibleLive\n     * @default {fi: \"{current} euroa valittuna\", en: \"{current} euros selected\", sv: \"{current} valda euro\"}\n     */\n\n    this.accessibleLiveDefaults = {\n      fi: \"{current} euroa valittuna\",\n      en: \"{current} euros selected\",\n      sv: \"{current} euro valt\"\n    };\n    /**\n     * Format of message used to announce current amount when switching between amounts.\n     * The string {current} is replaced with the current amount.\n     * @default {fi: \"{current} euroa valittuna\", en: \"{current} euros selected\", sv: \"{current} valda euro\"}\n     */\n\n    this.accessibleLive = getLocaleString(this.accessibleLiveDefaults, this.language);\n    /**\n     * Disables the aria-live messaging used internally in this component. This could be useful when you want to use custom aria-live messages instead.\n     */\n\n    this.accessibleLiveEnabled = true;\n    /**\n     * Defaults for accessibleAdd\n     * @default {fi: \"Lisää summaan\", en: \"Add to the amount\", sv: \"Lägg till beloppet\"}\n     */\n\n    this.accessibleAddDefaults = {\n      fi: \"Lisää summaan\",\n      en: \"Add to the amount\",\n      sv: \"Lägg till beloppet\"\n    };\n    /**\n     * Accessible label for the add button that is read for screen reader users.\n     * @default {fi: \"Lisää summaan\", en: \"Add to the amount\", sv: \"Lägg till beloppet\"}\n     */\n\n    this.accessibleAdd = getLocaleString(this.accessibleAddDefaults, this.language);\n    /**\n     * Defaults for accessibleSubtract\n     * @default {fi: \"Vähennä summasta\", en: \"Subtract from the amount\", sv: \"Dra från beloppet\"}\n     */\n\n    this.accessibleSubtractDefaults = {\n      fi: \"Vähennä summasta\",\n      en: \"Subtract from the amount\",\n      sv: \"Dra från beloppet\"\n    };\n    /**\n     * Accessible label for the subtract button that is read for screen reader users.\n     * @default {fi: \"Vähennä summasta\", en: \"Subtract from the amount\", sv: \"Dra från beloppet\"}\n     */\n\n    this.accessibleSubtract = getLocaleString(this.accessibleSubtractDefaults, this.language);\n    /**\n     * Theme of the input.\n     */\n\n    this.theme = \"\";\n    /**\n     * Controls the margin of the component.\n     */\n\n    this.margin = \"auto\";\n    /**\n     * Expands the input to fill 100% of the container width.\n     */\n\n    this.expand = false;\n    /**\n     * Minimum value.\n     */\n\n    this.min = 0;\n    /**\n     * Defaults for Label\n     * @default  {fi: \"Etiketti\", en: \"Label\", sv: \"Märka\"}\n     */\n\n    this.labelDefaults = {\n      fi: \"Nimilappu\",\n      en: \"Label\",\n      sv: \"Etikett\"\n    };\n    /**\n     * Label for the number input.\n     * @default  {fi: \"Etiketti\", en: \"Label\", sv: \"Märka\"}\n     */\n\n    this.label = getLocaleString(this.labelDefaults, this.language);\n    /**\n     * Visually hide the label, but still show it to screen readers.\n     */\n\n    this.labelHidden = false;\n    /**\n     * Maximum value.\n     */\n\n    this.max = 1000000;\n    /**\n     * Display the input in error state along with an error message.\n     */\n\n    this.error = \"\";\n    /**\n     * Tooltip to display next to the label of the input.\n     */\n\n    this.tooltip = \"\";\n    /**\n     * Step amount.\n     */\n\n    this.step = 5000;\n    /**\n     * Controls whether or not value gets rounded to the nearest\n     * multiple of a step on blur. Set to \"false\" to disable this behaviour.\n     */\n\n    this.rounding = true;\n    /**\n     * Makes the number input component disabled. This prevents users from being able to\n     * interact with the input, and conveys its inactive state to assistive technologies.\n     */\n\n    this.disabled = false;\n    /**\n     * Set whether the input is required or not. Please note that this is required for\n     * accessible inputs when the user is required to fill them. When using this property\n     * you need to also set “novalidate” attribute to your form element to prevent\n     * browser from displaying its own validation errors.\n     */\n\n    this.required = false;\n    /**\n     * Component event handling.\n     */\n\n    this.handleFocus = () => {\n      // This state is saved on focus so we can compare on blur to it.\n      this.focusedValue = this.value;\n    };\n\n    this.handleKeyDown = ev => {\n      if (isArrowRightKey(ev) || isArrowUpKey(ev)) {\n        this.add(ev);\n      } else if (isArrowDownKey(ev) || isArrowLeftKey(ev)) {\n        this.subtract(ev);\n      } else if (isBackspaceKey(ev)) {\n        this.clearValue();\n      }\n    };\n\n    this.handleChange = ev => {\n      const input = ev.target;\n\n      if (input && input.value) {\n        let value = this.cleanValue(input.value); // Make sure that everything works if the user clears the input and\n        // starts typing non-numeric characters.\n\n        if (isNaN(value) || value == null) {\n          value = this.min || 0;\n        }\n\n        this.setValue(value);\n        this.duetInput.emit({\n          component: \"duet-number-input\",\n          originalEvent: ev,\n          value: this.cleanValue(this.value).toString(),\n          valueAsNumber: value\n        });\n      } else {\n        this.duetInput.emit({\n          component: \"duet-number-input\",\n          originalEvent: ev,\n          value: null,\n          valueAsNumber: null\n        });\n      }\n    };\n\n    this.handleBlur = ev => {\n      const input = ev.target;\n\n      if (!input) {\n        return;\n      }\n\n      if (input.value) {\n        // On blur we want to make sure that the user input is between the min and max values,\n        // and also round it up or down to the nearest step.\n        let value = this.cleanValue(input.value);\n\n        if (this.rounding) {\n          value = roundTo(value, this.step);\n        }\n\n        value = clamp(value, this.min, this.max);\n\n        if (value !== this.cleanValue(this.value) || value !== this.cleanValue(this.focusedValue)) {\n          this.setValue(value);\n          this.emitChange(ev);\n        }\n      } else {\n        this.duetChange.emit({\n          originalEvent: ev,\n          value: null,\n          valueAsNumber: null,\n          component: \"duet-number-input\"\n        });\n      }\n    };\n    /**\n     * Local methods.\n     */\n\n\n    this.emitChange = ev => {\n      const currentValue = this.cleanValue(this.value);\n      this.duetChange.emit({\n        originalEvent: ev,\n        value: currentValue.toString(),\n        valueAsNumber: currentValue,\n        component: \"duet-number-input\"\n      });\n    };\n\n    this.cleanValue = value => {\n      // Returns a number that can be used in calculations.\n      return value ? parseLocaleFloat(value, this.locale) : null;\n    };\n\n    this.localizeValue = value => {\n      // Returns a localized string that can be used as input value.\n      return value.toLocaleString(this.locale);\n    };\n\n    this.setValue = value => {\n      // Set the localized prop value.\n      this.value = this.localizeValue(value); // Finally also set the visible input value and unit.\n\n      this.duetInputElement.value = `${this.value} ${this.unit}`;\n    };\n\n    this.add = ev => {\n      // If this was called via a html button, prevent the default functionality\n      // to not trigger submit accidentally when used inside a form.\n      if (ev) {\n        ev.preventDefault();\n      }\n\n      const currentValue = this.cleanValue(this.value); // Only fire change event when necessary\n\n      if (currentValue === this.max) {\n        return;\n      } // in cases where no value set, incrementing should go to min\n\n\n      let newValue = currentValue == null ? this.min : currentValue + this.step; // handle cases where value is not multiple of step\n      // e.g. if someone enters 199, with a step of 100, add should go to 200\n      // and if someone enters 101, add should also go to 200\n\n      if (newValue % this.step !== 0) {\n        const adjustment = newValue % this.step;\n        newValue -= adjustment;\n      }\n\n      newValue = clamp(newValue, this.min, this.max);\n      this.value = this.localizeValue(newValue);\n      this.emitChange(ev);\n    };\n\n    this.subtract = ev => {\n      // If this was called via a html button, prevent the default functionality\n      // to not trigger submit accidentally when used inside a form.\n      if (ev) {\n        ev.preventDefault();\n      }\n\n      const currentValue = this.cleanValue(this.value); // Only fire change event when necessary.\n\n      if (currentValue === this.min) {\n        return;\n      }\n\n      let newValue = currentValue - this.step; // handle cases where value is not multiple of step\n      // if someone enters 199, with a step of 100, subtract should go to 100\n      // and if someone enters 101, subtract should also go to 100\n\n      if (newValue % this.step !== 0) {\n        const adjustment = this.step - newValue % this.step;\n        newValue += adjustment;\n      }\n\n      newValue = clamp(newValue, this.min, this.max);\n      this.value = this.localizeValue(newValue);\n      this.emitChange(ev);\n    };\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  componentWillLoad() {\n    inheritGlobalTheme(this); // Format the number value to a localeString initially.\n\n    if (this.value) {\n      this.value = this.localizeValue(parseLocaleFloat(this.value, this.locale));\n    }\n  }\n  /**\n   * Sets focus on the specified `duet-number-input`. Use this method instead of the global\n   * `input.focus()`.\n   */\n\n\n  setFocus(options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.duetInputElement.setFocus(options);\n    })();\n  }\n\n  clearValue() {\n    this.value = null;\n    this.duetInputElement.value = \"\";\n  }\n\n  formatAnnouncement() {\n    const current = this.cleanValue(this.value);\n\n    if (current == null) {\n      return \"\";\n    }\n\n    return this.accessibleLive.replace(\"{current}\", current.toString(10));\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    const identifier = this.identifier || this.inputId;\n    const maxlength = `${this.localizeValue(this.max)} ${this.unit}`.length;\n    const cleanedValue = this.cleanValue(this.value);\n    return h(Host, {\n      class: {\n        \"duet-theme-turva\": this.theme === \"turva\",\n        \"duet-expand\": this.expand,\n        \"duet-m-0\": this.margin === \"none\"\n      }\n    }, h(\"div\", {\n      class: \"duet-number-container\"\n    }, h(\"duet-input\", {\n      ref: input => this.duetInputElement = input,\n      onDuetChange: event => this.handleChange(event),\n      onDuetFocus: this.handleFocus,\n      onDuetBlur: event => this.handleBlur(event),\n      onKeyDown: event => this.handleKeyDown(event),\n      label: this.label,\n      value: this.value ? `${this.value} ${this.unit}` : \"\",\n      error: this.error,\n      \"aria-valuemin\": this.min,\n      \"aria-valuemax\": this.max,\n      \"aria-valuenow\": cleanedValue != null ? cleanedValue : \"\",\n      maxlength: maxlength,\n      name: this.name,\n      component: \"number\",\n      required: this.required,\n      disabled: this.disabled,\n      role: this.role,\n      labelHidden: this.labelHidden,\n      tooltip: this.tooltip,\n      identifier: identifier,\n      theme: this.theme,\n      margin: \"none\",\n      expand: true,\n      numericKeyboard: true,\n      autoComplete: \"off\",\n      type: \"text\",\n      accessibleActiveDescendant: this.accessibleActiveDescendant,\n      accessibleControls: this.accessibleControls,\n      accessibleOwns: this.accessibleOwns,\n      accessibleDescribedBy: this.accessibleDescribedBy\n    }, h(\"div\", {\n      class: {\n        \"duet-number-buttons\": true,\n        \"duet-no-label\": this.labelHidden\n      }\n    }, h(\"button\", {\n      \"aria-controls\": identifier,\n      disabled: this.disabled,\n      \"aria-disabled\": cleanedValue == null || cleanedValue === this.min ? \"true\" : \"false\",\n      class: \"duet-number-button duet-number-button-subtract\",\n      onClick: this.subtract,\n      type: \"button\"\n    }, h(\"duet-visually-hidden\", null, this.accessibleSubtract, \" \", this.step), h(\"duet-icon\", {\n      icon: actionSubtract.svg,\n      size: \"small\",\n      margin: \"none\",\n      color: this.theme === \"turva\" ? \"secondary-turva\" : \"secondary\"\n    })), h(\"button\", {\n      \"aria-controls\": identifier,\n      disabled: this.disabled,\n      \"aria-disabled\": cleanedValue === this.max ? \"true\" : \"false\",\n      class: \"duet-number-button duet-number-button-add\",\n      onClick: this.add,\n      type: \"button\"\n    }, h(\"duet-visually-hidden\", null, this.accessibleAdd, \" \", this.step), h(\"duet-icon\", {\n      icon: actionAdd.svg,\n      size: \"small\",\n      margin: \"none\",\n      color: this.theme === \"turva\" ? \"secondary-turva\" : \"secondary\"\n    })))), this.accessibleLiveEnabled && h(\"duet-visually-hidden\", {\n      \"aria-live\": \"polite\",\n      \"aria-atomic\": \"true\",\n      \"aria-relevant\": \"all\"\n    }, this.formatAnnouncement())));\n  }\n\n  get element() {\n    return getElement(this);\n  }\n\n};\nDuetNumberInput.style = duetNumberInputCss;\nexport { DuetNumberInput as duet_number_input };","map":null,"metadata":{},"sourceType":"module"}