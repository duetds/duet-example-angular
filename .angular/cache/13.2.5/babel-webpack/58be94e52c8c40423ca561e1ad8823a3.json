{"ast":null,"code":"import * as tslib_1 from 'tslib';\nimport { Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, HostListener, Directive, NgModule } from '@angular/core';\nimport { fromEvent } from 'rxjs';\nimport { defineCustomElements } from '@duetds/components/lib/loader';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nvar proxyInputs =\n/**\n* @param {?} Cmp\n* @param {?} inputs\n* @return {?}\n*/\nfunction (Cmp, inputs) {\n  /** @type {?} */\n  var Prototype = Cmp.prototype;\n  inputs.forEach(\n  /**\n  * @param {?} item\n  * @return {?}\n  */\n  function (item) {\n    Object.defineProperty(Prototype, item, {\n      get:\n      /**\n      * @return {?}\n      */\n      function () {\n        return this.el[item];\n      },\n      set:\n      /**\n      * @param {?} val\n      * @return {?}\n      */\n      function (val) {\n        var _this = this;\n\n        this.z.runOutsideAngular(\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this.el[item] = val;\n        });\n      }\n    });\n  });\n};\n/** @type {?} */\n\n\nvar proxyMethods =\n/**\n* @param {?} Cmp\n* @param {?} methods\n* @return {?}\n*/\nfunction (Cmp, methods) {\n  /** @type {?} */\n  var Prototype = Cmp.prototype;\n  methods.forEach(\n  /**\n  * @param {?} methodName\n  * @return {?}\n  */\n  function (methodName) {\n    Prototype[methodName] =\n    /**\n    * @return {?}\n    */\n    function () {\n      var _this = this;\n      /** @type {?} */\n\n\n      var args = arguments;\n      return this.z.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this.el[methodName].apply(_this.el, args);\n      });\n    };\n  });\n};\n/** @type {?} */\n\n\nvar proxyOutputs =\n/**\n* @param {?} instance\n* @param {?} el\n* @param {?} events\n* @return {?}\n*/\nfunction (instance, el, events) {\n  events.forEach(\n  /**\n  * @param {?} eventName\n  * @return {?}\n  */\n  function (eventName) {\n    return instance[eventName] = fromEvent(el, eventName);\n  });\n} // tslint:disable-next-line: only-arrow-functions\n; // tslint:disable-next-line: only-arrow-functions\n\n/**\n * @param {?} opts\n * @return {?}\n */\n\n\nfunction ProxyCmp(opts) {\n  /** @type {?} */\n  var decorator =\n  /**\n  * @param {?} cls\n  * @return {?}\n  */\n  function (cls) {\n    if (opts.inputs) {\n      proxyInputs(cls, opts.inputs);\n    }\n\n    if (opts.methods) {\n      proxyMethods(cls, opts.methods);\n    }\n\n    return cls;\n  };\n\n  return decorator;\n}\n\nvar DuetAlert =\n/** @class */\nfunction () {\n  function DuetAlert(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetDismiss']);\n  }\n\n  DuetAlert.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-alert',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleLabel', 'accessibleLabelDefaults', 'announcements', 'autoDismiss', 'dismissible', 'icon', 'margin', 'padding', 'theme', 'variation']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetAlert.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetAlert = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleLabel', 'accessibleLabelDefaults', 'announcements', 'autoDismiss', 'dismissible', 'icon', 'margin', 'padding', 'theme', 'variation']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetAlert);\n  return DuetAlert;\n}();\n\nvar DuetBadge =\n/** @class */\nfunction () {\n  function DuetBadge(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetBadge.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-badge',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['margin', 'theme', 'variation']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetBadge.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetBadge = tslib_1.__decorate([ProxyCmp({\n    inputs: ['margin', 'theme', 'variation']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetBadge);\n  return DuetBadge;\n}();\n\nvar DuetBreadcrumb =\n/** @class */\nfunction () {\n  function DuetBreadcrumb(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetBreadcrumb.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-breadcrumb',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleLabel', 'href', 'icon', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetBreadcrumb.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetBreadcrumb = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleLabel', 'href', 'icon', 'theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetBreadcrumb);\n  return DuetBreadcrumb;\n}();\n\nvar DuetBreadcrumbs =\n/** @class */\nfunction () {\n  function DuetBreadcrumbs(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetBreadcrumbs.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-breadcrumbs',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetBreadcrumbs.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetBreadcrumbs = tslib_1.__decorate([ProxyCmp({\n    inputs: ['theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetBreadcrumbs);\n  return DuetBreadcrumbs;\n}();\n\nvar DuetButton =\n/** @class */\nfunction () {\n  function DuetButton(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetFocus', 'duetBlur']);\n  }\n\n  DuetButton.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-button',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleExpanded', 'accessibleLabel', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'accessibleOwns', 'accessiblePressed', 'color', 'disabled', 'expand', 'external', 'fixed', 'icon', 'iconOnly', 'iconRight', 'iconSize', 'identifier', 'language', 'loading', 'margin', 'name', 'negative', 'padding', 'size', 'submit', 'theme', 'url', 'value', 'variation', 'wrapping']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetButton.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetButton = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleExpanded', 'accessibleLabel', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'accessibleOwns', 'accessiblePressed', 'color', 'disabled', 'expand', 'external', 'fixed', 'icon', 'iconOnly', 'iconRight', 'iconSize', 'identifier', 'language', 'loading', 'margin', 'name', 'negative', 'padding', 'size', 'submit', 'theme', 'url', 'value', 'variation', 'wrapping'],\n    'methods': ['setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetButton);\n  return DuetButton;\n}();\n\nvar DuetCaption =\n/** @class */\nfunction () {\n  function DuetCaption(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetCaption.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-caption',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['margin', 'selected', 'size', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetCaption.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetCaption = tslib_1.__decorate([ProxyCmp({\n    inputs: ['margin', 'selected', 'size', 'theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetCaption);\n  return DuetCaption;\n}();\n\nvar DuetCard =\n/** @class */\nfunction () {\n  function DuetCard(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetToggle']);\n  }\n\n  DuetCard.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-card',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleLabel', 'background', 'collapsible', 'heading', 'headingLevel', 'icon', 'image', 'margin', 'open', 'padding', 'secondaryHeading', 'theme', 'url', 'variation']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetCard.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetCard = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleLabel', 'background', 'collapsible', 'heading', 'headingLevel', 'icon', 'image', 'margin', 'open', 'padding', 'secondaryHeading', 'theme', 'url', 'variation'],\n    'methods': ['setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetCard);\n  return DuetCard;\n}();\n\nvar DuetCheckbox =\n/** @class */\nfunction () {\n  function DuetCheckbox(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetChange', 'duetFocus', 'duetBlur']);\n  }\n\n  DuetCheckbox.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-checkbox',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleIndex', 'accessibleOwns', 'checked', 'disabled', 'identifier', 'label', 'labelHidden', 'margin', 'name', 'required', 'role', 'theme', 'value']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetCheckbox.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetCheckbox = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleIndex', 'accessibleOwns', 'checked', 'disabled', 'identifier', 'label', 'labelHidden', 'margin', 'name', 'required', 'role', 'theme', 'value'],\n    'methods': ['setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetCheckbox);\n  return DuetCheckbox;\n}();\n\nvar DuetChoice =\n/** @class */\nfunction () {\n  function DuetChoice(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetChange', 'duetFocus', 'duetBlur']);\n  }\n\n  DuetChoice.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-choice',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleLabelInfoButton', 'accessibleLabelInfoButtonDefaults', 'accessibleOwns', 'caption', 'checked', 'collapsible', 'disabled', 'expand', 'icon', 'identifier', 'infoLabel', 'infoLabelDefaults', 'label', 'margin', 'name', 'padding', 'required', 'theme', 'type', 'value']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetChoice.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetChoice = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleLabelInfoButton', 'accessibleLabelInfoButtonDefaults', 'accessibleOwns', 'caption', 'checked', 'collapsible', 'disabled', 'expand', 'icon', 'identifier', 'infoLabel', 'infoLabelDefaults', 'label', 'margin', 'name', 'padding', 'required', 'theme', 'type', 'value'],\n    'methods': ['setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetChoice);\n  return DuetChoice;\n}();\n\nvar DuetChoiceGroup =\n/** @class */\nfunction () {\n  function DuetChoiceGroup(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetChoiceGroup.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-choice-group',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['caption', 'direction', 'disabled', 'error', 'label', 'labelHidden', 'margin', 'name', 'responsive', 'theme', 'tooltip', 'tooltipDirection', 'value']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetChoiceGroup.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetChoiceGroup = tslib_1.__decorate([ProxyCmp({\n    inputs: ['caption', 'direction', 'disabled', 'error', 'label', 'labelHidden', 'margin', 'name', 'responsive', 'theme', 'tooltip', 'tooltipDirection', 'value']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetChoiceGroup);\n  return DuetChoiceGroup;\n}();\n\nvar DuetCollapsible =\n/** @class */\nfunction () {\n  function DuetCollapsible(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetToggle']);\n  }\n\n  DuetCollapsible.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-collapsible',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['heading', 'headingLevel', 'headingSize', 'headingWeight', 'margin', 'open', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetCollapsible.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetCollapsible = tslib_1.__decorate([ProxyCmp({\n    inputs: ['heading', 'headingLevel', 'headingSize', 'headingWeight', 'margin', 'open', 'theme'],\n    'methods': ['setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetCollapsible);\n  return DuetCollapsible;\n}();\n\nvar DuetCookieConsent =\n/** @class */\nfunction () {\n  function DuetCookieConsent(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetCookieConsent']);\n  }\n\n  DuetCookieConsent.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-cookie-consent',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleLabel', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetCookieConsent.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetCookieConsent = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleLabel', 'theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetCookieConsent);\n  return DuetCookieConsent;\n}();\n\nvar DuetDatePicker =\n/** @class */\nfunction () {\n  function DuetDatePicker(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetChange', 'duetBlur', 'duetFocus']);\n  }\n\n  DuetDatePicker.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-date-picker',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'caption', 'direction', 'disabled', 'echoPlaceholder', 'error', 'expand', 'identifier', 'label', 'labelHidden', 'language', 'margin', 'max', 'min', 'name', 'placeholder', 'placeholderDefaults', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'validity', 'value']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetDatePicker.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetDatePicker = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'caption', 'direction', 'disabled', 'echoPlaceholder', 'error', 'expand', 'identifier', 'label', 'labelHidden', 'language', 'margin', 'max', 'min', 'name', 'placeholder', 'placeholderDefaults', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'validity', 'value'],\n    'methods': ['setFocus', 'show', 'hide']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetDatePicker);\n  return DuetDatePicker;\n}();\n\nvar DuetDivider =\n/** @class */\nfunction () {\n  function DuetDivider(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetDivider.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-divider',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['margin', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetDivider.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetDivider = tslib_1.__decorate([ProxyCmp({\n    inputs: ['margin', 'theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetDivider);\n  return DuetDivider;\n}();\n\nvar DuetEditableTable =\n/** @class */\nfunction () {\n  function DuetEditableTable(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetEditableTable.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-editable-table',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleRole', 'actionLabelDefaults', 'actions', 'alignment', 'groups', 'groupsLabelDefaults', 'hideGroups', 'items', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetEditableTable.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetEditableTable = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleRole', 'actionLabelDefaults', 'actions', 'alignment', 'groups', 'groupsLabelDefaults', 'hideGroups', 'items', 'theme'],\n    'methods': ['updateTable']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetEditableTable);\n  return DuetEditableTable;\n}();\n\nvar DuetEditableTableButton =\n/** @class */\nfunction () {\n  function DuetEditableTableButton(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetEditableItemAction']);\n  }\n\n  DuetEditableTableButton.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-editable-table-button',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetEditableTableButton.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetEditableTableButton = tslib_1.__decorate([ProxyCmp({\n    inputs: ['theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetEditableTableButton);\n  return DuetEditableTableButton;\n}();\n\nvar DuetEditableTableItem =\n/** @class */\nfunction () {\n  function DuetEditableTableItem(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetEditableItemAction']);\n  }\n\n  DuetEditableTableItem.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-editable-table-item',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['actions', 'alignment', 'data', 'keyName', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetEditableTableItem.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetEditableTableItem = tslib_1.__decorate([ProxyCmp({\n    inputs: ['actions', 'alignment', 'data', 'keyName', 'theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetEditableTableItem);\n  return DuetEditableTableItem;\n}();\n\nvar DuetEmptyState =\n/** @class */\nfunction () {\n  function DuetEmptyState(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetEmptyState.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-empty-state',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['icon', 'size', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetEmptyState.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetEmptyState = tslib_1.__decorate([ProxyCmp({\n    inputs: ['icon', 'size', 'theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetEmptyState);\n  return DuetEmptyState;\n}();\n\nvar DuetFieldset =\n/** @class */\nfunction () {\n  function DuetFieldset(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetFieldset.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-fieldset',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['caption', 'error', 'label', 'labelHidden', 'margin', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetFieldset.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetFieldset = tslib_1.__decorate([ProxyCmp({\n    inputs: ['caption', 'error', 'label', 'labelHidden', 'margin', 'theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetFieldset);\n  return DuetFieldset;\n}();\n\nvar DuetFooter =\n/** @class */\nfunction () {\n  function DuetFooter(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetChange', 'duetLogoClick', 'duetMenuClick', 'duetItemClick', 'duetAnalytics']);\n  }\n\n  DuetFooter.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-footer',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'items', 'language', 'logoHref', 'margin', 'menu', 'theme', 'variation']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetFooter.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetFooter = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'items', 'language', 'logoHref', 'margin', 'menu', 'theme', 'variation']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetFooter);\n  return DuetFooter;\n}();\n\nvar DuetGrid =\n/** @class */\nfunction () {\n  function DuetGrid(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetGrid.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-grid',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['alignment', 'breakpoint', 'direction', 'distribution', 'mobile', 'responsive']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetGrid.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetGrid = tslib_1.__decorate([ProxyCmp({\n    inputs: ['alignment', 'breakpoint', 'direction', 'distribution', 'mobile', 'responsive']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetGrid);\n  return DuetGrid;\n}();\n\nvar DuetGridItem =\n/** @class */\nfunction () {\n  function DuetGridItem(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetGridItem.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-grid-item',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['fill', 'margin', 'maxWidth', 'minWidth', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetGridItem.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetGridItem = tslib_1.__decorate([ProxyCmp({\n    inputs: ['fill', 'margin', 'maxWidth', 'minWidth', 'theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetGridItem);\n  return DuetGridItem;\n}();\n\nvar DuetHeader =\n/** @class */\nfunction () {\n  function DuetHeader(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetChange', 'duetSessionClick', 'duetSearchClick', 'duetUserClick', 'duetLanguageSelect', 'duetLogoClick', 'duetBackClick', 'duetContactClick', 'duetItemClick', 'duetSkipClick', 'duetAnalytics']);\n  }\n\n  DuetHeader.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-header',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleI18nLabels', 'accessibleI18nLabelsDefaults', 'accessibleLabel', 'accessibleLabelDefaults', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'back', 'contact', 'contactItems', 'currentHref', 'items', 'language', 'languageItems', 'logoHref', 'region', 'search', 'session', 'skipToId', 'theme', 'user']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetHeader.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetHeader = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleI18nLabels', 'accessibleI18nLabelsDefaults', 'accessibleLabel', 'accessibleLabelDefaults', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'back', 'contact', 'contactItems', 'currentHref', 'items', 'language', 'languageItems', 'logoHref', 'region', 'search', 'session', 'skipToId', 'theme', 'user'],\n    'methods': ['closeMenus', 'setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetHeader);\n  return DuetHeader;\n}();\n\nvar DuetHeading =\n/** @class */\nfunction () {\n  function DuetHeading(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetHeading.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-heading',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['border', 'color', 'hyphenate', 'level', 'margin', 'theme', 'visualLevel', 'weight']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetHeading.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetHeading = tslib_1.__decorate([ProxyCmp({\n    inputs: ['border', 'color', 'hyphenate', 'level', 'margin', 'theme', 'visualLevel', 'weight']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetHeading);\n  return DuetHeading;\n}();\n\nvar DuetHero =\n/** @class */\nfunction () {\n  function DuetHero(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetClick', 'duetAnalytics']);\n  }\n\n  DuetHero.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-hero',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'actions', 'back', 'buttonData', 'buttonId', 'buttonLabel', 'buttonUrl', 'categoryIcon', 'categoryIconColor', 'description', 'heading', 'icon', 'iconRight', 'iconSize', 'image', 'language', 'leftAlign', 'level', 'listItems', 'preHeading', 'textCenter', 'theme', 'variation']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetHero.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetHero = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'actions', 'back', 'buttonData', 'buttonId', 'buttonLabel', 'buttonUrl', 'categoryIcon', 'categoryIconColor', 'description', 'heading', 'icon', 'iconRight', 'iconSize', 'image', 'language', 'leftAlign', 'level', 'listItems', 'preHeading', 'textCenter', 'theme', 'variation']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetHero);\n  return DuetHero;\n}();\n\nvar DuetIcon =\n/** @class */\nfunction () {\n  function DuetIcon(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetIcon.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-icon',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['background', 'color', 'icon', 'margin', 'name', 'outline', 'responsive', 'size', 'src', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetIcon.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetIcon = tslib_1.__decorate([ProxyCmp({\n    inputs: ['background', 'color', 'icon', 'margin', 'name', 'outline', 'responsive', 'size', 'src', 'theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetIcon);\n  return DuetIcon;\n}();\n\nvar DuetInput =\n/** @class */\nfunction () {\n  function DuetInput(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetInput', 'duetChange', 'duetBlur', 'duetFocus']);\n  }\n\n  DuetInput.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-input',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleActiveDescendant', 'accessibleAutocomplete', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'autoComplete', 'caption', 'component', 'debounce', 'disabled', 'disallowPattern', 'echoPlaceholder', 'error', 'expand', 'icon', 'identifier', 'label', 'labelHidden', 'margin', 'maxlength', 'minlength', 'name', 'numericKeyboard', 'pattern', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'type', 'value']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetInput.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetInput = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleActiveDescendant', 'accessibleAutocomplete', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'autoComplete', 'caption', 'component', 'debounce', 'disabled', 'disallowPattern', 'echoPlaceholder', 'error', 'expand', 'icon', 'identifier', 'label', 'labelHidden', 'margin', 'maxlength', 'minlength', 'name', 'numericKeyboard', 'pattern', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'type', 'value'],\n    'methods': ['setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetInput);\n  return DuetInput;\n}();\n\nvar DuetLabel =\n/** @class */\nfunction () {\n  function DuetLabel(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetLabel.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-label',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['for', 'margin', 'size', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetLabel.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetLabel = tslib_1.__decorate([ProxyCmp({\n    inputs: ['for', 'margin', 'size', 'theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetLabel);\n  return DuetLabel;\n}();\n\nvar DuetLayout =\n/** @class */\nfunction () {\n  function DuetLayout(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetLayout.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-layout',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['center', 'margin', 'middle', 'sticky', 'stickyDistance', 'tabs']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetLayout.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetLayout = tslib_1.__decorate([ProxyCmp({\n    inputs: ['center', 'margin', 'middle', 'sticky', 'stickyDistance', 'tabs']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetLayout);\n  return DuetLayout;\n}();\n\nvar DuetLink =\n/** @class */\nfunction () {\n  function DuetLink(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetLink.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-link',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleLabel', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'external', 'identifier', 'language', 'theme', 'url']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetLink.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetLink = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleLabel', 'accessibleLabelExternal', 'accessibleLabelExternalDefaults', 'external', 'identifier', 'language', 'theme', 'url'],\n    'methods': ['setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetLink);\n  return DuetLink;\n}();\n\nvar DuetList =\n/** @class */\nfunction () {\n  function DuetList(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetList.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-list',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['breakpoint', 'labelWidth', 'margin', 'mobile', 'padding', 'theme', 'variation']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetList.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetList = tslib_1.__decorate([ProxyCmp({\n    inputs: ['breakpoint', 'labelWidth', 'margin', 'mobile', 'padding', 'theme', 'variation']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetList);\n  return DuetList;\n}();\n\nvar DuetListItem =\n/** @class */\nfunction () {\n  function DuetListItem(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetListItem.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-list-item',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>'\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetListItem.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  return DuetListItem;\n}();\n\nvar DuetLogo =\n/** @class */\nfunction () {\n  function DuetLogo(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetLogo.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-logo',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['href', 'inverse', 'language', 'margin', 'size', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetLogo.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetLogo = tslib_1.__decorate([ProxyCmp({\n    inputs: ['href', 'inverse', 'language', 'margin', 'size', 'theme'],\n    'methods': ['setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetLogo);\n  return DuetLogo;\n}();\n\nvar DuetModal =\n/** @class */\nfunction () {\n  function DuetModal(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetOpen', 'duetClose', 'duetBeforeClose']);\n  }\n\n  DuetModal.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-modal',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefaults', 'active', 'closeOnBlur', 'color', 'gutterSize', 'heading', 'headingLevel', 'icon', 'language', 'size', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetModal.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetModal = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefaults', 'active', 'closeOnBlur', 'color', 'gutterSize', 'heading', 'headingLevel', 'icon', 'language', 'size', 'theme'],\n    'methods': ['show', 'hide']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetModal);\n  return DuetModal;\n}();\n\nvar DuetNotification =\n/** @class */\nfunction () {\n  function DuetNotification(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetNotification.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-notification',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleLabelUnread', 'accessibleLabelUnreadDefaults', 'date', 'external', 'highlight', 'language', 'theme', 'url']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetNotification.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetNotification = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleLabelUnread', 'accessibleLabelUnreadDefaults', 'date', 'external', 'highlight', 'language', 'theme', 'url'],\n    'methods': ['setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetNotification);\n  return DuetNotification;\n}();\n\nvar DuetNotificationDrawer =\n/** @class */\nfunction () {\n  function DuetNotificationDrawer(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetNotificationDrawer.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-notification-drawer',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleLabelNotifications', 'accessibleLabelNotificationsDefaults', 'badge', 'direction', 'icon', 'label', 'language', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetNotificationDrawer.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetNotificationDrawer = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleLabelNotifications', 'accessibleLabelNotificationsDefaults', 'badge', 'direction', 'icon', 'label', 'language', 'theme'],\n    'methods': ['setFocus', 'open', 'close']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetNotificationDrawer);\n  return DuetNotificationDrawer;\n}();\n\nvar DuetNumberInput =\n/** @class */\nfunction () {\n  function DuetNumberInput(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetChange', 'duetInput', 'duetBlur', 'duetFocus']);\n  }\n\n  DuetNumberInput.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-number-input',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleActiveDescendant', 'accessibleAdd', 'accessibleAddDefaults', 'accessibleControls', 'accessibleDescribedBy', 'accessibleLive', 'accessibleLiveDefaults', 'accessibleLiveEnabled', 'accessibleOwns', 'accessibleSubtract', 'accessibleSubtractDefaults', 'disabled', 'error', 'expand', 'identifier', 'label', 'labelDefaults', 'labelHidden', 'language', 'locale', 'margin', 'max', 'min', 'name', 'required', 'role', 'rounding', 'step', 'theme', 'tooltip', 'unit', 'value']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetNumberInput.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetNumberInput = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleActiveDescendant', 'accessibleAdd', 'accessibleAddDefaults', 'accessibleControls', 'accessibleDescribedBy', 'accessibleLive', 'accessibleLiveDefaults', 'accessibleLiveEnabled', 'accessibleOwns', 'accessibleSubtract', 'accessibleSubtractDefaults', 'disabled', 'error', 'expand', 'identifier', 'label', 'labelDefaults', 'labelHidden', 'language', 'locale', 'margin', 'max', 'min', 'name', 'required', 'role', 'rounding', 'step', 'theme', 'tooltip', 'unit', 'value'],\n    'methods': ['setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetNumberInput);\n  return DuetNumberInput;\n}();\n\nvar DuetParagraph =\n/** @class */\nfunction () {\n  function DuetParagraph(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetParagraph.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-paragraph',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['color', 'margin', 'size', 'theme', 'variation', 'weight']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetParagraph.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetParagraph = tslib_1.__decorate([ProxyCmp({\n    inputs: ['color', 'margin', 'size', 'theme', 'variation', 'weight']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetParagraph);\n  return DuetParagraph;\n}();\n\nvar DuetProgress =\n/** @class */\nfunction () {\n  function DuetProgress(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetProgress.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-progress',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleDescribedBy', 'accessibleLabel', 'accessibleLabelUpload', 'accessibleLabelUploadDefaults', 'caption', 'height', 'progress', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetProgress.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetProgress = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleDescribedBy', 'accessibleLabel', 'accessibleLabelUpload', 'accessibleLabelUploadDefaults', 'caption', 'height', 'progress', 'theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetProgress);\n  return DuetProgress;\n}();\n\nvar DuetRadio =\n/** @class */\nfunction () {\n  function DuetRadio(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetChange', 'duetFocus', 'duetBlur']);\n  }\n\n  DuetRadio.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-radio',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleIndex', 'accessibleOwns', 'blockEvents', 'checked', 'disabled', 'identifier', 'label', 'margin', 'name', 'required', 'role', 'theme', 'value']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetRadio.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetRadio = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleIndex', 'accessibleOwns', 'blockEvents', 'checked', 'disabled', 'identifier', 'label', 'margin', 'name', 'required', 'role', 'theme', 'value'],\n    'methods': ['setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetRadio);\n  return DuetRadio;\n}();\n\nvar DuetRadioGroup =\n/** @class */\nfunction () {\n  function DuetRadioGroup(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetRadioGroup.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-radio-group',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['caption', 'direction', 'disabled', 'error', 'label', 'labelHidden', 'margin', 'name', 'responsive', 'theme', 'tooltip', 'tooltipDirection', 'value']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetRadioGroup.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetRadioGroup = tslib_1.__decorate([ProxyCmp({\n    inputs: ['caption', 'direction', 'disabled', 'error', 'label', 'labelHidden', 'margin', 'name', 'responsive', 'theme', 'tooltip', 'tooltipDirection', 'value']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetRadioGroup);\n  return DuetRadioGroup;\n}();\n\nvar DuetRangeSlider =\n/** @class */\nfunction () {\n  function DuetRangeSlider(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetChange', 'duetInput']);\n  }\n\n  DuetRangeSlider.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-range-slider',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'debounce', 'disabled', 'expand', 'identifier', 'label', 'labelHidden', 'locale', 'margin', 'max', 'min', 'name', 'required', 'step', 'theme', 'unit', 'value']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetRangeSlider.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetRangeSlider = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'debounce', 'disabled', 'expand', 'identifier', 'label', 'labelHidden', 'locale', 'margin', 'max', 'min', 'name', 'required', 'step', 'theme', 'unit', 'value'],\n    'methods': ['setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetRangeSlider);\n  return DuetRangeSlider;\n}();\n\nvar DuetScrollable =\n/** @class */\nfunction () {\n  function DuetScrollable(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetScrollable.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-scrollable',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['identifier', 'selected', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetScrollable.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetScrollable = tslib_1.__decorate([ProxyCmp({\n    inputs: ['identifier', 'selected', 'theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetScrollable);\n  return DuetScrollable;\n}();\n\nvar DuetSelect =\n/** @class */\nfunction () {\n  function DuetSelect(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetChange', 'duetFocus', 'duetBlur']);\n  }\n\n  DuetSelect.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-select',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'caption', 'disabled', 'echoPlaceholder', 'error', 'expand', 'identifier', 'items', 'label', 'labelHidden', 'margin', 'name', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'value']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetSelect.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetSelect = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'caption', 'disabled', 'echoPlaceholder', 'error', 'expand', 'identifier', 'items', 'label', 'labelHidden', 'margin', 'name', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'value'],\n    'methods': ['setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetSelect);\n  return DuetSelect;\n}();\n\nvar DuetSpacer =\n/** @class */\nfunction () {\n  function DuetSpacer(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetSpacer.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-spacer',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['breakpoint', 'direction', 'size']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetSpacer.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetSpacer = tslib_1.__decorate([ProxyCmp({\n    inputs: ['breakpoint', 'direction', 'size']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetSpacer);\n  return DuetSpacer;\n}();\n\nvar DuetSpinner =\n/** @class */\nfunction () {\n  function DuetSpinner(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetSpinner.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-spinner',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleLabel', 'color', 'size', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetSpinner.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetSpinner = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleLabel', 'color', 'size', 'theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetSpinner);\n  return DuetSpinner;\n}();\n\nvar DuetStep =\n/** @class */\nfunction () {\n  function DuetStep(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetStepClick']);\n  }\n\n  DuetStep.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-step',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['heading', 'headingLevel', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetStep.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetStep = tslib_1.__decorate([ProxyCmp({\n    inputs: ['heading', 'headingLevel', 'theme'],\n    'methods': ['setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetStep);\n  return DuetStep;\n}();\n\nvar DuetStepper =\n/** @class */\nfunction () {\n  function DuetStepper(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetStepChange']);\n  }\n\n  DuetStepper.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-stepper',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleLive', 'backDisabled', 'margin', 'selected', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetStepper.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetStepper = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleLive', 'backDisabled', 'margin', 'selected', 'theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetStepper);\n  return DuetStepper;\n}();\n\nvar DuetTab =\n/** @class */\nfunction () {\n  function DuetTab(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetTab.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-tab',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleDescription', 'accessibleDescriptionDefault', 'label', 'selected']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetTab.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetTab = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleDescription', 'accessibleDescriptionDefault', 'label', 'selected']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetTab);\n  return DuetTab;\n}();\n\nvar DuetTabGroup =\n/** @class */\nfunction () {\n  function DuetTabGroup(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetChange', 'duetTabChange']);\n  }\n\n  DuetTabGroup.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-tab-group',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['collapses', 'identifier', 'label', 'labelDefaults', 'labelHidden', 'language', 'margin', 'padding', 'scrolls', 'theme', 'variation']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetTabGroup.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetTabGroup = tslib_1.__decorate([ProxyCmp({\n    inputs: ['collapses', 'identifier', 'label', 'labelDefaults', 'labelHidden', 'language', 'margin', 'padding', 'scrolls', 'theme', 'variation'],\n    'methods': ['openTab', 'refresh']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetTabGroup);\n  return DuetTabGroup;\n}();\n\nvar DuetTable =\n/** @class */\nfunction () {\n  function DuetTable(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetTable.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-table',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['breakpoint', 'margin', 'sticky', 'stickyDistance', 'theme', 'variation']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetTable.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetTable = tslib_1.__decorate([ProxyCmp({\n    inputs: ['breakpoint', 'margin', 'sticky', 'stickyDistance', 'theme', 'variation']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetTable);\n  return DuetTable;\n}();\n\nvar DuetTextarea =\n/** @class */\nfunction () {\n  function DuetTextarea(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetInput', 'duetChange', 'duetBlur', 'duetFocus']);\n  }\n\n  DuetTextarea.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-textarea',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleActiveDescendant', 'accessibleAutocomplete', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'caption', 'counter', 'counterLabel', 'disabled', 'disallowPattern', 'echoPlaceholder', 'error', 'expand', 'identifier', 'label', 'labelHidden', 'margin', 'maxlength', 'minlength', 'name', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'value']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetTextarea.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetTextarea = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleActiveDescendant', 'accessibleAutocomplete', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'caption', 'counter', 'counterLabel', 'disabled', 'disallowPattern', 'echoPlaceholder', 'error', 'expand', 'identifier', 'label', 'labelHidden', 'margin', 'maxlength', 'minlength', 'name', 'placeholder', 'required', 'role', 'theme', 'tooltip', 'tooltipDirection', 'value'],\n    'methods': ['setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetTextarea);\n  return DuetTextarea;\n}();\n\nvar DuetToggle =\n/** @class */\nfunction () {\n  function DuetToggle(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetChange']);\n  }\n\n  DuetToggle.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-toggle',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'checked', 'disabled', 'identifier', 'label', 'margin', 'name', 'required', 'role', 'theme', 'value']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetToggle.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetToggle = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleActiveDescendant', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'checked', 'disabled', 'identifier', 'label', 'margin', 'name', 'required', 'role', 'theme', 'value'],\n    'methods': ['setFocus']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetToggle);\n  return DuetToggle;\n}();\n\nvar DuetTooltip =\n/** @class */\nfunction () {\n  function DuetTooltip(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetTooltip.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-tooltip',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefault', 'accessibleLabel', 'accessibleLabelDefault', 'active', 'breakpoint', 'direction', 'label', 'language', 'positionHorizontal', 'positionVertical', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetTooltip.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetTooltip = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefault', 'accessibleLabel', 'accessibleLabelDefault', 'active', 'breakpoint', 'direction', 'label', 'language', 'positionHorizontal', 'positionVertical', 'theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetTooltip);\n  return DuetTooltip;\n}();\n\nvar DuetTray =\n/** @class */\nfunction () {\n  function DuetTray(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetTray.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-tray',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefaults', 'accessibleOpenLabel', 'accessibleOpenLabelDefaults', 'active', 'autoHide', 'language', 'responsive', 'theme']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetTray.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetTray = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleCloseLabel', 'accessibleCloseLabelDefaults', 'accessibleOpenLabel', 'accessibleOpenLabelDefaults', 'active', 'autoHide', 'language', 'responsive', 'theme']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetTray);\n  return DuetTray;\n}();\n\nvar DuetUpload =\n/** @class */\nfunction () {\n  function DuetUpload(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['duetChange', 'duetBlur', 'duetFocus', 'duetDone', 'duetState', 'duetDelete', 'duetCancel', 'duetProgress', 'duetUpload']);\n  }\n\n  DuetUpload.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-upload',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleActiveDescendant', 'accessibleButtonLabel', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'actions', 'alignment', 'allowedExtensions', 'allowedMimetypes', 'buttonLabel', 'buttonLabelDefaults', 'caption', 'description', 'descriptionDefaults', 'disabled', 'error', 'external', 'fileListEmpty', 'fileListEmptyDefaults', 'files', 'groups', 'hideButton', 'hideGroups', 'identifier', 'label', 'labelDefaults', 'limitSelection', 'margin', 'maxBytes', 'maxBytesTotal', 'maxFiles', 'multiple', 'name', 'required', 'showLinks', 'statusLabelDefaults', 'statusMessageLabel', 'theme', 'uri', 'valid', 'value']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetUpload.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetUpload = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleActiveDescendant', 'accessibleButtonLabel', 'accessibleControls', 'accessibleDescribedBy', 'accessibleOwns', 'actions', 'alignment', 'allowedExtensions', 'allowedMimetypes', 'buttonLabel', 'buttonLabelDefaults', 'caption', 'description', 'descriptionDefaults', 'disabled', 'error', 'external', 'fileListEmpty', 'fileListEmptyDefaults', 'files', 'groups', 'hideButton', 'hideGroups', 'identifier', 'label', 'labelDefaults', 'limitSelection', 'margin', 'maxBytes', 'maxBytesTotal', 'maxFiles', 'multiple', 'name', 'required', 'showLinks', 'statusLabelDefaults', 'statusMessageLabel', 'theme', 'uri', 'valid', 'value'],\n    'methods': ['setFocus', 'upload', 'refresh', 'getFiles', 'updateValue']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetUpload);\n  return DuetUpload;\n}();\n\nvar DuetUploadAriaStatus =\n/** @class */\nfunction () {\n  function DuetUploadAriaStatus(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetUploadAriaStatus.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-upload-aria-status',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      inputs: ['accessibleAriaLive', 'inprogress', 'invalid', 'statusMessageLabel', 'total', 'valid']\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetUploadAriaStatus.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  DuetUploadAriaStatus = tslib_1.__decorate([ProxyCmp({\n    inputs: ['accessibleAriaLive', 'inprogress', 'invalid', 'statusMessageLabel', 'total', 'valid']\n  }), tslib_1.__metadata(\"design:paramtypes\", [ChangeDetectorRef, ElementRef, NgZone])], DuetUploadAriaStatus);\n  return DuetUploadAriaStatus;\n}();\n\nvar DuetVisuallyHidden =\n/** @class */\nfunction () {\n  function DuetVisuallyHidden(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n\n  DuetVisuallyHidden.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'duet-visually-hidden',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>'\n    }]\n  }];\n  /** @nocollapse */\n\n  DuetVisuallyHidden.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  return DuetVisuallyHidden;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar ValueAccessor =\n/** @class */\nfunction () {\n  function ValueAccessor(el) {\n    this.el = el;\n\n    this.onChange =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    this.onTouched =\n    /**\n    * @return {?}\n    */\n    function () {};\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  ValueAccessor.prototype.writeValue =\n  /**\n  * @param {?} value\n  * @return {?}\n  */\n  function (value) {\n    this.el.nativeElement.value = this.lastValue = value == null ? '' : value;\n  };\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  ValueAccessor.prototype.handleChangeEvent =\n  /**\n  * @param {?} value\n  * @return {?}\n  */\n  function (value) {\n    if (value !== this.lastValue) {\n      this.lastValue = value;\n      this.onChange(value);\n    }\n  };\n  /**\n   * @return {?}\n   */\n\n\n  ValueAccessor.prototype._handleBlurEvent =\n  /**\n  * @return {?}\n  */\n  function () {\n    this.onTouched();\n  };\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  ValueAccessor.prototype.registerOnChange =\n  /**\n  * @param {?} fn\n  * @return {?}\n  */\n  function (fn) {\n    this.onChange = fn;\n  };\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  ValueAccessor.prototype.registerOnTouched =\n  /**\n  * @param {?} fn\n  * @return {?}\n  */\n  function (fn) {\n    this.onTouched = fn;\n  };\n  /**\n   * @param {?} disabled\n   * @return {?}\n   */\n\n\n  ValueAccessor.prototype.setDisabledState =\n  /**\n  * @param {?} disabled\n  * @return {?}\n  */\n  function (disabled) {\n    this.el.nativeElement.disabled = disabled;\n  };\n\n  ValueAccessor.propDecorators = {\n    _handleBlurEvent: [{\n      type: HostListener,\n      args: ['focusout']\n    }]\n  };\n  return ValueAccessor;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NumericValueAccessor =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(NumericValueAccessor, _super);\n\n  function NumericValueAccessor(el) {\n    return _super.call(this, el) || this;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  NumericValueAccessor.prototype.registerOnChange =\n  /**\n  * @param {?} fn\n  * @return {?}\n  */\n  function (fn) {\n    _super.prototype.registerOnChange.call(this,\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    function (value) {\n      fn(value === '' ? null : parseFloat(value));\n    });\n  };\n\n  NumericValueAccessor.decorators = [{\n    type: Directive,\n    args: [{\n      /* tslint:disable-next-line:directive-selector */\n      selector: 'duet-input[type=number], duet-number-input',\n      host: {\n        '(duetChange)': 'handleChangeEvent($event.target.value)'\n      },\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: NumericValueAccessor,\n        multi: true\n      }]\n    }]\n  }];\n  /** @nocollapse */\n\n  NumericValueAccessor.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }];\n  };\n\n  return NumericValueAccessor;\n}(ValueAccessor);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar BooleanValueAccessor =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(BooleanValueAccessor, _super);\n\n  function BooleanValueAccessor(el) {\n    return _super.call(this, el) || this;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  BooleanValueAccessor.prototype.writeValue =\n  /**\n  * @param {?} value\n  * @return {?}\n  */\n  function (value) {\n    this.el.nativeElement.checked = this.lastValue = value == null ? false : value;\n  };\n\n  BooleanValueAccessor.decorators = [{\n    type: Directive,\n    args: [{\n      /* tslint:disable-next-line:directive-selector */\n      selector: 'duet-checkbox, duet-toggle, duet-choice[type=checkbox]',\n      host: {\n        '(duetChange)': 'handleChangeEvent($event.target.checked)'\n      },\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: BooleanValueAccessor,\n        multi: true\n      }]\n    }]\n  }];\n  /** @nocollapse */\n\n  BooleanValueAccessor.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }];\n  };\n\n  return BooleanValueAccessor;\n}(ValueAccessor);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar TextValueAccessor =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TextValueAccessor, _super);\n\n  function TextValueAccessor(el) {\n    return _super.call(this, el) || this;\n  }\n\n  TextValueAccessor.decorators = [{\n    type: Directive,\n    args: [{\n      /* tslint:disable-next-line:directive-selector */\n      selector: 'duet-input:not([type=number]), duet-textarea, duet-date-picker',\n      host: {\n        '(duetChange)': 'handleChangeEvent($event.target.value)'\n      },\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: TextValueAccessor,\n        multi: true\n      }]\n    }]\n  }];\n  /** @nocollapse */\n\n  TextValueAccessor.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }];\n  };\n\n  return TextValueAccessor;\n}(ValueAccessor);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar SelectValueAccessor =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SelectValueAccessor, _super);\n\n  function SelectValueAccessor(el) {\n    return _super.call(this, el) || this;\n  }\n\n  SelectValueAccessor.decorators = [{\n    type: Directive,\n    args: [{\n      /* tslint:disable-next-line:directive-selector */\n      selector: 'duet-range-slider, duet-select, duet-radio-group, duet-choice-group',\n      host: {\n        '(duetChange)': 'handleChangeEvent($event.target.value)'\n      },\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: SelectValueAccessor,\n        multi: true\n      }]\n    }]\n  }];\n  /** @nocollapse */\n\n  SelectValueAccessor.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }];\n  };\n\n  return SelectValueAccessor;\n}(ValueAccessor);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar RadioValueAccessor =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(RadioValueAccessor, _super);\n\n  function RadioValueAccessor(el) {\n    return _super.call(this, el) || this;\n  }\n\n  RadioValueAccessor.decorators = [{\n    type: Directive,\n    args: [{\n      /* tslint:disable-next-line:directive-selector */\n      selector: 'duet-radio, duet-choice[type=radio]',\n      host: {\n        '(duetSelect)': 'handleChangeEvent($event.target.checked)'\n      },\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: RadioValueAccessor,\n        multi: true\n      }]\n    }]\n  }];\n  /** @nocollapse */\n\n  RadioValueAccessor.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }];\n  };\n\n  return RadioValueAccessor;\n}(ValueAccessor);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\ndefineCustomElements(window);\n/** @type {?} */\n\nvar DECLARATIONS = [// proxies\nDuetAlert, DuetBadge, DuetBreadcrumb, DuetBreadcrumbs, DuetButton, DuetCaption, DuetCard, DuetCheckbox, DuetChoice, DuetChoiceGroup, DuetCollapsible, DuetCookieConsent, DuetDatePicker, DuetDivider, DuetEditableTable, DuetEditableTableButton, DuetEditableTableItem, DuetEmptyState, DuetFieldset, DuetFooter, DuetGrid, DuetGridItem, DuetHeader, DuetHeading, DuetHero, DuetIcon, DuetInput, DuetLabel, DuetLayout, DuetLink, DuetList, DuetListItem, DuetLogo, DuetModal, DuetNotification, DuetNotificationDrawer, DuetNumberInput, DuetParagraph, DuetProgress, DuetRadio, DuetRadioGroup, DuetRangeSlider, DuetScrollable, DuetSelect, DuetSpacer, DuetSpinner, DuetStep, DuetStepper, DuetTab, DuetTabGroup, DuetTable, DuetTextarea, DuetToggle, DuetTooltip, DuetTray, DuetUpload, DuetUploadAriaStatus, DuetVisuallyHidden, // Value Accessors\nNumericValueAccessor, BooleanValueAccessor, RadioValueAccessor, TextValueAccessor, SelectValueAccessor];\n\nvar DuetComponents =\n/** @class */\nfunction () {\n  function DuetComponents() {}\n\n  DuetComponents.decorators = [{\n    type: NgModule,\n    args: [{\n      declarations: DECLARATIONS,\n      exports: DECLARATIONS,\n      imports: [],\n      providers: []\n    }]\n  }];\n  return DuetComponents;\n}();\n\nexport { DuetAlert, DuetBadge, DuetBreadcrumb, DuetBreadcrumbs, DuetButton, DuetCaption, DuetCard, DuetCheckbox, DuetChoice, DuetChoiceGroup, DuetCollapsible, DuetComponents, DuetCookieConsent, DuetDatePicker, DuetDivider, DuetEditableTable, DuetEditableTableButton, DuetEditableTableItem, DuetEmptyState, DuetFieldset, DuetFooter, DuetGrid, DuetGridItem, DuetHeader, DuetHeading, DuetHero, DuetIcon, DuetInput, DuetLabel, DuetLayout, DuetLink, DuetList, DuetListItem, DuetLogo, DuetModal, DuetNotification, DuetNotificationDrawer, DuetNumberInput, DuetParagraph, DuetProgress, DuetRadio, DuetRadioGroup, DuetRangeSlider, DuetScrollable, DuetSelect, DuetSpacer, DuetSpinner, DuetStep, DuetStepper, DuetTab, DuetTabGroup, DuetTable, DuetTextarea, DuetToggle, DuetTooltip, DuetTray, DuetUpload, DuetUploadAriaStatus, DuetVisuallyHidden, ProxyCmp, proxyInputs, proxyMethods, proxyOutputs, NumericValueAccessor as ɵa, ValueAccessor as ɵb, BooleanValueAccessor as ɵc, RadioValueAccessor as ɵd, TextValueAccessor as ɵe, SelectValueAccessor as ɵf };","map":null,"metadata":{},"sourceType":"module"}