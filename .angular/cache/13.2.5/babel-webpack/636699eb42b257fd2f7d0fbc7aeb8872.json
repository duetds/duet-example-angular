{"ast":null,"code":"import _asyncToGenerator from \"/Users/klaushougesen/_repos/consulting/lahi/github/duet-example-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Built with Duet Design System\n */\nimport { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-eb374972.js';\nimport { D as DuetStringsExternalDefaults } from './common-strings-97e04e4b.js';\nimport { c as createID } from './create-id-981107da.js';\nimport { F as FocusGuard } from './focus-utils-d3cd655b.js';\nimport { i as isKeyboardClick, h as isQuestionKey, f as isEscapeKey } from './keyboard-utils-584cedd7.js';\nimport { g as getLocaleString, a as getLanguage } from './language-utils-344d894c.js';\nimport { i as inheritGlobalTheme } from './themeable-component-572685dd.js';\nimport { f as findCheckedOption, w as watchForOptions } from './watch-options-dd55bce8.js';\nimport './string-utils-2f1793b8.js';\nvar messagingInfo = {\n  \"title\": \"messaging-info\",\n  \"tags\": \"messaging info information circle\",\n  \"svg\": \"<svg fill=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" role=\\\"img\\\"><path d=\\\"M13.5 17.25A2.252 2.252 0 0 1 11.25 15v-3.75h-.75a.75.75 0 0 1 0-1.5h.75c.827 0 1.5.673 1.5 1.5V15c0 .414.336.75.75.75h.75a.75.75 0 0 1 0 1.5z\\\"/><circle cx=\\\"11.625\\\" cy=\\\"7.125\\\" r=\\\"1.125\\\"/><path d=\\\"M12 24C5.383 24 0 18.617 0 12S5.383 0 12 0s12 5.383 12 12-5.383 12-12 12zm0-22.5C6.21 1.5 1.5 6.21 1.5 12S6.21 22.5 12 22.5 22.5 17.79 22.5 12 17.79 1.5 12 1.5z\\\"/></svg>\"\n};\nconst duetChoiceCss = \"*.sc-duet-choice,*.sc-duet-choice::after,*.sc-duet-choice::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-choice-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-right:16px !important;margin-bottom:12px !important;display:inline-flex;flex-direction:column;width:auto;max-width:100%;vertical-align:bottom;-webkit-tap-highlight-color:transparent}.sc-duet-choice-h:last-child,.sc-duet-choice-h:last-of-type{margin-right:0 !important}@media (max-width: 35.9375em){.sc-duet-choice-h{width:100%}}.duet-expand.sc-duet-choice-h{width:100% !important}.duet-m-0.sc-duet-choice-h{margin:0 !important}.duet-fixed.sc-duet-choice-h{width:auto !important}.vertical.sc-duet-choice-h{margin-right:0 !important}.horizontal.sc-duet-choice-h{margin-bottom:0 !important}@media (min-width: 48em){.horizontal-responsive.sc-duet-choice-h{margin-bottom:0 !important;margin-right:16px !important}.horizontal-responsive.sc-duet-choice-h:last-child,.horizontal-responsive.sc-duet-choice-h:last-of-type{margin-right:0 !important}}.sc-duet-choice-h:last-child:not(:only-child){margin-right:0 !important}.duet-choice-card.sc-duet-choice{position:relative;display:block;width:100%;min-width:8rem;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-size:1rem;font-weight:400;-webkit-hyphens:auto;hyphens:auto;line-height:1.1;color:#00294d !important;text-align:left;background:white;border-width:2px}.duet-choice-card.duet-p-0.sc-duet-choice{padding:0 !important}.duet-choice-card.duet-m-0.sc-duet-choice{margin:0 !important}.duet-theme-turva.sc-duet-choice .duet-choice-card.sc-duet-choice{font-family:\\\"turva-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";color:#171c3a !important}.duet-choice-card-flextainer.sc-duet-choice{display:flex}.duet-choice-label.sc-duet-choice{-webkit-user-select:none;user-select:none;position:relative;z-index:100;display:block;width:100%;padding:20px 48px 20px 16px;font-size:1rem;font-weight:600;text-decoration:none;cursor:pointer;border:2px solid #e1e3e6;border-radius:4px;transition:background-color 150ms ease}.has-info.sc-duet-choice .duet-choice-label.sc-duet-choice{padding-right:110px;border-top-right-radius:0;border-bottom-right-radius:0}.info.sc-duet-choice .duet-choice-label.sc-duet-choice{border-bottom-right-radius:0;border-bottom-left-radius:0}.duet-theme-turva.sc-duet-choice .duet-choice-label.sc-duet-choice{border-color:#e4e4e6}.duet-theme-turva.sc-duet-choice .info.sc-duet-choice .duet-choice-label.sc-duet-choice{border-color:#e4e4e6}.duet-choice-label.sc-duet-choice:not(.no-hover):hover{border-color:#909599}.duet-choice-label.sc-duet-choice:not(.no-hover):hover .duet-checkmark-container.sc-duet-choice{border-color:#909599}.duet-theme-turva.sc-duet-choice .duet-choice-label.sc-duet-choice:not(.no-hover):hover{border-color:#747475}.duet-theme-turva.sc-duet-choice .duet-choice-label.sc-duet-choice:not(.no-hover):hover .duet-checkmark-container.sc-duet-choice{border-color:#747475}.duet-theme-turva.sc-duet-choice .info.sc-duet-choice .duet-choice-label.sc-duet-choice:not(.no-hover):hover{border-color:#747475}.duet-choice-label.sc-duet-choice:active{opacity:0.75;transition:none !important}.has-icon.sc-duet-choice .duet-choice-label.sc-duet-choice{padding-left:48px}.checked.sc-duet-choice .duet-choice-label.sc-duet-choice{color:#0077b3 !important;background:#f3f9fc;border-color:#0077b3 !important}.checked.sc-duet-choice .duet-choice-label.sc-duet-choice .duet-checkmark-container.sc-duet-choice{border-color:#0077b3}.duet-theme-turva.sc-duet-choice .checked.sc-duet-choice .duet-choice-label.sc-duet-choice{color:#171c3a !important;background:#f5f5f7;border-color:#171c3a !important}.duet-theme-turva.sc-duet-choice .checked.sc-duet-choice .duet-choice-label.sc-duet-choice .duet-checkmark-container.sc-duet-choice{border-color:#c60c30}.checked.collapsible.sc-duet-choice .duet-choice-label.sc-duet-choice{border-bottom:0 !important;border-bottom-right-radius:0;border-bottom-left-radius:0}input.sc-duet-choice:focus{outline:0}.user-is-tabbing.sc-duet-choice-h input.sc-duet-choice:checked:focus+.duet-choice-label.sc-duet-choice{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3)}.user-is-tabbing.sc-duet-choice-h input.sc-duet-choice:not(:checked):focus+.duet-choice-label.sc-duet-choice{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}.user-is-tabbing.duet-theme-turva.sc-duet-choice-h input.sc-duet-choice:checked:focus+.duet-choice-label.sc-duet-choice{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2)}.user-is-tabbing.duet-theme-turva.sc-duet-choice-h input.sc-duet-choice:not(:checked):focus+.duet-choice-label.sc-duet-choice{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}input[disabled].sc-duet-choice+.duet-choice-label.sc-duet-choice{color:#657787 !important;cursor:default !important;background:#f5f8fa !important;border-color:#e1e3e6 !important}input[disabled].sc-duet-choice+.duet-choice-label.sc-duet-choice .duet-checkmark.sc-duet-choice{border-color:#657787 !important}.duet-theme-turva.sc-duet-choice input[disabled].sc-duet-choice+.duet-choice-label.sc-duet-choice{color:#747475 !important;background:#f5f5f7 !important;border-color:#e4e4e6 !important}.duet-theme-turva.sc-duet-choice input[disabled].sc-duet-choice+.duet-choice-label.sc-duet-choice .duet-checkmark.sc-duet-choice{border-color:#747475 !important}.checked.sc-duet-choice input[disabled].sc-duet-choice+.duet-choice-label.sc-duet-choice{background:#e1e3e6 !important;border-color:#e1e3e6 !important}.duet-theme-turva.sc-duet-choice .checked.sc-duet-choice input[disabled].sc-duet-choice+.duet-choice-label.sc-duet-choice{background:#e4e4e6 !important;border-color:#e4e4e6 !important}.duet-checkmark-container.sc-duet-choice{position:absolute;top:17.7777777778px;right:16px;width:20px;height:20px;border:1px solid #909599;border-radius:4px;transition:border 300ms ease}.duet-theme-turva.sc-duet-choice .duet-checkmark-container.sc-duet-choice{border-color:#747475}.checked.sc-duet-choice .duet-checkmark-container.sc-duet-choice{background:#0077b3;border-color:#0077b3;transition:none}.duet-theme-turva.sc-duet-choice .checked.sc-duet-choice .duet-checkmark-container.sc-duet-choice{background:#171c3a;border-color:#171c3a !important}.duet-checkmark-container.duet-checkmark-radio.sc-duet-choice{border-radius:50%}[disabled].sc-duet-choice+label.sc-duet-choice .duet-checkmark-container.sc-duet-choice{border-color:#cfd2d4 !important}.duet-theme-turva.sc-duet-choice [disabled].sc-duet-choice+label.sc-duet-choice .duet-checkmark-container.sc-duet-choice{border-color:#cfcfd1 !important}.checked.sc-duet-choice [disabled].sc-duet-choice+label.sc-duet-choice .duet-checkmark-container.sc-duet-choice{background:#cfd2d4 !important}.duet-theme-turva.sc-duet-choice .checked.sc-duet-choice [disabled].sc-duet-choice+label.sc-duet-choice .duet-checkmark-container.sc-duet-choice{background:#cfcfd1 !important}.duet-checkmark.sc-duet-choice{position:absolute;top:10px;left:3px;width:5.3333333333px;height:11.8518518519px;border-top:2px solid white;border-right:2px solid white;opacity:1;transform:scaleX(-1) rotate(135deg) translateZ(0);transform-origin:left top;animation-name:duet-checkmark;animation-duration:600ms;animation-timing-function:ease-out;animation-fill-mode:forwards}@keyframes duet-checkmark{0%{width:0;height:0;opacity:1}20%{width:5.3333333333px;height:0;opacity:1}40%,100%{width:5.3333333333px;height:11.8518518519px;opacity:1}}.duet-choice-card-icon.sc-duet-choice{position:absolute;top:50%;left:16px;transform:translateY(-50%)}.duet-choice-card-icon.sc-duet-choice duet-icon.sc-duet-choice{display:block}.duet-choice-section-hidden.sc-duet-choice{display:none}.duet-choice-card-info.duet-choice-card-collapsed.sc-duet-choice,.duet-choice-card-collapsed.duet-choice-card-collapsible.sc-duet-choice{position:relative;width:auto;padding:0 !important;background:unset !important;border:0;border-radius:0}.duet-choice-card-info.sc-duet-choice,.duet-choice-card-collapsible.sc-duet-choice{padding:28px !important;position:relative;z-index:200;width:100%;font-weight:400;color:#00294d;border:2px solid #e1e3e6;border-top:0;border-radius:0 0 4px 4px}.duet-theme-turva.sc-duet-choice .duet-choice-card-info.sc-duet-choice,.duet-theme-turva.sc-duet-choice .duet-choice-card-collapsible.sc-duet-choice{color:#171c3a;border-color:#171c3a}.checked.sc-duet-choice .duet-choice-card-info.sc-duet-choice,.checked.sc-duet-choice .duet-choice-card-collapsible.sc-duet-choice{display:block}.duet-choice-card-info-expanded.sc-duet-choice,.duet-choice-card-collapsible-expanded.sc-duet-choice{display:block}.duet-choice-card-collapsible.sc-duet-choice{background:white;border:2px solid #0077b3;border-top:0}.duet-choice-card-collapsible.duet-theme-turva.sc-duet-choice{background:white;border-color:#171c3a}.duet-choice-card-collapsible-disabled.sc-duet-choice{background:#f5f8fa;border-color:#e1e3e6}.duet-choice-card-collapsible-disabled.duet-theme-turva.sc-duet-choice{background:#f5f5f7;border-color:#e4e4e6}.duet-choice-card-info.sc-duet-choice{font-size:0.875rem;line-height:1.5;background:#f5f8fa;transition:150ms ease-out}.duet-choice-card-info.duet-theme-turva.sc-duet-choice{background:#f5f5f7;border-color:#e4e4e6}.duet-choice-info-toggle.sc-duet-choice{display:flex;flex-shrink:0;justify-content:center;width:57.6px;padding-top:18px;cursor:pointer;background:white;border:2px solid #e1e3e6;border-left:0 none;border-top-right-radius:4px;border-bottom-right-radius:4px;-webkit-appearance:none;appearance:none}.duet-choice-info-toggle[aria-expanded=true].sc-duet-choice{background:#f5f8fa;border-bottom:0;border-bottom-right-radius:0}.duet-choice-info-toggle[disabled].sc-duet-choice{pointer-events:none;background:#f5f8fa !important;border-color:#e1e3e6 !important}.duet-choice-info-toggle[disabled].sc-duet-choice .duet-choice-info-icon.sc-duet-choice{color:#909599 !important}.duet-choice-info-toggle[disabled].duet-theme-turva.sc-duet-choice{background:#f5f5f7 !important;border-color:#e4e4e6 !important}.duet-choice-info-toggle[disabled].duet-theme-turva.sc-duet-choice .duet-choice-info-icon.sc-duet-choice{color:#747475 !important}.duet-choice-info-toggle.sc-duet-choice:focus{outline:none}.user-is-tabbing.sc-duet-choice-h .duet-choice-info-toggle.sc-duet-choice:focus{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}.duet-choice-label.sc-duet-choice:not(.no-hover):hover .duet-choice-info-toggle.sc-duet-choice{border-left-color:#909599}.checked.sc-duet-choice .duet-choice-info-toggle.sc-duet-choice{border-left-color:#0077b3 !important}.duet-choice-info-toggle.sc-duet-choice duet-icon.sc-duet-choice{display:block}.duet-choice-info-toggle.sc-duet-choice .duet-choice-info-icon.sc-duet-choice{color:#0077b3}.duet-theme-turva.sc-duet-choice .duet-choice-info-toggle.sc-duet-choice .duet-choice-info-icon.sc-duet-choice{color:#c60c30}.duet-choice-input.sc-duet-choice{position:absolute !important;width:auto;height:auto;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);color:transparent}\";\nlet DuetChoice = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.duetChange = createEvent(this, \"duetChange\", 7);\n    this.duetFocus = createEvent(this, \"duetFocus\", 7);\n    this.duetBlur = createEvent(this, \"duetBlur\", 7);\n    this.hasHeader = false;\n    this.choiceId = createID(\"DuetChoice\");\n    this.expandId = createID(\"DuetChoiceExpand\");\n    this.headerId = createID(\"DuetChoiceHeader\");\n    this.infoButtonId = createID(\"DuetChoiceInfoButton\");\n    /**\n     * State() variables\n     * Inlined decorator, alphabetical order.\n     */\n\n    this.isHovering = false;\n    this.isInfoOpen = false;\n    this.isBlurred = false;\n    /**\n     * Theme of the choice.\n     */\n\n    this.theme = \"\";\n    /**\n     * Label for the choice button.\n     */\n\n    this.label = \"label\";\n    /**\n     * Property to change accessibleLabelInfoButton defaults on the component.\n     * normally you would handle these strings on an application level and override @accessibleLabelInfoButton when needed\n     */\n\n    this.accessibleLabelInfoButtonDefaults = DuetStringsExternalDefaults;\n    /**\n     * Accessible label that is read for screen reader users in the info toggle trigger button.\n     * Not visible for normal users.\n     * @default {fi: \"Avautuu uuteen ikkunaan\",sv: \"Öppnas i nytt fönster\",en: \"Opens in a new window\"}\n     */\n\n    this.accessibleLabelInfoButton = getLocaleString(this.accessibleLabelInfoButtonDefaults);\n    /**\n     * Additional caption to show inside the label of the choice button.\n     */\n\n    this.caption = \"\";\n    /**\n     * Type of the choice button. You can set the type of the choice to be either\n     * “radio” or “checkbox”. Depending on this selection we convey the selection\n     * type to assistive technologies as well. When type “radio” is chosen it is\n     * required to place the choices inside Choice Group component.\n     */\n\n    this.type = \"checkbox\";\n    /**\n     * Checked state of the choice button.\n     */\n\n    this.checked = false;\n    /**\n     * Makes the choice button open a new section underneath it when clicked or\n     * tapped. This new section can be used to show more options related to this\n     * choice. Please note that this feature can’t be used together with the \"info\"\n     * functionality and that it only accepts plain dom nodes (no shadow dom elements\n     * such as duet-paragraph can be used as this will break accessibility)\n     */\n\n    this.collapsible = false;\n    /**\n     * Controls the margin of the component.\n     */\n\n    this.margin = \"auto\";\n    /**\n     * Icon to display to the left of the choice button label.\n     */\n\n    this.icon = \"\";\n    /**\n     * Expands the choice button to fill 100% of the container width.\n     */\n\n    this.expand = false;\n    /**\n     * Controls the padding of the component.\n     */\n\n    this.padding = \"auto\";\n    /**\n     * Makes the choice component disabled. This prevents users from being able to\n     * interact with the choice, and conveys its inactive state to assistive technologies.\n     */\n\n    this.disabled = false;\n    /**\n     * Set whether the input is required or not. Please note that this is necessary for\n     * accessible inputs when the user is required to fill them. When using this property\n     * you need to also set “novalidate” attribute to your form element to prevent\n     * browser from displaying its own validation errors.\n     */\n\n    this.required = false;\n    /**\n     * Placeholder defaults\n     * @default { fi: \"pp.kk.vvvv\", en: \"dd.mm.yyyy\", sv: \"dd.mm.åååå\" }\n     */\n\n    this.infoLabelDefaults = {\n      fi: \"Lisätietoja\",\n      en: \"More information about\",\n      sv: \"Mera information om\"\n    };\n    /**\n     * Hint text to display before the user types into the date picker input.\n     * @default  {\n     *     fi: \"Lisätietoja\",\n     *     en: \"More information about\",\n     *     sv: \"Mera information om\",\n     *   }\n     */\n\n    this.infoLabel = getLocaleString(this.infoLabelDefaults, getLanguage());\n\n    this.onMouseEnter = () => {\n      this.isHovering = true;\n    };\n\n    this.onMouseLeave = () => {\n      this.isHovering = false;\n    };\n\n    this.onClick = ev => {\n      this.toggleChecked(ev);\n    };\n\n    this.handleKeyDown = ev => {\n      if (isKeyboardClick(ev)) {\n        this.toggleChecked(ev);\n      }\n\n      if (isQuestionKey(ev) && this.hasInfo) {\n        this.toggleInfo();\n      }\n    };\n\n    this.onChange = () => {\n      this.checked = this.nativeInput.checked || false;\n      this.duetChange.emit({\n        checked: this.checked,\n        value: this.value,\n        component: \"duet-choice\"\n      });\n    };\n\n    this.onBlur = ev => {\n      this.duetBlur.emit({\n        originalEvent: ev,\n        checked: this.checked,\n        value: this.value,\n        component: \"duet-choice\"\n      });\n    };\n\n    this.onFocus = ev => {\n      this.duetFocus.emit({\n        originalEvent: ev,\n        checked: this.checked,\n        value: this.value,\n        component: \"duet-choice\"\n      });\n    };\n    /**\n     * Local methods\n     */\n\n\n    this.toggleChecked = ev => {\n      if (this.disabled || this.groupDisabled) {\n        return;\n      }\n\n      this.isInfoOpen = false; // if it's a radio button and it's already checked\n      // we shouldn't fire an event, so exit early\n\n      if (this.type === \"radio\" && this.checked) {\n        return;\n      }\n\n      this.checked = !this.checked;\n      this.duetChange.emit({\n        originalEvent: ev,\n        checked: this.checked,\n        value: this.value,\n        component: \"duet-choice\"\n      });\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    this.toggleInfo = () => {\n      this.isInfoOpen = !this.isInfoOpen;\n    };\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n    this.hasInfo = !!this.element.querySelector(\"[slot='info']\");\n    this.hasHeader = !!this.element.querySelector('[slot=\"header\"]');\n    this.hasAdditional = !!this.element.querySelector(\"[slot='additional']\");\n  }\n  /**\n   * Component event handling.\n   */\n\n\n  handleHostBlur(ev) {\n    /**\n     * When moving away from a choice, collapse the info bar to assist visually impared people on focusing\n     */\n    if (this.hasInfo && this.isInfoOpen && this.isKeyDown) {\n      // @ts-ignore\n      const isTargetContainedInHost = this.element.contains(ev === null || ev === void 0 ? void 0 : ev.relatedTarget) || false;\n\n      if (!isTargetContainedInHost) {\n        this.toggleInfo();\n      }\n    }\n  }\n\n  handleHostKeyDown() {\n    this.isKeyDown = true;\n  }\n\n  handleHostKeyUp(ev) {\n    this.isKeyDown = false;\n\n    if (isEscapeKey(ev) && this.isInfoOpen) {\n      this.toggleInfo();\n    }\n  }\n  /**\n   * Sets focus on the specified `duet-choice`. Use this method instead of the global\n   * `input.focus()`.\n   */\n\n\n  setFocus(options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.nativeInput.focus(options);\n    })();\n  }\n\n  getAriaDescribedby() {\n    if (this.accessibleDescribedBy) {\n      return this.accessibleDescribedBy;\n    }\n\n    if (this.collapsible || this.hasInfo) {\n      if (this.hasHeader) {\n        return this.headerId;\n      } else {\n        return this.expandId;\n      }\n    }\n\n    return null;\n  }\n\n  getClassNames() {\n    if (this.hasInfo && !this.collapsible) {\n      return {\n        \"duet-choice-card-info\": true,\n        \"duet-choice-card-info-expanded\": this.isInfoOpen,\n        \"duet-choice-card-collapsed\": !this.isInfoOpen,\n        \"duet-theme-turva\": this.theme === \"turva\"\n      };\n    }\n\n    if (!this.hasInfo && this.collapsible) {\n      return {\n        \"duet-choice-card-collapsible\": true,\n        \"duet-choice-card-collapsible-expanded\": this.checked,\n        \"duet-choice-card-collapsed\": !this.checked,\n        \"duet-choice-card-collapsible-disabled\": this.disabled || this.groupDisabled ? true : false,\n        \"duet-theme-turva\": this.theme === \"turva\"\n      };\n    }\n\n    return {\n      \"duet-choice-default-slot\": true\n    };\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    const identifier = this.identifier || this.choiceId;\n    return h(Host, {\n      class: {\n        horizontal: this.groupDirection === \"horizontal\" && !this.groupResponsive,\n        \"horizontal-responsive\": this.groupDirection === \"horizontal\" && this.groupResponsive,\n        \"duet-m-0\": this.margin === \"none\",\n        \"duet-expand\": this.expand,\n        \"duet-theme-turva\": this.theme === \"turva\"\n      }\n    }, h(\"div\", {\n      class: {\n        \"duet-choice-card-flextainer\": true,\n        \"duet-theme-turva\": this.theme === \"turva\"\n      }\n    }, h(\"div\", {\n      class: {\n        \"duet-choice-card\": true,\n        \"has-icon\": !!this.icon,\n        \"has-info\": this.hasInfo,\n        checked: this.checked,\n        info: this.isInfoOpen,\n        collapsible: this.collapsible,\n        \"duet-p-0\": this.padding === \"none\"\n      }\n    }, h(\"input\", {\n      class: \"duet-choice-input\",\n      type: this.type,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onChange: this.onChange,\n      disabled: this.disabled || this.groupDisabled,\n      required: this.required,\n      id: identifier,\n      name: this.name,\n      value: this.value,\n      checked: this.checked,\n      \"aria-controls\": this.accessibleControls,\n      \"aria-activedescendant\": this.accessibleActiveDescendant,\n      \"aria-owns\": this.accessibleOwns,\n      \"aria-describedby\": this.getAriaDescribedby(),\n      onKeyDown: this.handleKeyDown,\n      ref: input => this.nativeInput = input\n    }), h(\"label\", {\n      htmlFor: identifier,\n      class: {\n        \"duet-choice-label\": true,\n        \"no-hover\": this.isHovering\n      },\n      onClick: this.onClick\n    }, this.icon && h(\"div\", {\n      class: \"duet-choice-card-icon\"\n    }, h(\"duet-icon\", {\n      margin: \"none\",\n      size: \"small\",\n      name: this.icon,\n      color: \"currentColor\"\n    })), this.label, this.caption && h(\"div\", null, h(\"duet-spacer\", {\n      size: \"xx-small\"\n    }), h(\"duet-caption\", {\n      margin: \"none\",\n      selected: this.checked\n    }, this.caption)), this.hasAdditional && h(\"div\", null, h(\"duet-spacer\", {\n      size: \"xx-small\"\n    }), h(\"slot\", {\n      name: \"additional\"\n    })), h(\"div\", {\n      class: {\n        \"duet-checkmark-container\": true,\n        \"duet-checkmark-radio\": this.type === \"radio\"\n      }\n    }, this.checked && h(\"div\", {\n      class: \"duet-checkmark\"\n    })))), this.hasInfo && !this.collapsible && h(\"button\", {\n      ref: button => this.infoButtonEl = button,\n      id: this.infoButtonId,\n      class: {\n        \"duet-choice-info-toggle\": true,\n        \"duet-theme-turva\": this.theme === \"turva\"\n      },\n      onMouseEnter: this.onMouseEnter,\n      onMouseLeave: this.onMouseLeave,\n      onClick: this.toggleInfo,\n      disabled: this.disabled || this.groupDisabled,\n      \"aria-expanded\": this.isInfoOpen ? \"true\" : \"false\",\n      \"aria-label\": `${this.infoLabel} ${this.label}`,\n      \"aria-controls\": this.expandId,\n      \"aria-flowto\": this.expandId,\n      tabindex: this.type === \"radio\" && !this.checked ? \"-1\" : \"0\",\n      type: \"button\"\n    }, h(\"duet-visually-hidden\", {\n      \"aria-hidden\": !this.isBlurred ? \"true\" : \"false\"\n    }, this.accessibleLabelInfoButton), h(\"div\", {\n      class: \"duet-choice-info-icon\"\n    }, h(\"duet-icon\", {\n      icon: messagingInfo.svg,\n      margin: \"none\",\n      size: \"small\",\n      color: \"currentColor\"\n    })))), this.collapsible || this.hasInfo ? h(\"div\", {\n      class: this.getClassNames(),\n      id: this.expandId\n    }, h(\"span\", {\n      class: {\n        \"duet-choice-section-visible\": this.collapsible ? this.checked : this.isInfoOpen,\n        \"duet-choice-section-hidden\": this.collapsible ? !this.checked : !this.isInfoOpen\n      }\n    }, h(\"span\", {\n      id: this.headerId\n    }, h(\"slot\", {\n      name: \"header\"\n    })), this.hasInfo ? h(\"span\", null, h(\"span\", {\n      \"aria-relevant\": \"all\",\n      \"aria-atomic\": \"true\",\n      \"aria-live\": this.isInfoOpen ? \"polite\" : \"off\"\n    }, h(\"slot\", {\n      name: \"info\"\n    })), h(\"slot\", null)) : h(\"span\", null, h(\"slot\", null))), this.isInfoOpen && h(FocusGuard, {\n      moveFocusTo: this.infoButtonEl\n    })) : null);\n  }\n\n  get element() {\n    return getElement(this);\n  }\n\n};\nDuetChoice.style = duetChoiceCss;\nconst duetChoiceGroupCss = \"*.sc-duet-choice-group,*.sc-duet-choice-group::after,*.sc-duet-choice-group::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-choice-group-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block;width:100%}.horizontal.sc-duet-choice-group-h .duet-choice-group.sc-duet-choice-group{display:block}@media (min-width: 48em){.horizontal.sc-duet-choice-group-h .duet-choice-group.sc-duet-choice-group{display:flex;margin-bottom:0}}.horizontal.sc-duet-choice-group-h .duet-choice-group.duet-no-stacking.sc-duet-choice-group{display:flex}.duet-choice-group.sc-duet-choice-group{position:relative;width:100%;margin-bottom:-12px}\";\nlet DuetChoiceGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * Direction of the choice group.\n     */\n\n    this.direction = \"vertical\";\n    /**\n     * Controls the margin of the component.\n     */\n\n    this.margin = \"auto\";\n    /**\n     * Theme of the choice group.\n     */\n\n    this.theme = \"\";\n    /**\n     * Display choice group in error state along with an error message.\n     */\n\n    this.error = \"\";\n    /**\n     * Legend displayed for the choice buttons in this group.\n     */\n\n    this.label = \"Label\";\n    /**\n     * Visually hide the label, but still show it to screen readers.\n     */\n\n    this.labelHidden = false;\n    /**\n     * Additional caption to show inside the label of the choice group.\n     */\n\n    this.caption = undefined;\n    /**\n     * Tooltip to display next to the label of the choice group.\n     */\n\n    this.tooltip = undefined;\n    /**\n     * With direction setting you can force the tooltip to always open towards left\n     * or right instead of automatically determining the direction.\n     */\n\n    this.tooltipDirection = \"auto\";\n    /**\n     * Enable or disable the automatic responsive behaviour of the choice group\n     * component when horizontal setting is used. Setting this option to \"true\"\n     * makes sure that contents are stacked vertically on mobile.\n     */\n\n    this.responsive = false;\n    /**\n     * Component event handling.\n     */\n\n    this.onSelect = ev => {\n      if (ev.detail.component !== \"duet-choice\") {\n        return;\n      }\n\n      const selectedChoice = ev.target;\n\n      if (selectedChoice) {\n        this.value = selectedChoice.value;\n      } // Prevent events from bubbling up the DOM tree in case\n      // this group is a sub-group of another choice group.\n\n\n      ev.cancelBubble = true;\n    };\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  connectedCallback() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const el = _this2.element;\n\n      if (_this2.value === undefined) {\n        const choice = findCheckedOption(el, \"duet-choice\");\n\n        if (choice !== undefined) {\n          yield choice.componentOnReady();\n\n          if (_this2.value === undefined) {\n            _this2.value = choice.value;\n          }\n        }\n      }\n\n      _this2.mutationO = watchForOptions(el, \"duet-choice\", newOption => {\n        if (newOption !== undefined) {\n          newOption.componentOnReady().then(() => {\n            _this2.value = newOption.value;\n          });\n        } else {\n          _this2.updateChoices();\n        }\n      });\n\n      _this2.updateChoices();\n    })();\n  }\n\n  disconnectedCallback() {\n    if (this.mutationO) {\n      this.mutationO.disconnect();\n      this.mutationO = undefined;\n    }\n  }\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n  }\n  /**\n   * Local methods\n   */\n\n\n  updateChoices() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      /**\n       * Make sure we get all choices first so values are up to date prior\n       * to caching the choice group value\n       */\n      const choices = Array.from(_this3.element.querySelectorAll(\"duet-choice\"));\n      const {\n        value\n      } = _this3;\n      let hasChecked = false; // Walk the DOM in reverse order, since the last selected one wins\n\n      for (const choice of choices) {\n        choice.name = _this3.name;\n        choice.groupDisabled = _this3.disabled;\n        choice.groupDirection = _this3.direction;\n        choice.groupResponsive = _this3.responsive;\n\n        if (!hasChecked && choice.value === value) {\n          // Correct value for this choice, but this choice isn't checked yet\n          // and we haven't found a checked yet\n          hasChecked = true;\n          choice.checked = true;\n        } else {\n          // This choice doesn't have the correct value or the choice group has been already checked\n          choice.checked = false;\n        }\n      } // Reset value if\n\n\n      if (!hasChecked) {\n        _this3.value = undefined;\n      }\n    })();\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    return h(Host, {\n      onDuetChange: this.onSelect,\n      class: {\n        horizontal: this.direction === \"horizontal\"\n      }\n    }, h(\"duet-fieldset\", {\n      label: this.label,\n      labelHidden: this.labelHidden,\n      caption: this.caption,\n      error: this.error,\n      margin: this.margin,\n      theme: this.theme\n    }, this.tooltip && h(\"duet-tooltip\", {\n      slot: \"tooltip\",\n      direction: this.tooltipDirection,\n      accessibleInputLabel: this.label\n    }, this.tooltip), h(\"div\", {\n      class: {\n        \"duet-choice-group\": true,\n        \"duet-no-stacking\": !this.responsive\n      }\n    }, h(\"slot\", null))));\n  }\n\n  get element() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"value\": [\"updateChoices\"],\n      \"disabled\": [\"updateChoices\"],\n      \"name\": [\"updateChoices\"],\n      \"direction\": [\"updateChoices\"],\n      \"responsive\": [\"updateChoices\"]\n    };\n  }\n\n};\nDuetChoiceGroup.style = duetChoiceGroupCss;\nexport { DuetChoice as duet_choice, DuetChoiceGroup as duet_choice_group };","map":null,"metadata":{},"sourceType":"module"}