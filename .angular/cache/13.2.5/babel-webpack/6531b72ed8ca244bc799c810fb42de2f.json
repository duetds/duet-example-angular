{"ast":null,"code":"/*!\n * Built with Duet Design System\n */\nconst watchFor = (containerEl, tagName, onChange, changeHandler, options = {\n  childList: true,\n  subtree: true\n}) => {\n  let mutation;\n\n  if (typeof MutationObserver !== \"undefined\") {\n    mutation = new MutationObserver(mutationList => {\n      onChange(changeHandler(mutationList, tagName));\n    });\n    mutation.observe(containerEl, options);\n  }\n\n  return mutation;\n};\n\nconst watchForOptions = (containerEl, tagName, onChange) => {\n  return watchFor(containerEl, tagName, onChange, getSelectedOption);\n};\n\nconst watchForElement = (containerEl, tagName, onChange) => {\n  return watchFor(containerEl, tagName, onChange, getElementItem, {\n    childList: true,\n    subtree: true\n  });\n};\n\nconst getElementItem = mutationList => {\n  let addedNode = false;\n  let removedNode = false;\n  mutationList.forEach(mut => {\n    if (mut.addedNodes.length) {\n      addedNode = true;\n    }\n\n    if (mut.removedNodes.length) {\n      removedNode = true;\n    }\n  });\n  return {\n    addedNode,\n    removedNode,\n    mutationList\n  };\n};\n\nconst getSelectedOption = (mutationList, tagName) => {\n  let newOption;\n  mutationList.forEach(mut => {\n    // tslint:disable-next-line: prefer-for-of\n    for (let i = 0; i < mut.addedNodes.length; i++) {\n      newOption = findCheckedOption(mut.addedNodes[i], tagName) || newOption;\n    }\n  });\n  return newOption;\n};\n\nconst findCheckedOption = (el, tagName) => {\n  if (el.nodeType !== 1) {\n    return undefined;\n  }\n\n  const options = el.tagName === tagName.toUpperCase() ? [el] : Array.from(el.querySelectorAll(tagName));\n  return options.find(o => o.checked === true);\n};\n\nexport { watchForElement as a, findCheckedOption as f, watchForOptions as w };","map":null,"metadata":{},"sourceType":"module"}