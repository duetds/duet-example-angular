{"ast":null,"code":"/*!\n * Built with Duet Design System\n */\nimport { t as tokens } from './tokens.module-49cbf963.js';\nconst allowedThemes = [\"turva\"];\n\nfunction isDashCase(str) {\n  const dash = str.includes(\"-\");\n  const barredString = str.includes(\" \") || str.includes(\"_\");\n  const barredStartingString = str.charAt(0) === \"-\";\n  return dash && !barredString && !barredStartingString;\n}\n\nfunction capitalize(str = \"\") {\n  return `${str.charAt(0).toUpperCase()}${str.slice(1)}`;\n}\n\nfunction lowerCaseFirst(str = \"\") {\n  return `${str.charAt(0).toLowerCase()}${str.slice(1)}`;\n}\n\nfunction camelize(str = \"\") {\n  const arr = str.split(\"-\"); //loop through each element of the array and capitalize the first letter.'\n\n  arr.forEach((string, index) => {\n    arr[index] = capitalize(string);\n  });\n  return arr.join(\"\");\n}\n\nfunction getTheme(theme = \"\") {\n  if (allowedThemes.includes(theme.toLowerCase())) {\n    return theme.toLowerCase();\n  }\n\n  return \"\";\n}\n\nfunction hasColor(str = \"\") {\n  return str.indexOf(\"Color\") === 0 || str.indexOf(\"color\") === 0;\n}\n\nfunction addColor(str = \"\") {\n  if (str && !isDashCase(str) && !hasColor(str)) {\n    return `color${capitalize(str)}`;\n  }\n\n  return str;\n}\n\nfunction addTheme(str, theme) {\n  const hasTheme = getTheme(theme).length;\n\n  if (hasTheme && str.indexOf(theme) === -1) {\n    return `${str}${capitalize(theme)}`;\n  }\n\n  return str;\n}\n\nfunction getColorByName(name, theme = \"\") {\n  if (!name) {\n    return undefined;\n  }\n\n  const defaultColor = convertToColorName(name);\n  const themedColor = convertToColorName(name, theme); // lets just try to get the color first to save some cycles\n\n  let resolvedToken = tokens[themedColor];\n\n  if (!resolvedToken) {\n    resolvedToken = tokens[defaultColor];\n  }\n\n  return resolvedToken;\n}\n\nfunction convertToColorName(name = \"\", theme = \"\") {\n  let colorResolution = name;\n  const dash = isDashCase(name);\n\n  if (dash) {\n    colorResolution = camelize(colorResolution);\n  }\n\n  colorResolution = addColor(colorResolution);\n  colorResolution = addTheme(colorResolution, theme); // takes care of the case where colorPrimaryDark ends up with ColorPrimaryDark\n\n  colorResolution = lowerCaseFirst(colorResolution);\n  return colorResolution;\n}\n\nexport { getColorByName as g };","map":null,"metadata":{},"sourceType":"module"}