{"ast":null,"code":"import _asyncToGenerator from \"/Users/klaushougesen/_repos/consulting/lahi/github/duet-example-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Built with Duet Design System\n */\nimport { r as registerInstance, h, H as Host, g as getElement, c as createEvent } from './index-795979f3.js';\nimport { i as inheritGlobalTheme } from './themeable-component-572685dd.js';\nimport { g as getLocaleString, a as getLanguage } from './language-utils-344d894c.js';\nimport { c as createID } from './create-id-981107da.js';\nimport { d as isArrowLeftKey, b as isArrowUpKey, a as isArrowRightKey, c as isArrowDownKey } from './keyboard-utils-584cedd7.js';\nimport './string-utils-2f1793b8.js';\nconst duetScrollableCss = \"*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;-webkit-tap-highlight-color:transparent}:host{position:relative !important}:host .duet-scrollable-items{display:flex}:host .duet-scrollable-items .duet-scrollable-button{position:relative;flex:0 0 auto;flex-basis:40px;padding:10px;cursor:pointer}:host .duet-scrollable-items .duet-scrollable-button:active{transform:scale(0.8)}:host .duet-scrollable-items .duet-scrollable-button--left{left:-12px}:host .duet-scrollable-items .duet-scrollable-button--right{right:-12px}:host .duet-scrollable-items .duet-scrollable-button--occluded{display:none}:host .duet-scrollable-items .duet-scrollable-list{display:flex;flex-wrap:nowrap;gap:20px;padding-top:2px;overflow-x:auto;overflow-y:hidden;white-space:nowrap;scroll-snap-type:x mandatory;scroll-behavior:smooth;scroll-margin:0 20px;-ms-overflow-style:-ms-autohiding-scrollbar;-webkit-overflow-scrolling:touch;}:host .duet-scrollable-items .duet-scrollable-list::-webkit-scrollbar{display:none}::slotted(*){scroll-snap-align:center;margin-left:0;-webkit-transition:-webkit-transform 0.2s ease-in-out;transition:-webkit-transform 0.2s ease-in-out;transition:transform 0.2s ease-in-out;transition:transform 0.2s ease-in-out, -webkit-transform 0.2s ease-in-out}\";\nlet DuetScrollable = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * Private variables and constants index\n     */\n\n    this.currentIndex = 0;\n    this.tabListElement = undefined;\n    this.tabListClass = \"duet-scrollable-list\";\n    this.tablistAtStart = true;\n    this.isTabContentSmallerThanWrapper = false;\n    this.tablistAtEnd = false;\n    this.childrenData = {};\n    this.resizeObserver = new ResizeObserver(entries => {\n      var _a, _b, _c, _d; // otherwise, something is wrong, expecting 1 element only\n\n\n      if ((entries === null || entries === void 0 ? void 0 : entries.length) === 1) {\n        const currentWidth = (_b = (_a = entries[0]) === null || _a === void 0 ? void 0 : _a.target) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect().width;\n        const scrollWidth = (_d = (_c = entries[0]) === null || _c === void 0 ? void 0 : _c.target) === null || _d === void 0 ? void 0 : _d.scrollWidth; // in order to avoid state \"jumping\" on the boundary condition we add a few pixels to the comparison\n\n        this.isTabContentSmallerThanWrapper = scrollWidth > currentWidth + 5;\n      }\n    });\n    /**\n     * Theme of duet-tab-scrollable. When used this will override the color setting and\n     * use \"primary\" or \"primary-turva\" as the color depending on which theme\n     * is chosen.\n     */\n\n    this.theme = \"\";\n    /**\n     * Optional identifier to add to buttons in the tab group\n     */\n\n    this.identifier = \"\";\n    /**\n     * Selected element\n     */\n\n    this.selected = 0;\n  }\n\n  watchPropHandler(newValue) {\n    this.scrollToTab(newValue, \"center\");\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n    const slotted = this.host.children;\n    this.childrenData = {\n      hasChildren: slotted && slotted.length > 0,\n      numberOfChildren: slotted && slotted.length\n    };\n  }\n\n  componentDidLoad() {\n    this.resizeObserver.observe(this.tabListElement);\n  }\n\n  disconnectedCallback() {\n    this.resizeObserver.disconnect();\n  }\n  /**\n   * Private methods.\n   */\n\n\n  getLastVisibleElement() {\n    const clientWidth = this.tabListElement.clientWidth;\n    const xValues = Array.from(this.host.querySelectorAll(\"button\")).findIndex(element => element.getBoundingClientRect().x > clientWidth);\n    return xValues;\n  }\n\n  getFirstVisibleElement() {\n    const buttonCollection = this.host.querySelectorAll(\"button\"); // reverse the array because we want the first invisible element form the middle, not the first in the list\n\n    const arrayOfXValues = Array.from(buttonCollection).map(el => el.getBoundingClientRect().x - el.getBoundingClientRect().width);\n    const xValues = arrayOfXValues.findIndex(element => {\n      return element > 0;\n    });\n    return xValues;\n  }\n\n  updateScrollButtons(container = this.tabListElement) {\n    if (container.scrollLeft <= 0) {\n      this.tablistAtStart = true;\n    } else if (container.scrollLeft > 0) {\n      this.tablistAtStart = false;\n    }\n\n    if (container.clientWidth + container.scrollLeft + 10 >= container.scrollWidth) {\n      this.tablistAtEnd = true;\n    } else if (container.clientWidth + container.scrollLeft + 10 < container.scrollWidth) {\n      this.tablistAtEnd = false;\n    }\n  }\n\n  scrollToTab(index = this.currentIndex, inline) {\n    if (!this.childrenData.hasChildren) {\n      return;\n    }\n\n    if (index + 1 >= this.childrenData.numberOfChildren) {\n      index = this.childrenData.numberOfChildren - 1;\n    }\n\n    if (index < 0) {\n      index = 0;\n    }\n\n    const buttons = this.host.querySelectorAll(\"button\"); // store previous position\n\n    let prevPosition = buttons[0].getBoundingClientRect().x; // iterations to run\n\n    let ticksWhereScrollDidNotHappen = 5;\n\n    const getAnimationFrame = () => {\n      // if we get the same value enter the logic loop\n      if (buttons[0].getBoundingClientRect().x === prevPosition) {\n        ticksWhereScrollDidNotHappen--; // When iteration is not complete run the calculation again\n\n        if (ticksWhereScrollDidNotHappen !== 0) {\n          window.requestAnimationFrame(getAnimationFrame);\n          return;\n        }\n\n        this.updateScrollButtons();\n      } else {\n        window.requestAnimationFrame(getAnimationFrame);\n        prevPosition = buttons[0].getBoundingClientRect().x;\n      }\n    };\n\n    buttons[index].scrollIntoView({\n      behavior: \"smooth\",\n      inline\n    });\n    window.requestAnimationFrame(getAnimationFrame);\n  }\n\n  scrollLeft() {\n    this.tablistAtEnd = false;\n    const first = this.getFirstVisibleElement() - 1;\n    this.scrollToTab(first, \"center\");\n  }\n\n  scrollRight() {\n    this.tablistAtStart = false;\n    const last = this.getLastVisibleElement() + 1;\n    this.scrollToTab(last, \"center\");\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    return h(Host, {\n      class: {\n        \"duet-theme-turva\": this.theme === \"turva\",\n        \"duet-theme-default\": this.theme === \"default\"\n      }\n    }, h(\"div\", {\n      class: \"duet-scrollable-items\"\n    }, h(\"button\", {\n      part: `${this.identifier}-button-left`,\n      \"aria-hidden\": \"true\",\n      class: {\n        \"duet-scrollable-button\": true,\n        \"duet-scrollable-button--left\": true,\n        \"duet-scrollable-button--occluded\": !this.isTabContentSmallerThanWrapper\n      },\n      onClick: () => this.scrollLeft(),\n      disabled: this.tablistAtStart,\n      tabindex: \"-1\"\n    }, h(\"duet-icon\", {\n      name: \"action-arrow-left-small\",\n      size: \"small\",\n      margin: \"none\"\n    })), h(\"div\", {\n      class: this.tabListClass,\n      onScroll: () => this.updateScrollButtons(),\n      ref: element => this.tabListElement = element\n    }, h(\"slot\", null)), h(\"button\", {\n      part: `${this.identifier}-button-right`,\n      \"aria-hidden\": \"true\",\n      class: {\n        \"duet-scrollable-button\": true,\n        \"duet-scrollable-button--right\": true,\n        \"duet-scrollable-button--occluded\": !this.isTabContentSmallerThanWrapper\n      },\n      onClick: () => this.scrollRight(),\n      disabled: this.tablistAtEnd,\n      tabindex: \"-1\"\n    }, h(\"duet-icon\", {\n      name: \"action-arrow-right-small\",\n      size: \"small\",\n      margin: \"none\"\n    }))));\n  }\n\n  get host() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"selected\": [\"watchPropHandler\"]\n    };\n  }\n\n};\nDuetScrollable.style = duetScrollableCss;\nconst duetTabCss = \".sc-duet-tab-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block;width:100%}.duet-tab.sc-duet-tab{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:none;width:100%}.duet-tab.selected.sc-duet-tab{display:block}\";\nlet DuetTab = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * Defaults for AccessibleLabel\n     * @default null\n     */\n\n    this.accessibleDescriptionDefault = null;\n    /**\n     * String for AccessibleLabel\n     * @default null\n     */\n\n    this.accessibleDescription = this.accessibleDescriptionDefault ? getLocaleString(this.accessibleDescriptionDefault) : null;\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    {\n      return h(\"div\", {\n        role: \"tabpanel\",\n        class: {\n          \"duet-tab\": true,\n          selected: this.selected\n        },\n        \"aria-description\": this.accessibleDescription\n      }, h(\"slot\", null));\n    }\n  }\n\n};\nDuetTab.style = duetTabCss;\nconst duetTabGroupCss = \"*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;-webkit-tap-highlight-color:transparent;display:block;width:100%}.duet-tab-group-tabs{margin-bottom:28px !important;display:block;width:100%;max-width:100%;padding-top:2px;list-style:none}.duet-tab-group-tabs.duet-m-0{margin:0 !important}.duet-tab-group-tabs.duet-tab-group-collapses.duet-tab-group-hidden{display:none}@media (min-width: 36em){.duet-tab-group-tabs.duet-tab-group-collapses.duet-tab-group-hidden{display:block}}.duet-tab-variation-plain .duet-tab-group-tabs{border-bottom:1px solid #e1e3e6}.duet-theme-turva.duet-tab-variation-plain .duet-tab-group-tabs{border-bottom-color:#e4e4e6}@media (min-width: 36em){duet-select{display:none !important}}.duet-tab-button{-webkit-user-select:none;user-select:none;position:relative;z-index:100;display:block;width:100%;padding:20px;margin-top:-2px;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-size:1rem;font-weight:600;line-height:1.1;color:#00294d;text-align:left;text-decoration:none;cursor:pointer;background:white;border:2px solid #e1e3e6;border-radius:0;transition:150ms ease}.duet-tab-button.duet-p-0{padding:0 !important}.duet-tab-button.duet-m-0{margin:0 !important}.duet-theme-turva .duet-tab-button{font-family:\\\"turva-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";color:#171c3a;border-color:#e4e4e6}.duet-tab-button.duet-p-0{padding:0 !important}@media (min-width: 36em){.duet-tab-button{display:inline-block;width:auto;margin-left:-2px;border-right:2px solid #e1e3e6;border-radius:0}}.duet-tab-button:hover{z-index:200;border-color:#909599}.duet-theme-turva .duet-tab-button:hover{border-color:#747475}.duet-tab-button:active{opacity:0.75;transition:none}.duet-tab-button.selected{z-index:201;color:white;background:#00294d;border-color:#00294d;outline:0;box-shadow:none !important}.duet-theme-turva .duet-tab-button.selected{color:white;background-color:#171c3a;border-color:#171c3a}.duet-tab-button:focus{z-index:200;outline:0}:host(.user-is-tabbing) .duet-tab-button:focus{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3 !important}:host(.user-is-tabbing) .duet-theme-turva .duet-tab-button:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a !important}.duet-tab-button:first-child{border-top-left-radius:4px;border-top-right-radius:4px}@media (min-width: 36em){.duet-tab-button:first-child{border-top-right-radius:0;border-bottom-left-radius:4px}}.duet-tab-button:last-child{border-bottom-right-radius:4px;border-bottom-left-radius:4px}@media (min-width: 36em){.duet-tab-button:last-child{border-radius:0;border-top-right-radius:4px;border-bottom-right-radius:4px}}.duet-tab-variation-plain .duet-tab-button{display:inline-block;width:auto;padding-right:0;padding-left:0;border:0;border-radius:0;transition:none}.duet-tab-variation-plain .duet-tab-button+.duet-tab-button{margin-left:36px}.duet-tab-variation-plain .duet-tab-button.selected{color:#0077b3;background:white;border-bottom:3px solid #0077b3}.duet-theme-turva.duet-tab-variation-plain .duet-tab-button.selected{color:#c60c30;border-bottom-color:#c60c30}.duet-tab-group-content{position:relative;width:100%;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-size:1rem;font-weight:400;line-height:1.5;color:#00294d;text-align:left}.duet-theme-turva .duet-tab-group-content{font-family:\\\"turva-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";color:#171c3a}\";\nlet DuetTabGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.duetChange = createEvent(this, \"duetChange\", 3);\n    this.duetTabChange = createEvent(this, \"duetTabChange\", 7);\n    this.id = createID(\"DuetTabGroup\");\n    /**\n     * State() variables\n     * Inlined decorator, alphabetical order.\n     */\n\n    this.tabs = [];\n    this.selected = 0;\n    /**\n     * Theme of the component.\n     */\n\n    this.theme = \"\";\n    /**\n     * Controls whether the tab-group should scroll (by inflection this will disable collapsing to select box on small screens),\n     * if this is a number instead of true it will be used as \"amount of items to scroll\"\n     */\n\n    this.scrolls = false;\n    /**\n     * Whether the tab-group collapses to a select dropwdown in minor breakpoints\n     */\n\n    this.collapses = true;\n    /**\n     * Style variation of the tab group.\n     */\n\n    this.variation = \"default\";\n    /**\n     * The currently active language. This setting changes the accessible labels to match the\n     * chosen language.\n     * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing\n     * @default \"fi\"\n     */\n\n    this.language = getLanguage();\n    /**\n     * Defaults for Label\n     * @default {fi: \"Valitse\", en: \"Choose\", sv: \"Välja\"}\n     */\n\n    this.labelDefaults = {\n      fi: \"Valitse\",\n      en: \"Choose\",\n      sv: \"Välj\"\n    };\n    /**\n     * Label for the select element which gets shown on mobile.\n     * @default {fi: \"Valitse\", en: \"Choose\", sv: \"Välja\"}\n     */\n\n    this.label = getLocaleString(this.labelDefaults, this.language);\n    /**\n     * Determines whether the label for the select element shown on mobile is visually hidden.\n     */\n\n    this.labelHidden = true;\n    /**\n     * Optional identifier to add to buttons in the tab group\n     */\n\n    this.identifier = this.id;\n    /**\n     * Controls the margin of the component.\n     */\n\n    this.margin = \"auto\";\n    /**\n     * Controls the padding of the component.\n     */\n\n    this.padding = \"auto\";\n    /**\n     * Component event handling.\n     */\n\n    this.handleKeyDown = ev => {\n      let button;\n\n      if (isArrowLeftKey(ev) || isArrowUpKey(ev)) {\n        button = ev.target.previousElementSibling;\n      } else if (isArrowRightKey(ev) || isArrowDownKey(ev)) {\n        button = ev.target.nextElementSibling;\n      }\n\n      if (button) {\n        ev.preventDefault();\n        button.click();\n        button.focus();\n      }\n    };\n\n    this.renderTab = () => {\n      const renderedTabs = this.tabs.map((element, index) => {\n        return h(\"button\", {\n          role: \"tab\",\n          id: this.getButtonId(index),\n          \"aria-controls\": this.getTabId(index),\n          \"aria-selected\": element.selected ? \"true\" : \"false\",\n          \"aria-description\": this.getAccessibleDescription(index),\n          part: `${this.identifier}-button`,\n          type: \"button\",\n          class: {\n            \"duet-p-0\": this.padding === \"none\",\n            \"duet-tab-button\": true,\n            selected: element.selected\n          },\n          onClick: () => this.openTab(index),\n          onKeyDown: ev => this.handleKeyDown(ev)\n        }, element.label);\n      });\n\n      if (this.scrolls) {\n        return h(\"duet-scrollable\", {\n          selected: this.selected,\n          identifier: this.identifier\n        }, renderedTabs);\n      }\n\n      return renderedTabs;\n    };\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  connectedCallback() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (typeof MutationObserver !== \"undefined\") {\n        _this.mutationO = new MutationObserver(() => {\n          _this.updateTabs();\n        });\n\n        _this.mutationO.observe(_this.element, {\n          attributes: true,\n          attributeFilter: [\"label\"],\n          childList: true,\n          characterData: true,\n          subtree: true\n        });\n      }\n\n      yield _this.updateTabs();\n    })();\n  }\n\n  disconnectedCallback() {\n    if (this.mutationO) {\n      this.mutationO.disconnect();\n      this.mutationO = undefined;\n    }\n  }\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n  }\n  /**\n   * This method allows you to open any of the tabs by calling the method and\n   * passing the index of the tab. Please note that index starts from zero.\n   */\n\n\n  openTab(tabIndex) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (tabIndex >= _this2.tabs.length) {\n        throw new Error(`[duet-tabs] Index ${tabIndex} is out of bounds of tabs length`);\n      }\n\n      _this2.selected = tabIndex;\n\n      _this2.tabs.forEach((tab, i) => {\n        tab.selected = i === tabIndex;\n      });\n\n      const event = {\n        value: tabIndex,\n        component: \"duet-tab-group\"\n      };\n\n      _this2.duetChange.emit(event);\n\n      _this2.duetTabChange.emit(event);\n    })();\n  }\n  /**\n   * This method used to refresh the contents of the tab group\n   * but is now deprecated as this is done automatically.\n   * @deprecated\n   */\n\n\n  refresh() {\n    return _asyncToGenerator(function* () {\n      console.log(\"[duet-tabs] Refresh method is deprecated and will be removed in the future version.\");\n    })();\n  }\n  /**\n   * Local methods.\n   */\n\n\n  getTabs() {\n    const allTabs = Array.from(this.element.querySelectorAll(\"duet-tab\"));\n    const localTabs = allTabs.filter(tab => tab.closest(\"duet-tab-group\") === this.element);\n\n    if (localTabs.length === 0) {\n      throw new Error(\"[duet-tabs] Must have at least one tab\");\n    } // filter out any nested tabs\n\n\n    return localTabs;\n  }\n\n  getButtonId(index) {\n    return `${this.id}-button-${index}`;\n  }\n\n  getTabId(index) {\n    return `${this.id}-tab-${index}`;\n  }\n\n  getAccessibleDescription(index) {\n    const description = this.tabs[index].getAttribute(\"accessible-description\") || null;\n    return description;\n  }\n\n  updateTabs() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.tabs = _this3.getTabs();\n\n      _this3.tabs.forEach((tab, index) => {\n        tab.id = _this3.getTabId(index);\n        tab.setAttribute(\"aria-labelledby\", _this3.getButtonId(index));\n\n        if (tab.selected) {\n          _this3.selected = index;\n        }\n      });\n\n      return;\n    })();\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    return h(\"div\", {\n      class: {\n        \"duet-tab-group\": true,\n        \"duet-theme-turva\": this.theme === \"turva\",\n        [`duet-tab-variation-${this.variation}`]: true,\n        \"duet-tab-group-scrolls\": this.scrolls,\n        \"duet-tab-group-collapses\": this.collapses\n      }\n    }, this.tabs.length > 3 && this.collapses && h(\"duet-select\", {\n      value: this.selected.toString(),\n      expand: true,\n      label: this.label,\n      labelHidden: this.labelHidden,\n      theme: this.theme,\n      onDuetChange: event => this.openTab(Number(event.detail.value)),\n      items: this.tabs.map((tab, index) => {\n        return {\n          label: tab.label,\n          value: index.toString()\n        };\n      })\n    }), h(\"div\", {\n      role: \"tablist\",\n      class: {\n        \"duet-m-0\": this.margin === \"none\",\n        \"duet-tab-group-tabs\": true,\n        \"duet-tab-group-hidden\": this.tabs.length > 3,\n        \"duet-tab-group-collapses\": this.collapses\n      }\n    }, this.renderTab()), h(\"div\", {\n      class: {\n        \"duet-tab-group-content\": true,\n        \"duet-m-0\": this.margin === \"none\"\n      }\n    }, h(\"slot\", null)));\n  }\n\n  get element() {\n    return getElement(this);\n  }\n\n};\nDuetTabGroup.style = duetTabGroupCss;\nexport { DuetScrollable as duet_scrollable, DuetTab as duet_tab, DuetTabGroup as duet_tab_group };","map":null,"metadata":{},"sourceType":"module"}