{"ast":null,"code":"import _asyncToGenerator from \"/Users/klaushougesen/_repos/consulting/lahi/github/duet-example-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Built with Duet Design System\n */\nimport { r as registerInstance, h, g as getElement } from './index-795979f3.js';\nimport { a as getLanguage, g as getLocaleString } from './language-utils-344d894c.js';\nimport { i as inheritGlobalTheme } from './themeable-component-572685dd.js';\nimport { a as actionArrowDownSmall } from './action-arrow-down-small-82273dc8.js';\nimport './string-utils-2f1793b8.js';\nconst duetNotificationCss = \"*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block;width:100%}.duet-notification{display:block;padding:16px;color:#00294d;cursor:pointer;border-bottom:1px solid #e1e3e6;transition:300ms ease}:host(:last-of-type) .duet-notification{border-bottom:0}.duet-notification.duet-theme-turva{color:#171c3a;border-bottom-color:#e4e4e6}.duet-notification.duet-notification-highlight{font-weight:600;background:#f3f9fc}.duet-notification.duet-notification-highlight.duet-theme-turva{background:#fcf3f4}@media (min-width: 62em){.duet-notification:hover{background:#f3f9fc}.duet-notification:hover.duet-theme-turva{background:#fcf3f4}}.duet-notification a{text-decoration:none}.duet-notification a:focus{outline:0}:host(.user-is-tabbing) .duet-notification:focus-within{z-index:1;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}:host(.user-is-tabbing) .duet-notification:focus-within.duet-theme-turva{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}.duet-notification-container{position:relative;display:flex}.duet-notification-badge-container{position:relative;width:16px}.duet-notification-badge{position:absolute;top:6px;left:-2px;width:8px;height:8px;background:#0077b3;border-radius:50%}.duet-theme-turva .duet-notification-badge{background:#c60c30}.duet-notification-content{flex:1}.duet-notification-date{position:absolute;top:2px;right:0;width:96px;font-size:0.75rem;font-weight:600;line-height:1.25;color:#657787;text-align:right;text-transform:uppercase}@media (max-width: 35.9375em){.duet-notification-date{width:auto}}.duet-theme-turva .duet-notification-date{color:#444445}::slotted(duet-heading){padding-right:80px !important}::slotted(duet-paragraph){margin-bottom:2px !important}\";\nlet DuetNotification = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The currently active language.\n     * Used for announcing unread notifications to screen readers.\n     * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing\n     * @default \"fi\"\n     */\n\n    this.language = getLanguage();\n    /**\n     * Property to change accessibleLabelUnread defaults on the component.\n     * normally you would handle these strings on an application level and override @accessibleLabelUnread when needed\n     */\n\n    this.accessibleLabelUnreadDefaults = {\n      en: \"Unread\",\n      fi: \"Lukematon\",\n      sv: \"Oläst\"\n    };\n    /**\n     * Adds accessible label for tooltip that is shown over unread counter\n     * @default { en: \"Unread\", fi: \"Lukematon\", sv: \"Oläst\" }\n     */\n\n    this.accessibleLabelUnread = getLocaleString(this.accessibleLabelUnreadDefaults, this.language);\n    /**\n     * The url to open on notification click.\n     */\n\n    this.url = \"#\";\n    /**\n     * The date of the notification.\n     */\n\n    this.date = \"\";\n    /**\n     * Should the notification be visually highlighted?\n     */\n\n    this.highlight = false;\n    /**\n     * Should the link open in a new window?\n     */\n\n    this.external = false;\n    /**\n     * Theme of the notification.\n     */\n\n    this.theme = \"\";\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n  }\n  /**\n   * Move focus to the notification's link element.\n   * Use this method instead of the native `focus()` method.\n   * @param options\n   */\n\n\n  setFocus(options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.linkElement.focus(options);\n    })();\n  }\n\n  render() {\n    return h(\"div\", {\n      role: \"listitem\",\n      class: {\n        \"duet-notification\": true,\n        \"duet-notification-highlight\": this.highlight,\n        \"duet-theme-turva\": this.theme === \"turva\"\n      }\n    }, h(\"a\", {\n      ref: element => this.linkElement = element,\n      href: this.url,\n      target: this.external ? \"_blank\" : \"_self\"\n    }, h(\"div\", {\n      class: \"duet-notification-container\"\n    }, h(\"div\", {\n      class: \"duet-notification-badge-container\"\n    }, this.highlight && h(\"div\", {\n      class: \"duet-notification-badge\"\n    }, h(\"duet-visually-hidden\", null, this.accessibleLabelUnread, \":\"))), h(\"div\", {\n      class: \"duet-notification-content\"\n    }, h(\"slot\", null)), h(\"div\", {\n      class: \"duet-notification-date\"\n    }, this.date))));\n  }\n\n  get element() {\n    return getElement(this);\n  }\n\n};\nDuetNotification.style = duetNotificationCss;\nconst duetNotificationDrawerCss = \"*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block;width:100%}.duet-drawer{position:relative}@media (min-width: 62em){.duet-drawer{display:inline-block}}.duet-drawer-toggle{position:relative;display:flex;align-items:center;width:100%;height:48px;padding:0 20px;overflow:hidden;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-size:1rem;font-weight:400;font-variant-numeric:tabular-nums;line-height:48px;color:#00294d;text-align:left;text-decoration:none;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;background-color:white;border-bottom:1px solid #e1e3e6;border-radius:0;-webkit-appearance:none;appearance:none}@media (min-width: 62em){.duet-drawer-toggle{z-index:200;width:auto;max-width:200px;padding:0 30px 0 12px;overflow:hidden;font-size:0.875rem;line-height:4rem;border:0;border-radius:4px;transition:border 300ms ease}}.duet-theme-turva .duet-drawer-toggle{font-family:\\\"turva-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";color:#171c3a;background-color:white;border-color:#e4e4e6}.duet-drawer-toggle:active{opacity:0.75}.duet-drawer-toggle:focus{outline:0}:host(.user-is-tabbing) .duet-drawer-toggle:focus{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}:host(.user-is-tabbing) .duet-theme-turva .duet-drawer-toggle:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}.duet-drawer-toggle:hover{color:#004d80}.duet-theme-turva .duet-drawer-toggle:hover{color:#444445}.duet-drawer-toggle::after{display:none !important}@media (min-width: 62em){.duet-drawer-toggle::after{position:absolute;top:auto;bottom:0;left:0;display:block !important;width:100%;height:3px;content:\\\"\\\";background:#0077b3;transition:300ms ease;transform:translateY(3px)}.duet-theme-turva .duet-drawer-toggle::after{background:#c60c30}}.duet-drawer-toggle[aria-expanded=true],.duet-drawer-toggle[aria-expanded=true]:hover{color:#004d80;border-bottom:1px solid #f5f8fa;border-radius:0}.duet-theme-turva .duet-drawer-toggle[aria-expanded=true],.duet-theme-turva .duet-drawer-toggle[aria-expanded=true]:hover{color:#444445;border-color:#f5f5f7}@media (min-width: 62em){.duet-drawer-toggle[aria-expanded=true],.duet-drawer-toggle[aria-expanded=true]:hover{border:0}.duet-drawer-toggle[aria-expanded=true]::after,.duet-drawer-toggle[aria-expanded=true]:hover::after{left:0;width:100%;transform:translateY(0)}}.duet-drawer-icon{position:relative;display:inline-flex;min-width:12px;margin-right:12px;font-size:0;line-height:normal;vertical-align:baseline}@media (min-width: 62em){.duet-drawer-icon{margin-right:8px}}.duet-drawer-label{line-height:1}.duet-drawer-caret{position:absolute;top:50%;right:20px;display:flex;width:10px;height:10px;margin-left:8px;line-height:normal;pointer-events:none;transition:300ms ease;transform:translateY(-50%);transform-origin:50% 50%}@media (min-width: 62em){.duet-drawer-caret{right:16px;width:7px;height:7px}}.duet-drawer-caret duet-icon{width:10px}.duet-drawer-toggle[aria-expanded=true] .duet-drawer-caret{transform:translateY(-50%) rotate(180deg)}.duet-drawer-badge{position:absolute;top:0;right:0;display:inline-block;width:6px;height:6px;background:#f7b228;border-radius:50%;box-shadow:0 0 0 1px #c18b1f}.duet-theme-turva .duet-drawer-badge{background:#faa40f}.duet-drawer-content{display:none;background-color:white;border-bottom:1px solid #e1e3e6}.duet-drawer-content:focus{outline:0}.duet-theme-turva .duet-drawer-content{background-color:white;border-color:#e1e3e6}@media (min-width: 62em){.duet-drawer-content{position:absolute;top:100%;z-index:600;display:block;width:450px;max-height:420px;padding-left:0;overflow-y:auto;visibility:hidden;background-color:white;border:1px solid #e1e3e6;border-radius:4px;border-top-left-radius:0;border-top-right-radius:0;box-shadow:0 4px 10px 0 rgba(0, 41, 77, 0.15);opacity:0;transition:300ms ease;transform:scale(0.95) translateZ(0) translateY(-10px);transform-origin:50% 0;scrollbar-width:none}.duet-drawer-content::-webkit-scrollbar{display:none}.duet-theme-turva .duet-drawer-content{background-color:white}.duet-drawer-content.duet-drawer-left{right:0}.duet-drawer-content.duet-drawer-right{left:0}}.duet-drawer-content.duet-drawer-open{display:block}@media (min-width: 62em){.duet-drawer-content.duet-drawer-open{visibility:visible;opacity:1;transform:scale(1) translateZ(0) translateY(0)}}\";\nconst ESC_KEY = 27;\nlet DuetNotificationDrawer = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * State() variables\n     * Inlined decorator, alphabetical order.\n     */\n\n    this.isOpen = false;\n    /**\n     * Icon to display to the left of the drawer button.\n     */\n\n    this.icon = \"\";\n    /**\n     * Label for the drawer button.\n     */\n\n    this.label = \"Label\";\n    /**\n     * The currently active language.\n     * Used to determine the message displayed when there are no notifications.\n     */\n\n    this.language = getLanguage();\n    /**\n     * Defaults for accessibleLabelNotifications\n     * @default {en: \"No notifications\", fi: \"Ei ilmoituksia\", sv: \"Inga notifikationer\"}\n     */\n\n    this.accessibleLabelNotificationsDefaults = {\n      en: \"No notifications\",\n      fi: \"Ei ilmoituksia\",\n      sv: \"Inga notifikationer\"\n    };\n    /**\n     * Adds accessible label for tooltip that is shown for notifications\n     * @default {en: \"No notifications\", fi: \"Ei ilmoituksia\", sv: \"Inga notifikationer\"}\n     */\n\n    this.accessibleLabelNotifications = getLocaleString(this.accessibleLabelNotificationsDefaults);\n    /**\n     * Show a badge that indicates something has changed.\n     */\n\n    this.badge = false;\n    /**\n     * Theme of the notification drawer.\n     */\n\n    this.theme = \"\";\n    /**\n     * Which direction should the drawer open in?\n     */\n\n    this.direction = \"left\";\n    /**\n     * Component event handling.\n     */\n\n    this.handleKeyDown = ev => {\n      if (this.isOpen && ev.keyCode === ESC_KEY) {\n        this.close();\n      }\n    };\n\n    this.toggleMenu = e => {\n      // this is needed to prevent the main menu closing on mobile\n      e.stopPropagation();\n      this.isOpen ? this.close() : this.open();\n    };\n\n    this.updateNotificationState = () => {\n      this.hasNotifications = this.element.children.length > 0;\n    };\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n    this.updateNotificationState();\n  }\n\n  connectedCallback() {\n    this.observer = new MutationObserver(this.updateNotificationState);\n    this.observer.observe(this.element, {\n      childList: true\n    });\n  }\n\n  disconnectedCallback() {\n    this.observer.disconnect();\n    this.observer = null;\n  }\n\n  handleClickFocusOutside(e) {\n    const target = e.target;\n\n    if (this.isOpen && !this.element.contains(target)) {\n      this.close(false);\n    }\n  }\n  /**\n   * Move focus to the menu's button. Use instead of the native `focus()` method\n   * @param options\n   */\n\n\n  setFocus(options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.drawerButtonEl.focus(options);\n    })();\n  }\n  /**\n   * Open the menu\n   */\n\n\n  open() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const header = _this3.element.closest(\"duet-header\");\n\n      if (header) {\n        header.closeMenus();\n      }\n\n      _this3.isOpen = true;\n      _this3.drawerContentEl.scrollTop = 0;\n    })();\n  }\n  /**\n   * Close the menu\n   * @param moveFocusToButton should focus be moved to the menu's button on close?\n   */\n\n\n  close(moveFocusToButton = true) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.isOpen = false;\n\n      if (moveFocusToButton) {\n        _this4.setFocus({\n          preventScroll: true\n        });\n      }\n    })();\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    return h(\"div\", {\n      class: {\n        \"duet-drawer\": true,\n        \"duet-theme-turva\": this.theme === \"turva\"\n      },\n      onKeyDown: this.handleKeyDown\n    }, h(\"button\", {\n      ref: el => this.drawerButtonEl = el,\n      type: \"button\",\n      class: \"duet-drawer-toggle\",\n      id: \"duet-drawer-toggle\",\n      \"aria-controls\": \"duet-drawer-content\",\n      \"aria-expanded\": this.isOpen ? \"true\" : \"false\",\n      onClick: this.toggleMenu\n    }, this.icon && h(\"div\", {\n      class: \"duet-drawer-icon\"\n    }, h(\"duet-icon\", {\n      margin: \"none\",\n      size: \"x-small\",\n      name: this.icon,\n      color: \"currentColor\"\n    }), this.badge && h(\"div\", {\n      class: \"duet-drawer-badge\"\n    })), h(\"span\", {\n      class: \"duet-drawer-label\"\n    }, this.label), h(\"div\", {\n      class: \"duet-drawer-caret\"\n    }, h(\"duet-icon\", {\n      margin: \"none\",\n      size: \"auto\",\n      icon: actionArrowDownSmall.svg,\n      color: \"currentColor\"\n    }))), h(\"div\", {\n      id: \"duet-drawer-content\",\n      class: {\n        \"duet-drawer-content\": true,\n        \"duet-drawer-right\": this.direction === \"right\",\n        \"duet-drawer-left\": this.direction === \"left\",\n        \"duet-drawer-open\": this.isOpen\n      },\n      ref: element => this.drawerContentEl = element\n    }, this.hasNotifications ? h(\"div\", {\n      role: \"list\"\n    }, h(\"slot\", null)) : h(\"duet-empty-state\", {\n      size: \"small\"\n    }, h(\"duet-paragraph\", {\n      size: \"small\",\n      margin: \"none\"\n    }, this.accessibleLabelNotifications))));\n  }\n\n  get element() {\n    return getElement(this);\n  }\n\n};\nDuetNotificationDrawer.style = duetNotificationDrawerCss;\nexport { DuetNotification as duet_notification, DuetNotificationDrawer as duet_notification_drawer };","map":null,"metadata":{},"sourceType":"module"}