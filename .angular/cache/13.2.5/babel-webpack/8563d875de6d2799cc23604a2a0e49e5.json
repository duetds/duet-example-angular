{"ast":null,"code":"/*!\n * Built with Duet Design System\n */\nimport { r as registerInstance, h, F as Fragment, g as getElement } from './index-795979f3.js';\nimport { s as sizeHeader } from './tokens.module-49cbf963.js';\nimport { c as createID } from './create-id-981107da.js';\nimport { a as getLanguage, g as getLocaleString } from './language-utils-344d894c.js';\nimport { i as inheritGlobalTheme } from './themeable-component-572685dd.js';\nimport './string-utils-2f1793b8.js';\nconst duetTrayCss = \"*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block;width:100%}.duet-tray{position:fixed;top:4rem;right:0;left:0;z-index:399;display:flex;flex-direction:column;max-height:calc(100% - 8rem);padding:16px 20px 16px 24px;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-size:1rem;font-weight:400;line-height:1.5;color:#00294d;visibility:hidden;background:#f3f9fc;border-bottom:1px solid #e1e3e6;box-shadow:0 2px 6px 0 rgba(0, 41, 77, 0.07);opacity:0;transition:opacity 600ms ease, visibility 600ms ease, transform 600ms ease;transform:translateY(-4rem)}@media (min-width: 62em){.duet-tray{padding:16px 36px}}@media (min-width: 106.25em){.duet-tray{padding:16px 52px 16px 60px}}.duet-tray:focus{outline:0}:host(.user-is-tabbing) .duet-tray:focus{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}:host(.user-is-tabbing) .duet-tray.duet-theme-turva:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}.duet-tray.duet-theme-turva{font-family:\\\"turva-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";color:#171c3a;background:#f5f5f7;border-color:#e4e4e6}.duet-tray.duet-tray-is-active{visibility:visible;opacity:1;transform:translateY(0)}.duet-tray.duet-tray-is-hidden{visibility:hidden;opacity:0;transform:translateY(-4rem)}@media (min-width: 62em){.duet-tray.duet-tray-is-responsive{display:none !important}}.duet-tray.duet-tray-is-expandable{padding-right:66px}@media (min-width: 62em){.duet-tray.duet-tray-is-expandable{padding-right:78px}}@media (min-width: 106.25em){.duet-tray.duet-tray-is-expandable{padding-right:94px}}.duet-tray-expandable{position:relative;z-index:100;width:calc(100% + 46px);max-height:0;overflow-y:auto;visibility:hidden;opacity:0;transition:opacity 600ms ease, visibility 600ms ease, max-height 600ms ease;scrollbar-width:none}.duet-tray-expandable::-webkit-scrollbar{display:none}.duet-tray-expandable.active{max-height:500px;visibility:visible;opacity:1}.duet-tray-expandable-content{width:100%;margin-top:16px;border-top:1px solid #e1e3e6}.duet-theme-turva .duet-tray-expandable-content{border-color:#e4e4e6}.duet-tray-button{-webkit-user-select:none;user-select:none;padding:20px !important;position:absolute;top:-2px;right:0;z-index:200;color:#00294d;text-align:center;cursor:pointer;border-radius:4px;transition:transform 300ms ease;-webkit-tap-highlight-color:transparent}@media (min-width: 62em){.duet-tray-button{margin-right:16px}}@media (min-width: 106.25em){.duet-tray-button{margin-right:36px}}.duet-theme-turva .duet-tray-button{color:#171c3a}.duet-tray-button.duet-tray-is-expanded{transform:rotate(-180deg)}.duet-tray-button:focus{outline:0}:host(.user-is-tabbing) .duet-tray-button:focus{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}:host(.user-is-tabbing) .duet-theme-turva .duet-tray-button:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}.duet-tray-button:active{box-shadow:none;opacity:0.75}\";\nconst topOffset = parseFloat(sizeHeader) * 2 * 16; // convert rem -> px\n\nlet DuetTray = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * Own Properties.\n     */\n\n    this.isTicking = false;\n    this.expandableId = createID(\"DuetTray\");\n    this.expanded = false;\n    /**\n     * The state of the info panel.\n     */\n\n    this.hiddenState = false;\n    /**\n     * The currently active language. This setting changes the accessible labels to match the\n     * chosen language.\n     * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing\n     * @default \"fi\"\n     */\n\n    this.language = getLanguage();\n    /**\n     * Defaults for accessibleCloseLabel\n     * @default {fi: \"Sulje\", en: \"Close\", sv: \"Stänga\"}\n     */\n\n    this.accessibleCloseLabelDefaults = {\n      fi: \"Sulje\",\n      en: \"Close\",\n      sv: \"Stäng\"\n    };\n    /**\n     * Accessible label that is shown for screen reader users in the expandable\n     * close toggle. Not visible for normal users.\n     * @default {fi: \"Sulje\", en: \"Close\", sv: \"Stänga\"}\n     */\n\n    this.accessibleCloseLabel = getLocaleString(this.accessibleCloseLabelDefaults, this.language);\n    /**\n     * Defaults for accessibleOpenLabel\n     * @default {fi: \"Avaa\", en: \"Open\", sv: \"Öppen\"}\n     */\n\n    this.accessibleOpenLabelDefaults = {\n      fi: \"Avaa\",\n      en: \"Open\",\n      sv: \"Öppna\"\n    };\n    /**\n     * Accessible label that is shown for screen reader users in the expandable\n     * open toggle. Not visible for normal users.\n     * @default {fi: \"Avaa\", en: \"Open\", sv: \"Öppen\"}\n     */\n\n    this.accessibleOpenLabel = getLocaleString(this.accessibleOpenLabelDefaults, this.language);\n    /**\n     * Theme of the info panel.\n     */\n\n    this.theme = \"\";\n    /**\n     * Toggle whether the info panel is visible or not. You can use this\n     * property e.g. when pricing information is revealed to the user.\n     */\n\n    this.active = false;\n    /**\n     * Hide the info panel when user scrolls back to the top of the viewport.\n     */\n\n    this.autoHide = true;\n    /**\n     * Enable or disable the automatic responsive behaviour which\n     * makes the info panel hide on larger viewports. Settings this to\n     * \"false\" means that the header panel is visible on all device sizes.\n     */\n\n    this.responsive = true;\n    /**\n     * Local methods.\n     */\n\n    this.animationLoop = () => {\n      this.hiddenState = window.pageYOffset < topOffset;\n      this.isTicking = false;\n    };\n\n    this.toggleExpandable = ev => {\n      ev.preventDefault();\n      this.expanded = !this.expanded;\n    };\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n    this.hasAdditionalContent = !!this.element.querySelector(\"[slot='additional']\");\n  }\n  /**\n   * Component event handling.\n   */\n\n\n  getFrame() {\n    if (!this.isTicking && this.autoHide && this.active) {\n      requestAnimationFrame(this.animationLoop);\n      this.isTicking = true;\n    }\n  }\n\n  handleBodyClick(e) {\n    if (this.expanded) {\n      this.expanded = this.element.contains(e.target);\n    }\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    return h(\"div\", {\n      class: {\n        \"duet-tray\": true,\n        \"duet-tray-is-active\": this.active,\n        \"duet-tray-is-hidden\": this.hiddenState,\n        \"duet-tray-is-responsive\": this.responsive,\n        \"duet-theme-turva\": this.theme === \"turva\",\n        \"duet-tray-is-expandable\": this.hasAdditionalContent\n      }\n    }, h(\"div\", {\n      class: \"duet-tray-default-content\",\n      role: \"status\"\n    }, h(\"slot\", null)), this.hasAdditionalContent && h(Fragment, null, h(\"button\", {\n      \"aria-expanded\": this.expanded ? \"true\" : \"false\",\n      \"aria-controls\": this.expandableId,\n      onClick: ev => this.toggleExpandable(ev),\n      class: {\n        \"duet-tray-button\": true,\n        \"duet-tray-is-expanded\": this.expanded\n      }\n    }, h(\"duet-icon\", {\n      name: \"action-arrow-down\",\n      size: \"small\",\n      color: \"currentColor\",\n      margin: \"none\"\n    }), h(\"duet-visually-hidden\", null, this.expanded ? this.accessibleCloseLabel : this.accessibleOpenLabel)), h(\"div\", {\n      id: this.expandableId,\n      class: {\n        \"duet-tray-expandable\": true,\n        active: this.expanded\n      }\n    }, h(\"div\", {\n      class: \"duet-tray-expandable-content\"\n    }, h(\"slot\", {\n      name: \"additional\"\n    })))));\n  }\n\n  get element() {\n    return getElement(this);\n  }\n\n};\nDuetTray.style = duetTrayCss;\nexport { DuetTray as duet_tray };","map":null,"metadata":{},"sourceType":"module"}