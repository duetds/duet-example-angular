{"ast":null,"code":"import _asyncToGenerator from \"/Users/klaushougesen/_repos/consulting/lahi/github/duet-example-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Built with Duet Design System\n */\nimport { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-eb374972.js';\nimport { c as createID } from './create-id-981107da.js';\nimport { i as inheritGlobalTheme } from './themeable-component-572685dd.js';\nimport { f as findCheckedOption, w as watchForOptions } from './watch-options-dd55bce8.js';\nconst duetRadioCss = \"*.sc-duet-radio,*.sc-duet-radio::after,*.sc-duet-radio::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-radio-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-right:28px !important;margin-bottom:12px !important;display:inline-flex;width:100%;vertical-align:bottom;-webkit-tap-highlight-color:transparent}.sc-duet-radio-h:last-child,.sc-duet-radio-h:last-of-type{margin-right:0 !important}.vertical.sc-duet-radio-h{margin-right:0 !important}.horizontal.sc-duet-radio-h{margin-bottom:0 !important;width:auto}.horizontal.sc-duet-radio-h .duet-label.sc-duet-radio span.sc-duet-radio{max-width:100%}@media (min-width: 48em){.horizontal-responsive.sc-duet-radio-h{margin-right:28px !important;margin-bottom:0 !important;width:auto}.horizontal-responsive.sc-duet-radio-h:last-child,.horizontal-responsive.sc-duet-radio-h:last-of-type{margin-right:0 !important}.horizontal-responsive.sc-duet-radio-h .duet-label.sc-duet-radio span.sc-duet-radio{max-width:100%}}.duet-m-0.sc-duet-radio-h{margin:0 !important}.sc-duet-radio-h:last-child:not(:only-child){margin-right:0 !important;margin-bottom:0 !important}.duet-label.sc-duet-radio{position:relative;z-index:100;display:flex;width:100%;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-size:1rem;font-weight:400;line-height:1.5;color:#00294d;cursor:pointer;background:transparent}.duet-theme-turva.sc-duet-radio .duet-label.sc-duet-radio{font-family:\\\"turva-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";color:#171c3a}.duet-label.sc-duet-radio span.sc-duet-radio{flex-grow:1;font-size:1rem}.duet-label-hidden.sc-duet-radio .duet-label.sc-duet-radio{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0 0 0 0);border:0}.duet-radio-container.sc-duet-radio{position:relative;width:100%;height:100%}.duet-radio.sc-duet-radio{padding:14px !important;position:absolute;top:0;left:0;z-index:200;width:100%;height:100%;cursor:pointer;opacity:0}.duet-radio.sc-duet-radio+label.sc-duet-radio::before{z-index:100;flex-shrink:0;width:20px;height:20px;margin:2px 10px 1px 1px;content:\\\"\\\";background:white;border:1px solid #00294d;border-radius:50%}.duet-theme-turva.sc-duet-radio .duet-radio.sc-duet-radio+label.sc-duet-radio::before{border-color:#171c3a}.duet-radio.sc-duet-radio:focus+label.sc-duet-radio::before{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}.duet-theme-turva.sc-duet-radio .duet-radio.sc-duet-radio:focus+label.sc-duet-radio::before{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}.duet-radio.sc-duet-radio:checked+label.sc-duet-radio::after{position:absolute;top:6px;left:5px;z-index:200;flex-shrink:0;width:12px;height:12px;content:\\\"\\\";background:#00294d;border-radius:50%}.duet-theme-turva.sc-duet-radio .duet-radio.sc-duet-radio:checked+label.sc-duet-radio::after{background:#171c3a}.duet-radio[disabled].sc-duet-radio{cursor:default}.duet-radio[disabled].sc-duet-radio+label.sc-duet-radio{color:#657787}.duet-theme-turva.sc-duet-radio .duet-radio[disabled].sc-duet-radio+label.sc-duet-radio{color:#747475}.duet-radio[disabled].sc-duet-radio+label.sc-duet-radio::before{border-color:#cfd2d4}.duet-theme-turva.sc-duet-radio .duet-radio[disabled].sc-duet-radio+label.sc-duet-radio::before{border-color:#cfcfd1}.duet-radio[disabled].sc-duet-radio:checked+label.sc-duet-radio::before{border:1px solid #657787}.duet-radio[disabled].sc-duet-radio:checked+label.sc-duet-radio::after{background:#657787}.duet-theme-turva.sc-duet-radio .duet-radio[disabled].sc-duet-radio:checked+label.sc-duet-radio::after{background:#747475;border-color:#747475}\";\nlet DuetRadio = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.duetChange = createEvent(this, \"duetChange\", 7);\n    this.duetFocus = createEvent(this, \"duetFocus\", 7);\n    this.duetBlur = createEvent(this, \"duetBlur\", 7);\n    /**\n     * Own Properties.\n     */\n\n    this.radioId = createID(\"DuetRadio\");\n    /**\n     * Controls the margin of the component.\n     */\n\n    this.margin = \"auto\";\n    /**\n     * Theme of the radio.\n     */\n\n    this.theme = \"\";\n    /**\n     * Makes the radio component disabled. This prevents users from being able to\n     * interact with the radio, and conveys its inactive state to assistive technologies.\n     */\n\n    this.disabled = false;\n    /**\n     * Set whether the input is required or not. Please note that this is required for\n     * accessible inputs when the user is required to fill them. When using this property\n     * you need to also set “novalidate” attribute to your form element to prevent\n     * browser from displaying its own validation errors.\n     */\n\n    this.required = false;\n    /**\n     * Stops the components from emitting events\n     */\n\n    this.blockEvents = false;\n    /**\n     * Label for the radio.\n     */\n\n    this.label = \"label\";\n    /**\n     * Component event handling.\n     */\n\n    this.onClick = ev => {\n      ev.stopPropagation();\n    };\n\n    this.onChange = ev => {\n      this.checked = ev.target.value;\n\n      if (this.checked && !this.blockEvents) {\n        this.duetChange.emit({\n          originalEvent: ev,\n          checked: this.checked,\n          value: this.value,\n          component: \"duet-radio\"\n        });\n      }\n    };\n\n    this.onBlur = ev => {\n      this.duetBlur.emit({\n        originalEvent: ev,\n        checked: this.checked,\n        value: this.value,\n        component: \"duet-radio\"\n      });\n    };\n\n    this.onFocus = ev => {\n      this.duetFocus.emit({\n        originalEvent: ev,\n        checked: this.checked,\n        value: this.value,\n        component: \"duet-radio\"\n      });\n    };\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n\n    if (this.value === undefined) {\n      this.value = this.identifier;\n    }\n  }\n  /**\n   * Sets focus on the specified `duet-radio`. Use this method instead of the global\n   * `input.focus()`.\n   */\n\n\n  setFocus(options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.nativeInput.focus(options);\n    })();\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    const identifier = this.identifier || this.radioId;\n    return h(Host, {\n      onClick: this.onClick,\n      class: {\n        horizontal: this.groupDirection === \"horizontal\" && !this.groupResponsive,\n        \"horizontal-responsive\": this.groupDirection === \"horizontal\" && this.groupResponsive,\n        \"duet-m-0\": this.margin === \"none\"\n      }\n    }, h(\"div\", {\n      class: {\n        \"duet-radio-container\": true,\n        \"duet-theme-turva\": this.theme === \"turva\"\n      }\n    }, h(\"input\", {\n      type: \"radio\",\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onChange: this.onChange,\n      value: this.value,\n      tabindex: this.accessibleIndex,\n      class: {\n        \"duet-radio\": true,\n        disabled: this.disabled || this.groupDisabled\n      },\n      checked: this.checked,\n      disabled: this.disabled || this.groupDisabled,\n      required: this.required,\n      \"aria-controls\": this.accessibleControls,\n      \"aria-activedescendant\": this.accessibleActiveDescendant,\n      \"aria-owns\": this.accessibleOwns,\n      \"aria-describedby\": this.accessibleDescribedBy,\n      role: this.role,\n      name: this.name,\n      id: identifier,\n      ref: input => this.nativeInput = input\n    }), h(\"label\", {\n      class: \"duet-label\",\n      htmlFor: identifier\n    }, h(\"span\", null, this.label))));\n  }\n\n  get element() {\n    return getElement(this);\n  }\n\n};\nDuetRadio.style = duetRadioCss;\nconst duetRadioGroupCss = \"*.sc-duet-radio-group,*.sc-duet-radio-group::after,*.sc-duet-radio-group::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-radio-group-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block;width:100%}.horizontal.sc-duet-radio-group-h .duet-radio-group.sc-duet-radio-group{display:block}@media (min-width: 48em){.horizontal.sc-duet-radio-group-h .duet-radio-group.sc-duet-radio-group{display:flex}}.horizontal.sc-duet-radio-group-h .duet-radio-group.duet-no-stacking.sc-duet-radio-group{display:flex}.deut-radio-group.sc-duet-radio-group{width:100%}\";\nlet DuetRadioGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * Direction of the radio group.\n     */\n\n    this.direction = \"vertical\";\n    /**\n     * Controls the margin of the component.\n     */\n\n    this.margin = \"auto\";\n    /**\n     * Theme of the radio group.\n     */\n\n    this.theme = \"\";\n    /**\n     * Display radio group in error state along with an error message.\n     */\n\n    this.error = \"\";\n    /**\n     * Tooltip to display next to the label of the radio group.\n     */\n\n    this.tooltip = \"\";\n    /**\n     * With direction setting you can force the tooltip to always open towards left\n     * or right instead of automatically determining the direction.\n     */\n\n    this.tooltipDirection = \"auto\";\n    /**\n     * Legend displayed for the radio buttons in this group.\n     */\n\n    this.label = \"Label\";\n    /**\n     * Visually hide the label, but still show it to screen readers.\n     */\n\n    this.labelHidden = false;\n    /**\n     * Additional caption to show inside the label of the radio group.\n     */\n\n    this.caption = \"\";\n    /**\n     * Enable or disable the automatic responsive behaviour of the radio group\n     * component when horizontal setting is used. Setting this option to \"true\"\n     * makes sure that contents are stacked vertically on mobile.\n     */\n\n    this.responsive = false;\n    /**\n     * Component event handling.\n     */\n\n    this.onSelect = ev => {\n      const selectedRadio = ev.target;\n\n      if (selectedRadio) {\n        this.value = selectedRadio.value;\n      } // Prevent events from bubbling up the DOM tree in case\n      // this group is a sub-group of another choice group.\n\n\n      ev.cancelBubble = true;\n    };\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  connectedCallback() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const el = _this2.element;\n\n      if (_this2.value === undefined) {\n        const radio = findCheckedOption(el, \"duet-radio\");\n\n        if (radio !== undefined) {\n          yield radio.componentOnReady();\n\n          if (_this2.value === undefined) {\n            _this2.value = radio.value;\n          }\n        }\n      }\n\n      _this2.mutationO = watchForOptions(el, \"duet-radio\", newOption => {\n        if (newOption !== undefined) {\n          newOption.componentOnReady().then(() => {\n            _this2.value = newOption.value;\n          });\n        } else {\n          _this2.updateRadios();\n        }\n      });\n\n      _this2.updateRadios();\n    })();\n  }\n\n  disconnectedCallback() {\n    if (this.mutationO) {\n      this.mutationO.disconnect();\n      this.mutationO = undefined;\n    }\n  }\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n  }\n  /**\n   * Local methods.\n   */\n\n\n  updateRadios() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      /**\n       * Make sure we get all radios first so values are up to date prior\n       * to caching the radio group value\n       */\n      const radios = Array.from(_this3.element.querySelectorAll(\"duet-radio\"));\n      const {\n        value\n      } = _this3;\n      let hasChecked = false; // Walk the DOM in reverse order, since the last selected one wins\n\n      for (const radio of radios) {\n        radio.name = _this3.name;\n        radio.groupDisabled = _this3.disabled;\n        radio.groupDirection = _this3.direction;\n        radio.groupResponsive = _this3.responsive;\n\n        if (!hasChecked && radio.value === value) {\n          // Correct value for this radio, but this radio isn't checked yet\n          // and we haven't found a checked yet\n          hasChecked = true;\n          radio.checked = true;\n        } else {\n          // This radio doesn't have the correct value or the radio group has been already checked\n          radio.checked = false;\n        }\n      } // Reset value if\n\n\n      if (!hasChecked) {\n        _this3.value = undefined;\n      }\n    })();\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    return h(Host, {\n      onDuetChange: this.onSelect,\n      class: {\n        horizontal: this.direction === \"horizontal\"\n      }\n    }, h(\"duet-fieldset\", {\n      label: this.label,\n      labelHidden: this.labelHidden,\n      caption: this.caption,\n      error: this.error,\n      margin: this.margin,\n      theme: this.theme\n    }, this.tooltip && h(\"duet-tooltip\", {\n      slot: \"tooltip\",\n      direction: this.tooltipDirection,\n      accessibleInputLabel: this.label\n    }, this.tooltip), h(\"div\", {\n      class: {\n        \"duet-radio-group\": true,\n        \"duet-no-stacking\": !this.responsive\n      }\n    }, h(\"slot\", null))));\n  }\n\n  get element() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"name\": [\"updateRadios\"],\n      \"value\": [\"updateRadios\"],\n      \"disabled\": [\"updateRadios\"],\n      \"direction\": [\"updateRadios\"],\n      \"responsive\": [\"updateRadios\"]\n    };\n  }\n\n};\nDuetRadioGroup.style = duetRadioGroupCss;\nexport { DuetRadio as duet_radio, DuetRadioGroup as duet_radio_group };","map":null,"metadata":{},"sourceType":"module"}