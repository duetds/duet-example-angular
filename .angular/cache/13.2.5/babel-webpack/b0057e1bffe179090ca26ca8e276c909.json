{"ast":null,"code":"/*!\n * Built with Duet Design System\n */\n\n/**\n * This function restores cursor position after changing input\n *\n * @example\n * const resetCursor = storeAndResetCursor(this.input.selectionStart,this.input.selectionEnd)\n * this.input.changeValueAndForceUpdateOfCursoPosition()\n * resetCursor()\n */\nfunction resetCursor(domElement) {\n  if (domElement && domElement.selectionStart) {\n    const start = domElement.selectionStart;\n    const end = domElement.selectionEnd;\n    return function () {\n      if (start === end) {\n        domElement.selectionStart = start;\n        domElement.selectionEnd = end;\n      } else {\n        domElement.setSelectionRange(start, end);\n      }\n    };\n  }\n\n  return () => console.log(\"domElement not valid\");\n}\n/**\n * Given an input and a regex, remove any characters from the input's value\n * which match the regex, *whilst* maintaining cursor position.\n *\n * In effect, this prevent users from entering specific characters.\n *\n * @example\n * input.value = \"foo123\"\n * cleanValue(input, /[^0-9]/g)\n * input.value === \"123\"\n */\n\n\nfunction cleanValue(input, regex) {\n  const value = input.value;\n  const cursor = input.selectionStart;\n  const beforeCursor = value.slice(0, cursor);\n  const afterCursor = value.slice(cursor, value.length);\n  const filteredBeforeCursor = beforeCursor.replace(regex, \"\");\n  const filterAfterCursor = afterCursor.replace(regex, \"\");\n  const newValue = filteredBeforeCursor + filterAfterCursor;\n  const newCursor = filteredBeforeCursor.length;\n  input.value = newValue;\n  input.selectionStart = input.selectionEnd = newCursor;\n  return newValue;\n}\n\nexport { cleanValue as c, resetCursor as r };","map":null,"metadata":{},"sourceType":"module"}