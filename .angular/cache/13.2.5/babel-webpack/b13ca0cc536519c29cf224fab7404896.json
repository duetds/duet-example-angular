{"ast":null,"code":"/*!\n * Built with Duet Design System\n */\nfunction isObject(maybeObj) {\n  return Object.prototype.toString.call(maybeObj) === \"[object Object]\";\n}\n\nconst parsePossibleJSON = maybeJSON => {\n  if (Array.isArray(maybeJSON) || isObject(maybeJSON)) {\n    return maybeJSON;\n  }\n\n  if (typeof maybeJSON === \"string\") {\n    try {\n      return JSON.parse(maybeJSON);\n    } catch (e) {\n      console.warn(e);\n    }\n  } // undefined is not a type in JSON,\n  // so we use it here to signal invalid input\n\n\n  return undefined;\n};\n/**\n * Format string, via simplistic sprintf equivalent\n * @example String.format('{0} is super, but {1} is best! {{0}}', 'Duet', 'Coffee'); -> \"Duet is super, but Coffee ist best! {0}\"\n *\n */\n// @ts-ignore\n\n\nif (!String.format) {\n  // @ts-ignore\n  String.format = function (format) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return format.replace(/\\{\\{|\\}\\}|\\{(\\d+)\\}/g, function (curlyBrack, index) {\n      return curlyBrack == \"{{\" ? \"{\" : curlyBrack == \"}}\" ? \"}\" : args[index];\n    });\n  };\n}\n\nconst MATCH_DISALLOWED_CHARS = /[^a-z0-9áéíóúñüöäå \\.,_-]/gim;\n\nfunction sanitizeString(string) {\n  return string.replace(MATCH_DISALLOWED_CHARS, \"\").trim();\n}\n\nconst convertHtmlQuotes = string => {\n  if (typeof string === \"string\") {\n    return string.replace(/&quot;/g, '\"').replace(/&apos;/g, '\"');\n  }\n\n  return string;\n};\n\nexport { convertHtmlQuotes as c, parsePossibleJSON as p, sanitizeString as s };","map":null,"metadata":{},"sourceType":"module"}