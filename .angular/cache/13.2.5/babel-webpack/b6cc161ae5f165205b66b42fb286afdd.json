{"ast":null,"code":"import _asyncToGenerator from \"/Users/klaushougesen/_repos/consulting/lahi/github/duet-example-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Built with Duet Design System\n */\nimport { h, r as registerInstance, c as createEvent, H as Host, g as getElement } from './index-795979f3.js';\nimport { c as createID } from './create-id-981107da.js';\nimport { F as FocusGuard } from './focus-utils-5b40a8be.js';\nimport { a as getLanguage, g as getLocaleString } from './language-utils-344d894c.js';\nimport { i as inheritGlobalTheme } from './themeable-component-572685dd.js';\nimport './string-utils-2f1793b8.js';\nconst formatOptionsShort = {\n  day: \"numeric\",\n  month: \"long\"\n};\nconst formatOptionsLong = {\n  day: \"numeric\",\n  month: \"long\",\n  year: \"numeric\"\n};\nconst i18n = {\n  fi: {\n    buttonLabel: \"Valitse päivämäärä\",\n    prevMonthLabel: \"Edellinen kuukausi\",\n    nextMonthLabel: \"Seuraava kuukausi\",\n    monthSelectLabel: \"Kuukausi\",\n    yearSelectLabel: \"Vuosi\",\n    closeLabel: \"Sulje ikkuna\",\n    selected: \"Valittu päivämäärä on\",\n    keyboardInstruction: \"Voit navigoida päivämääriä nuolinäppäimillä\",\n    dayLabels: [\"Maanantai\", \"Tiistai\", \"Keskiviikko\", \"Torstai\", \"Perjantai\", \"Lauantai\", \"Sunnuntai\"],\n    monthLabels: [\"Tammikuu\", \"Helmikuu\", \"Maaliskuu\", \"Huhtikuu\", \"Toukokuu\", \"Kesäkuu\", \"Heinäkuu\", \"Elokuu\", \"Syyskuu\", \"Lokakuu\", \"Marraskuu\", \"Joulukuu\"],\n    monthLabelsShort: [\"Tammi\", \"Helmi\", \"Maalis\", \"Huhti\", \"Touko\", \"Kesä\", \"Heinä\", \"Elo\", \"Syys\", \"Loka\", \"Marras\", \"Joulu\"],\n    formatterShort: new Intl.DateTimeFormat(\"fi-FI\", formatOptionsShort),\n    formatterLong: new Intl.DateTimeFormat(\"fi-FI\", formatOptionsLong)\n  },\n  en: {\n    buttonLabel: \"Choose date\",\n    prevMonthLabel: \"Previous month\",\n    nextMonthLabel: \"Next month\",\n    monthSelectLabel: \"Month\",\n    yearSelectLabel: \"Year\",\n    closeLabel: \"Close window\",\n    selected: \"Selected date is\",\n    keyboardInstruction: \"You can use arrow keys to navigate dates\",\n    dayLabels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n    monthLabels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n    monthLabelsShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    formatterShort: new Intl.DateTimeFormat(\"en-GB\", formatOptionsShort),\n    formatterLong: new Intl.DateTimeFormat(\"en-GB\", formatOptionsLong)\n  },\n  sv: {\n    buttonLabel: \"Välj datum\",\n    prevMonthLabel: \"Föregående månad\",\n    nextMonthLabel: \"Nästa månad\",\n    monthSelectLabel: \"Månad\",\n    yearSelectLabel: \"År\",\n    closeLabel: \"Stäng fönstret\",\n    selected: \"Valt datum är\",\n    keyboardInstruction: \"Använd piltangenterna för att navigera i kalender\",\n    dayLabels: [\"Måndag\", \"Tisdag\", \"Onsdag\", \"Torsdag\", \"Fredag\", \"Lördag\", \"Söndag\"],\n    monthLabels: [\"Januari\", \"Februari\", \"Mars\", \"April\", \"Maj\", \"Juni\", \"Juli\", \"Augusti\", \"September\", \"Oktober\", \"November\", \"December\"],\n    monthLabelsShort: [\"Jan\", \"Feb\", \"Mars\", \"April\", \"Maj\", \"Juni\", \"Juli\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dec\"],\n    formatterShort: new Intl.DateTimeFormat(\"sv-SE\", formatOptionsShort),\n    formatterLong: new Intl.DateTimeFormat(\"sv-SE\", formatOptionsLong)\n  }\n};\nvar formDate = {\n  \"title\": \"form-date\",\n  \"tags\": \"form date calendar date picker\",\n  \"svg\": \"<svg fill=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" role=\\\"img\\\"><path d=\\\"M2.25 24A2.252 2.252 0 0 1 0 21.75V5.25A2.252 2.252 0 0 1 2.25 3H6V.75a.75.75 0 0 1 1.5 0V3h9V.75a.75.75 0 0 1 1.5 0V3h3.75A2.252 2.252 0 0 1 24 5.25v16.5A2.252 2.252 0 0 1 21.75 24zm-.75-2.25c0 .414.336.75.75.75h19.5a.75.75 0 0 0 .75-.75V10.5h-21zM22.5 9V5.25a.75.75 0 0 0-.75-.75H18V6a.75.75 0 0 1-1.5 0V4.5h-9V6A.75.75 0 0 1 6 6V4.5H2.25a.75.75 0 0 0-.75.75V9z\\\"/><circle cx=\\\"5.625\\\" cy=\\\"13.875\\\" r=\\\"1.125\\\"/><circle cx=\\\"5.625\\\" cy=\\\"19.125\\\" r=\\\"1.125\\\"/><circle cx=\\\"12\\\" cy=\\\"13.875\\\" r=\\\"1.125\\\"/><circle cx=\\\"12\\\" cy=\\\"19.125\\\" r=\\\"1.125\\\"/><circle cx=\\\"18.375\\\" cy=\\\"13.875\\\" r=\\\"1.125\\\"/><path d=\\\"M18.375 20.25c-.62 0-1.125-.505-1.125-1.125a1.127 1.127 0 0 1 1.171-1.122l.027.003a1.118 1.118 0 0 1 1.052 1.12c0 .619-.505 1.124-1.125 1.124z\\\"/></svg>\"\n};\n\nconst DatePickerInput = ({\n  onClick,\n  placeholder,\n  name,\n  inputLabel,\n  value,\n  valueAsDate,\n  formattedValue,\n  language,\n  identifier,\n  theme,\n  disabled,\n  error,\n  role,\n  required,\n  tooltip,\n  tooltipDirection,\n  labelHidden,\n  buttonRef,\n  inputRef,\n  onInput,\n  onBlur,\n  onFocus,\n  accessibleActiveDescendant,\n  accessibleControls,\n  accessibleOwns,\n  accessibleDescribedBy,\n  echoPlaceholder,\n  caption\n}) => {\n  const {\n    buttonLabel,\n    selected,\n    formatterLong\n  } = i18n[language];\n  return h(\"div\", {\n    class: {\n      \"duet-theme-turva\": theme === \"turva\",\n      \"duet-date-input\": true\n    }\n  }, h(\"duet-input\", {\n    label: inputLabel,\n    value: formattedValue,\n    placeholder: placeholder,\n    id: identifier,\n    disabled: disabled,\n    theme: theme,\n    error: error,\n    role: role,\n    required: required,\n    tooltip: tooltip,\n    tooltipDirection: tooltipDirection,\n    margin: \"none\",\n    component: \"date\",\n    labelHidden: labelHidden,\n    accessibleAutocomplete: \"none\",\n    onDuetInput: onInput,\n    onDuetFocus: onFocus,\n    onDuetBlur: onBlur,\n    autoComplete: \"off\",\n    disallowPattern: \"[^0-9\\\\.\\\\-\\\\/]\",\n    expand: true,\n    ref: inputRef,\n    accessibleActiveDescendant: accessibleActiveDescendant,\n    accessibleControls: accessibleControls,\n    accessibleOwns: accessibleOwns,\n    accessibleDescribedBy: accessibleDescribedBy,\n    echoPlaceholder: echoPlaceholder,\n    caption: caption\n  }, h(\"button\", {\n    class: {\n      \"duet-date-button\": true,\n      \"duet-no-label\": labelHidden\n    },\n    onClick: onClick,\n    disabled: disabled,\n    ref: buttonRef,\n    type: \"button\"\n  }, h(\"duet-icon\", {\n    icon: formDate.svg,\n    margin: \"none\",\n    size: \"small\",\n    color: \"currentColor\"\n  }), h(\"duet-visually-hidden\", null, buttonLabel, valueAsDate && h(\"span\", null, \", \", selected, \" \", formatterLong.format(valueAsDate))))), h(\"input\", {\n    type: \"hidden\",\n    name: name,\n    value: value\n  }));\n};\n\nconst DATE_FORMAT = /^(\\d{1,2})[\\.\\-\\/](\\d{1,2})[\\.\\-\\/](\\d{4})$/;\nconst ISO_DATE_FORMAT = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst DATE_OUTPUT_FORMAT = \"dd.mm.yyyy\";\nconst DATE_ISO_OUTPUT_FORMAT = \"YYYY-MM-DD\";\n\nfunction createDate(year, month, day) {\n  var dayInt = parseInt(day, 10);\n  var monthInt = parseInt(month, 10);\n  var yearInt = parseInt(year, 10);\n  const isValid = Number.isInteger(yearInt) && // all parts should be integers\n  Number.isInteger(monthInt) && Number.isInteger(dayInt) && monthInt > 0 && // month must be 1-12\n  monthInt <= 12 && dayInt > 0 && // day must be 1-31\n  dayInt <= 31 && yearInt > 0;\n\n  if (isValid) {\n    return new Date(yearInt, monthInt - 1, dayInt);\n  }\n}\n/**\n * @param value date string in format dd.mm.yyyy\n */\n\n\nfunction parseDate(value) {\n  if (!value) {\n    return;\n  }\n\n  const matches = value.match(DATE_FORMAT);\n\n  if (matches) {\n    return createDate(matches[3], matches[2], matches[1]);\n  }\n}\n/**\n * @param value date string in ISO format YYYY-MM-DD\n */\n\n\nfunction parseISODate(value) {\n  if (!value) {\n    return;\n  }\n\n  const matches = value.match(ISO_DATE_FORMAT);\n\n  if (matches) {\n    return createDate(matches[1], matches[2], matches[3]);\n  }\n}\n/**\n * @param date the date to format as a Date\n * @param format the format string eg. \"dd.mm.yyyy\", \"YYYY-MM-DD\"\n */\n\n\nfunction formatDate(date, format) {\n  if (!date) {\n    return \"\";\n  }\n\n  var d = date.getDate().toString(10);\n  var m = (date.getMonth() + 1).toString(10);\n  var y = date.getFullYear().toString(10); // days are not zero-indexed, so pad if less than 10\n\n  if (date.getDate() < 10) {\n    d = `0${d}`;\n  } // months *are* zero-indexed, pad if less than 9!\n\n\n  if (date.getMonth() < 9) {\n    m = `0${m}`;\n  }\n\n  return format.replace(/MM/i, m).replace(/YYYY/i, y).replace(/DD/i, d);\n}\n/**\n * print date in format dd.mm.yyyy\n * @param date\n */\n\n\nfunction printDate(date) {\n  return formatDate(date, DATE_OUTPUT_FORMAT);\n}\n/**\n * print date in format YYYY-MM-DD\n * @param date\n */\n\n\nfunction printISODate(date) {\n  return formatDate(date, DATE_ISO_OUTPUT_FORMAT);\n}\n/**\n * Compare if two dates are equal in terms of day, month, and year\n */\n\n\nfunction isEqual(a, b) {\n  if (a == null || b == null) {\n    return false;\n  }\n\n  return a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate();\n}\n\nfunction addDays(date, days) {\n  var d = new Date(date);\n  d.setDate(d.getDate() + days);\n  return d;\n}\n\nfunction startOfWeek(date, firstDayOfWeek = 1) {\n  var d = new Date(date);\n  var day = d.getDay();\n  var diff = (day < firstDayOfWeek ? 7 : 0) + day - firstDayOfWeek;\n  d.setDate(d.getDate() - diff);\n  return d;\n}\n\nfunction endOfWeek(date, firstDayOfWeek = 1) {\n  var d = new Date(date);\n  var day = d.getDay();\n  var diff = (day < firstDayOfWeek ? -7 : 0) + 6 - (day - firstDayOfWeek);\n  d.setDate(d.getDate() + diff);\n  return d;\n}\n\nfunction startOfMonth(date) {\n  return new Date(date.getFullYear(), date.getMonth(), 1);\n}\n\nfunction endOfMonth(date) {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n\nfunction setMonth(date, month) {\n  const d = new Date(date);\n  d.setMonth(month);\n  return d;\n}\n\nfunction setYear(date, year) {\n  const d = new Date(date);\n  d.setFullYear(year);\n  return d;\n}\n/**\n * Check if date is within a min and max\n */\n\n\nfunction inRange(date, min, max) {\n  return clamp(date, min, max) === date;\n}\n/**\n * Ensures date is within range, returns min or max if out of bounds\n */\n\n\nfunction clamp(date, min, max) {\n  const time = date.getTime();\n\n  if (min && min instanceof Date && time < min.getTime()) {\n    return min;\n  }\n\n  if (max && max instanceof Date && time > max.getTime()) {\n    return max;\n  }\n\n  return date;\n}\n/**\n * given start and end date, return an (inclusive) array of all dates in between\n * @param start\n * @param end\n */\n\n\nfunction getDaysInRange(start, end) {\n  const days = [];\n  let current = start;\n\n  while (!isEqual(current, end)) {\n    days.push(current);\n    current = addDays(current, 1);\n  }\n\n  days.push(current);\n  return days;\n}\n/**\n * given a date, return an array of dates from a calendar perspective\n * @param date\n * @param firstDayOfWeek\n */\n\n\nfunction getViewOfMonth(date, firstDayOfWeek = 1) {\n  const start = startOfWeek(startOfMonth(date), firstDayOfWeek);\n  const end = endOfWeek(endOfMonth(date), firstDayOfWeek);\n  return getDaysInRange(start, end);\n}\n\nconst DatePickerDay = ({\n  focusedDay,\n  today,\n  day,\n  language,\n  onDaySelect,\n  onKeyboardNavigation,\n  ref,\n  inRange,\n  isSelected\n}) => {\n  const isToday = isEqual(day, today);\n  const isFocused = isEqual(day, focusedDay);\n  const isDisabled = day.getMonth() !== focusedDay.getMonth();\n  const isOutsideRange = !inRange;\n  const {\n    formatterShort\n  } = i18n[language];\n\n  function handleClick(e) {\n    onDaySelect(e, day);\n  }\n\n  return h(\"button\", {\n    class: {\n      \"duet-date-table-button\": true,\n      outside: isOutsideRange,\n      disabled: isDisabled,\n      today: isToday\n    },\n    tabIndex: isFocused ? 0 : -1,\n    onClick: handleClick,\n    onKeyDown: onKeyboardNavigation,\n    \"aria-disabled\": isOutsideRange || isDisabled,\n    \"aria-pressed\": isSelected ? \"true\" : \"false\",\n    type: \"button\",\n    ref: ref\n  }, h(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, day.getDate()), h(\"duet-visually-hidden\", null, formatterShort.format(day)));\n};\n/**\n * Creates an array representing an inclusive numeric range.\n * `from` must be less than `to`\n * @param from\n * @param to\n */\n\n\nfunction range(from, to) {\n  var result = [];\n\n  for (var i = from; i <= to; i++) {\n    result.push(i);\n  }\n\n  return result;\n}\n/**\n * Splits an array into smaller arrays of given chunk size\n * @param array\n * @param chunkSize\n */\n\n\nfunction chunk(array, chunkSize) {\n  const result = [];\n\n  for (let i = 0; i < array.length; i += chunkSize) {\n    result.push(array.slice(i, i + chunkSize));\n  }\n\n  return result;\n}\n\nfunction parseShortcut(str) {\n  var _a;\n\n  const press = str.trim().split(\"+\");\n  const key = press.pop();\n  return [((_a = press[0]) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === \"shift\", key];\n}\n/**\n * Creates a keyboard event handler for handling keyboard shortcuts.\n * It currently only handles shift key as a modifier.\n * @param shortcuts a hash where keys are keyboard shortcuts, and values are handlers for those shortcuts\n * @example\n * element.addEventListener(\"keydown\", createShortcuts({\n *  \"PageDown\": () => this.addMonths(1)\n *  \"Shift+PageDown\": () => this.addYears(1)\n * }))\n */\n\n\nfunction createShortcuts(shortcuts) {\n  const keyBindings = Object.keys(shortcuts).map(key => [parseShortcut(key), shortcuts[key]]);\n  return function handleShortcuts(event) {\n    if (!(event instanceof KeyboardEvent)) {\n      return;\n    } // we need to check both event.code and event.key\n    // for browser support back to IE11\n\n\n    const shortcut = keyBindings.find(([[shift, key]]) => {\n      return (key.toUpperCase() === event.key.toUpperCase() || key === event.code) && shift === event.shiftKey;\n    });\n\n    if (shortcut) {\n      shortcut[1](event);\n      event.preventDefault();\n    }\n  };\n}\n\nconst DatePickerMonth = ({\n  selectedDate,\n  focusedDate,\n  labelledById,\n  theme,\n  language,\n  min,\n  max,\n  onDateSelect,\n  onKeyboardNavigation,\n  focusedDayRef,\n  onFocusEnter,\n  onFocusExit\n}) => {\n  const {\n    dayLabels\n  } = i18n[language];\n  const today = new Date();\n  const days = getViewOfMonth(focusedDate);\n\n  function handleFocusOut(e) {\n    const table = e.currentTarget;\n    const relatedTarget = e.relatedTarget;\n\n    if (relatedTarget && !table.contains(relatedTarget)) {\n      onFocusExit(e);\n    }\n  }\n\n  return h(\"table\", {\n    class: {\n      \"duet-date-table\": true,\n      \"duet-theme-turva\": theme === \"turva\"\n    },\n    \"aria-labelledby\": labelledById,\n    // @ts-ignore\n    onFocusin: onFocusEnter,\n    onFocusout: handleFocusOut\n  }, h(\"thead\", null, h(\"tr\", null, dayLabels.map(label => h(\"th\", {\n    scope: \"col\"\n  }, h(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, label.substr(0, 2)), h(\"duet-visually-hidden\", null, label))))), h(\"tbody\", null, chunk(days, 7).map(week => h(\"tr\", {\n    class: \"duet-date-table-row\"\n  }, week.map(day => h(\"td\", {\n    class: \"duet-date-table-cell\"\n  }, h(DatePickerDay, {\n    day: day,\n    today: today,\n    language: language,\n    focusedDay: focusedDate,\n    inRange: inRange(day, min, max),\n    isSelected: isEqual(day, selectedDate),\n    onDaySelect: onDateSelect,\n    onKeyboardNavigation: onKeyboardNavigation,\n    ref: el => {\n      if (el && isEqual(day, focusedDate)) {\n        focusedDayRef(el);\n      }\n    }\n  })))))));\n};\n\nconst duetDatePickerCss = \"*.sc-duet-date-picker,*.sc-duet-date-picker::after,*.sc-duet-date-picker::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-date-picker-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-right:16px !important;margin-bottom:12px !important;position:relative;display:inline-flex;width:100%;min-width:calc(33.333% - 8px);max-width:100%;text-align:left;vertical-align:top}.sc-duet-date-picker-h:last-child,.sc-duet-date-picker-h:last-of-type{margin-right:0 !important}@media (min-width: 36em){.sc-duet-date-picker-h{width:calc(50% - 16px - 3px)}}.duet-expand.sc-duet-date-picker-h{width:100% !important}.duet-m-0.sc-duet-date-picker-h{margin:0 !important}.duet-date.sc-duet-date-picker{position:relative;width:100%}.duet-date.sc-duet-date-picker button.sc-duet-date-picker,.duet-date-dialog.sc-duet-date-picker button.sc-duet-date-picker{max-width:initial !important;min-height:initial !important;padding:0 !important;margin:0 !important;transition:initial}.duet-date-button.sc-duet-date-picker{-webkit-user-select:none;user-select:none;position:absolute;top:1px;right:1px;z-index:200;display:flex;align-items:center;justify-content:center;width:48px;height:calc(100% - 2px);color:#00294d;cursor:pointer;background:transparent !important;border-left:1px solid #cfd2d4 !important;border-radius:0 4px 4px 0 !important}.duet-theme-turva.sc-duet-date-picker .duet-date-button.sc-duet-date-picker{color:#171c3a;border-color:#cfcfd1}.duet-date-button.sc-duet-date-picker::before{position:absolute;top:0;left:-6px;width:6px;height:100%;content:\\\"\\\";background:linear-gradient(to left, rgba(207, 210, 212, 0.2) 0%, rgba(207, 210, 212, 0.2) 1px, rgba(207, 210, 212, 0.1) 1px, rgba(207, 210, 212, 0) 100%)}.duet-date-button.sc-duet-date-picker:disabled{pointer-events:none;cursor:default;background:#f5f8fa !important;border:0 !important}.duet-theme-turva.sc-duet-date-picker .duet-date-button.sc-duet-date-picker:disabled{background:#f5f5f7 !important}.duet-date-button.sc-duet-date-picker:disabled::before{display:none}.duet-date-button.sc-duet-date-picker:disabled duet-icon.sc-duet-date-picker{opacity:0.4}.duet-date-button.sc-duet-date-picker duet-icon.sc-duet-date-picker{transform:translateY(-1px)}.duet-date-button.sc-duet-date-picker:active duet-icon.sc-duet-date-picker{transform:translateY(0)}.duet-date-button.sc-duet-date-picker:focus{color:#0077b3;border-color:transparent;outline:0;box-shadow:0 0 0 2px #0077b3}.duet-theme-turva.sc-duet-date-picker .duet-date-button.sc-duet-date-picker:focus{color:#171c3a;box-shadow:0 0 0 2px #171c3a}.duet-date-dialog.sc-duet-date-picker{position:absolute;top:100%;left:0;z-index:900;display:flex;width:100%;visibility:hidden;opacity:0;transition:transform 300ms ease, opacity 300ms ease, visibility 300ms ease;transform:scale(0.96) translateZ(0) translateY(-20px);transform-origin:top right}@media (min-width: 36em){.duet-date-dialog.left.sc-duet-date-picker{right:0;left:auto;width:auto}}@media (max-width: 35.9375em){.duet-date-dialog.sc-duet-date-picker{position:fixed;top:0;right:0;bottom:0;background:rgba(0, 41, 77, 0.75);transition:opacity 400ms ease, visibility 400ms ease;transform:translateZ(0);transform-origin:bottom center}.duet-date-dialog.duet-theme-turva.sc-duet-date-picker{background:rgba(23, 28, 58, 0.75)}}.duet-date-dialog.active.sc-duet-date-picker{visibility:visible;opacity:1;transition-property:transform, opacity;transform:scale(1.0001) translateZ(0) translateY(0)}@media (min-width: 36em){.duet-date-dialog.error.sc-duet-date-picker{top:calc(100% - 28px);margin-top:4px}}.duet-date-dialog-wrapper.sc-duet-date-picker{position:relative;z-index:600;width:100%;min-width:290px;max-width:310px;padding:16px 16px 20px;margin-top:8px;margin-left:auto;background:white;border:1px solid #e1e3e6;border-radius:4px;box-shadow:0 4px 10px 0 rgba(0, 41, 77, 0.15);transform:none}.duet-theme-turva.sc-duet-date-picker .duet-date-dialog-wrapper.sc-duet-date-picker{border-color:#e4e4e6}@media (max-width: 35.9375em){.duet-date-dialog-wrapper.sc-duet-date-picker{position:absolute;bottom:0;left:0;z-index:900;max-width:none;min-height:25em;padding:0 8% 20px;margin:0;visibility:hidden;border:0;border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px;opacity:0;transition:transform 400ms ease, opacity 400ms ease, visibility 400ms ease;transform:translateZ(0) translateY(100%)}.active.sc-duet-date-picker .duet-date-dialog-wrapper.sc-duet-date-picker{visibility:visible;opacity:1;transition-property:transform, opacity;transform:translateZ(0) translateY(0)}}.duet-date-table.sc-duet-date-picker{width:100%;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-size:1rem;font-weight:400;line-height:1.25;color:#00294d;text-align:center;border-spacing:0;border-collapse:collapse}.duet-date-table.duet-theme-turva.sc-duet-date-picker{font-family:\\\"turva-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";color:#171c3a}.duet-date-table.sc-duet-date-picker th.sc-duet-date-picker{padding-bottom:8px;font-size:0.75rem;font-weight:600;line-height:1.25;text-decoration:none;text-transform:uppercase;letter-spacing:1px}.duet-date-table.sc-duet-date-picker .duet-date-table-cell.sc-duet-date-picker{text-align:center}.duet-date-table-button.sc-duet-date-picker{position:relative;z-index:100;display:inline-block !important;width:36.9230769231px !important;height:36.9230769231px !important;min-height:initial !important;padding:0 !important;margin:0 !important;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-size:0.875rem;font-weight:400;font-variant-numeric:tabular-nums;line-height:1.25 !important;color:#00294d !important;text-align:center;vertical-align:initial !important;cursor:pointer;background:transparent !important;border-radius:50% !important;transition:initial !important}.duet-theme-turva.sc-duet-date-picker .duet-date-table-button.sc-duet-date-picker{font-family:\\\"turva-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\" !important;color:#171c3a !important}.duet-date-table-button.sc-duet-date-picker:hover{background:#e6f2f8 !important}.duet-theme-turva.sc-duet-date-picker .duet-date-table-button.sc-duet-date-picker:hover{background:#f9e6ea !important}.duet-date-table-button.today.sc-duet-date-picker{z-index:200;color:#004d80 !important;background:#f3f9fc !important;box-shadow:0 0 0 1px #0077b3 !important}.duet-theme-turva.sc-duet-date-picker .duet-date-table-button.today.sc-duet-date-picker{color:#940925 !important;background:#fcf3f4 !important;box-shadow:0 0 0 1px #c60c30 !important}.duet-date-table-button[aria-pressed=true].sc-duet-date-picker,.duet-date-table-button.sc-duet-date-picker:focus{color:white !important;background:#0077b3 !important;outline:0}.duet-theme-turva.sc-duet-date-picker .duet-date-table-button[aria-pressed=true].sc-duet-date-picker,.duet-theme-turva.sc-duet-date-picker .duet-date-table-button.sc-duet-date-picker:focus{color:white !important;background:#c60c30 !important}.duet-date-table-button.sc-duet-date-picker:active{z-index:200;color:white !important;background:#0077b3 !important;box-shadow:0 0 5px #0077b3 !important}.duet-theme-turva.sc-duet-date-picker .duet-date-table-button.sc-duet-date-picker:active{color:white !important;background:#c60c30 !important;box-shadow:0 0 5px #c60c30 !important}.duet-date-table-button.sc-duet-date-picker:focus{z-index:200;box-shadow:0 0 5px #0077b3 !important}.duet-theme-turva.sc-duet-date-picker .duet-date-table-button.sc-duet-date-picker:focus{box-shadow:0 0 5px #c60c30 !important}.duet-date-table-button.disabled.sc-duet-date-picker{color:#909599 !important;cursor:default;background:transparent !important;box-shadow:none !important}.duet-theme-turva.sc-duet-date-picker .duet-date-table-button.disabled.sc-duet-date-picker{color:#747475 !important;background:transparent !important;box-shadow:none !important}.duet-date-table-button.outside.sc-duet-date-picker{color:#909599 !important;pointer-events:none;cursor:default;background:#f5f8fa !important;box-shadow:none;opacity:0.75}.duet-theme-turva.sc-duet-date-picker .duet-date-table-button.outside.sc-duet-date-picker{color:#747475;background:#f5f5f7;box-shadow:none}.duet-date-dialog-header.sc-duet-date-picker{margin-bottom:16px !important;display:flex;align-items:center;justify-content:space-between;width:100%}.duet-date-dialog-buttons.sc-duet-date-picker{white-space:nowrap}.duet-date-dialog-buttons.sc-duet-date-picker button.sc-duet-date-picker{display:inline-flex;align-items:center;justify-content:center;width:32px;height:32px;min-height:auto !important;padding:0 !important;margin:0 0 0 8px !important;color:#00294d;cursor:pointer;background:#f5f8fa;border-radius:50%;transition:background-color 300ms ease !important}.duet-theme-turva.sc-duet-date-picker .duet-date-dialog-buttons.sc-duet-date-picker button.sc-duet-date-picker{color:#171c3a;background:#f5f5f7}.duet-date-dialog-buttons.sc-duet-date-picker button.sc-duet-date-picker duet-icon.sc-duet-date-picker{display:block}@media (max-width: 35.9375em){.duet-date-dialog-buttons.sc-duet-date-picker button.sc-duet-date-picker{width:40px;height:40px}}.duet-date-dialog-buttons.sc-duet-date-picker button.sc-duet-date-picker:not(:disabled):hover{background:#e9ecee !important}.duet-theme-turva.sc-duet-date-picker .duet-date-dialog-buttons.sc-duet-date-picker button.sc-duet-date-picker:not(:disabled):hover{background:#e9e9eb !important}.duet-date-dialog-buttons.sc-duet-date-picker button.sc-duet-date-picker:focus{outline:0;box-shadow:0 0 0 2px #0077b3}.duet-theme-turva.sc-duet-date-picker .duet-date-dialog-buttons.sc-duet-date-picker button.sc-duet-date-picker:focus{box-shadow:0 0 0 2px #171c3a}.duet-date-dialog-buttons.sc-duet-date-picker button.sc-duet-date-picker:active:focus{background:#dddfe1;box-shadow:none}.duet-theme-turva.sc-duet-date-picker .duet-date-dialog-buttons.sc-duet-date-picker button.sc-duet-date-picker:active:focus{background:#ddddde}.duet-date-dialog-buttons.sc-duet-date-picker button.sc-duet-date-picker:disabled{color:#909599;cursor:default;background:#f5f8fa;opacity:0.75}.duet-theme-turva.sc-duet-date-picker .duet-date-dialog-buttons.sc-duet-date-picker button.sc-duet-date-picker:disabled{color:#747475;background:#f5f5f7}.duet-date-dialog-select.sc-duet-date-picker{position:relative;display:inline-flex;margin-top:4px}.duet-date-dialog-select.sc-duet-date-picker .duet-date-dialog-select-label.sc-duet-date-picker{position:relative;z-index:1;display:flex;align-items:center;width:100%;padding:0 8px;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-size:1.25rem;font-weight:600;line-height:1.25;color:#00294d;pointer-events:none;border-radius:4px}.duet-theme-turva.sc-duet-date-picker .duet-date-dialog-select.sc-duet-date-picker .duet-date-dialog-select-label.sc-duet-date-picker{font-family:\\\"turva-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";color:#171c3a}.duet-date-dialog-select.sc-duet-date-picker span.sc-duet-date-picker{margin-right:4px}.duet-date-dialog-select.sc-duet-date-picker select.sc-duet-date-picker{position:absolute;top:0;left:0;z-index:2;width:100%;height:100%;font-size:1rem;cursor:pointer;opacity:0}.duet-date-dialog-select.sc-duet-date-picker select.sc-duet-date-picker:focus+.duet-date-dialog-select-label.sc-duet-date-picker{box-shadow:0 0 0 2px #0077b3}.duet-theme-turva.sc-duet-date-picker .duet-date-dialog-select.sc-duet-date-picker select.sc-duet-date-picker:focus+.duet-date-dialog-select-label.sc-duet-date-picker{box-shadow:0 0 0 2px #171c3a}.duet-date-dialog-mobile-header.sc-duet-date-picker{position:relative;display:flex;align-items:center;justify-content:space-between;width:120%;padding:12px 20px;margin-bottom:20px;margin-left:-10%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;border-bottom:1px solid #cfd2d4}@media (min-width: 36em){.duet-date-dialog-mobile-header.sc-duet-date-picker{position:absolute;top:-8px;right:-8px;width:auto;padding:0;margin:0;overflow:visible;border:0}}.duet-theme-turva.sc-duet-date-picker .duet-date-dialog-mobile-header.sc-duet-date-picker{border-color:#cfcfd1}.duet-date-dialog-mobile-header.sc-duet-date-picker duet-label.sc-duet-date-picker{display:inline-block;max-width:84%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}@media (min-width: 36em){.duet-date-dialog-mobile-header.sc-duet-date-picker duet-label.sc-duet-date-picker{display:none}}.duet-date-picker-close.sc-duet-date-picker{display:flex;align-items:center;justify-content:center;width:24px;height:24px !important;padding:0 !important;color:#00294d !important;cursor:pointer;background:#f5f8fa !important;border-radius:50%;-webkit-appearance:none;appearance:none}@media (min-width: 36em){.duet-date-picker-close.sc-duet-date-picker{opacity:0}}.duet-theme-turva.sc-duet-date-picker .duet-date-picker-close.sc-duet-date-picker{background:#f5f5f7 !important}.duet-date-picker-close.sc-duet-date-picker:hover{background:#f5f8fa !important}.duet-theme-turva.sc-duet-date-picker .duet-date-picker-close.sc-duet-date-picker:hover{background:#f5f5f7 !important}.duet-date-picker-close.sc-duet-date-picker:focus{outline:none;box-shadow:0 0 0 2px #0077b3}@media (min-width: 36em){.duet-date-picker-close.sc-duet-date-picker:focus{opacity:1}}.duet-theme-turva.sc-duet-date-picker .duet-date-picker-close.sc-duet-date-picker:focus{box-shadow:0 0 0 2px #171c3a}\";\nlet DuetDatePicker = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.duetChange = createEvent(this, \"duetChange\", 7);\n    this.duetBlur = createEvent(this, \"duetBlur\", 7);\n    this.duetFocus = createEvent(this, \"duetFocus\", 7);\n    this.monthSelectId = createID(\"DuetDatePicker\");\n    this.yearSelectId = createID(\"DuetDatePicker\");\n    this.dialogLabelId = createID(\"DuetDatePicker\");\n    this.initialTouchX = null;\n    this.initialTouchY = null;\n    this.focusTarget = null;\n    this.open = false;\n    this.focusedDay = new Date();\n    this.inputValue = \"\";\n    /**\n     * Theme of the component.\n     */\n\n    this.theme = \"\";\n    /**\n     * Expands the date picker input to fill 100% of the container width.\n     */\n\n    this.expand = false;\n    /**\n     * Name of the date picker input.\n     */\n\n    this.name = \"\";\n    /**\n     * Adds a unique identifier for the date picker input.\n     */\n\n    this.identifier = \"\";\n    /**\n     * Label for the date picker input.\n     */\n\n    this.label = \"\";\n    /**\n     * Controls the margin of the component.\n     */\n\n    this.margin = \"auto\";\n    /**\n     * The currently active language. This setting changes the month/year/day.\n     * names and button labels as well as all screen reader labels.\n     * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing.\n     * @default \"fi\"\n     */\n\n    this.language = getLanguage();\n    /**\n     * Placeholder defaults.\n     * @default { fi: \"pp.kk.vvvv\", en: \"dd.mm.yyyy\", sv: \"dd.mm.åååå\" }\n     */\n\n    this.placeholderDefaults = {\n      fi: \"pp.kk.vvvv\",\n      en: \"dd.mm.yyyy\",\n      sv: \"dd.mm.åååå\"\n    };\n    /**\n     * Hint text to display before the user types into the date picker input.\n     * @default { fi: \"pp.kk.vvvv\", en: \"dd.mm.yyyy\", sv: \"dd.mm.åååå\" }\n     */\n\n    this.placeholder = getLocaleString(this.placeholderDefaults, this.language);\n    /**\n     * If form input field has a placeholder text, and user types anything (causing the text to dissapear),\n     * settings this to true will \"echo\" it into the caption slot - this option will be false by default for the next few versions, but will eventually be true by default (scheduled for 4.30.0)\n     */\n\n    this.echoPlaceholder = false;\n    /**\n     * Makes the date picker input component disabled. This prevents users from being able to\n     * interact with the input, and conveys its inactive state to assistive technologies.\n     */\n\n    this.disabled = false;\n    /**\n     * Display the date picker input in error state along with an error message.\n     */\n\n    this.error = \"\";\n    /**\n     * Visually hide the label, but still show it to screen readers.\n     */\n\n    this.labelHidden = false;\n    /**\n     * Set whether the input is required or not. Please note that this is necessary for\n     * accessible inputs when the user is required to fill them. When using this property\n     * you need to also set “novalidate” attribute to your form element to prevent\n     * browser from displaying its own validation errors.\n     */\n\n    this.required = false;\n    /**\n     * Forces the opening direction of the calendar modal to be always left or right.\n     * This setting can be useful when the input is smaller than the opening date picker\n     * would be as by default the picker always opens towards right.\n     */\n\n    this.direction = \"right\";\n    /**\n     * Tooltip to display next to the label of the date picker input.\n     */\n\n    this.tooltip = \"\";\n    /**\n     * With direction setting you can force the tooltip to always open towards left\n     * or right instead of automatically determining the direction.\n     */\n\n    this.tooltipDirection = \"auto\";\n    /**\n     * Date value. Must be in IS0-8601 format: YYYY-MM-DD\n     */\n\n    this.value = \"\";\n    /**\n     * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD.\n     * This setting can be used alone or together with the max property.\n     */\n\n    this.min = \"\";\n    /**\n     * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD.\n     * This setting can be used alone or together with the min property.\n     */\n\n    this.max = \"\";\n\n    this.enableActiveFocus = () => {\n      this.focusTarget = \"day-button\";\n    };\n\n    this.disableActiveFocus = () => {\n      this.focusTarget = null;\n    };\n\n    this.toggleOpen = e => {\n      e.preventDefault();\n      this.open ? this.hide(false) : this.show();\n    };\n\n    this.handleBlur = event => {\n      event.stopPropagation();\n      this.duetBlur.emit({\n        component: \"duet-date-picker\"\n      });\n    };\n\n    this.handleFocus = event => {\n      event.stopPropagation();\n      this.duetFocus.emit({\n        component: \"duet-date-picker\"\n      });\n    };\n\n    this.handleTouchStart = event => {\n      const touch = event.changedTouches[0];\n      this.initialTouchX = touch.pageX;\n      this.initialTouchY = touch.pageY;\n    };\n\n    this.handleTouchMove = event => {\n      event.preventDefault();\n    };\n\n    this.handleTouchEnd = event => {\n      const touch = event.changedTouches[0];\n      const distX = touch.pageX - this.initialTouchX; // get horizontal dist traveled\n\n      const distY = touch.pageY - this.initialTouchY; // get vertical dist traveled\n\n      const threshold = 70;\n      const isHorizontalSwipe = Math.abs(distX) >= threshold && Math.abs(distY) <= threshold;\n      const isDownwardsSwipe = Math.abs(distY) >= threshold && Math.abs(distX) <= threshold && distY > 0;\n\n      if (isHorizontalSwipe) {\n        this.addMonths(distX < 0 ? 1 : -1);\n      } else if (isDownwardsSwipe) {\n        this.hide();\n        event.preventDefault();\n      }\n\n      this.initialTouchY = null;\n      this.initialTouchX = null;\n    };\n\n    this.handleNextMonthClick = event => {\n      event.preventDefault();\n      this.addMonths(1);\n    };\n\n    this.handlePreviousMonthClick = event => {\n      event.preventDefault();\n      this.addMonths(-1);\n    };\n\n    this.handleEscKey = createShortcuts({\n      Escape: () => this.hide(),\n      Esc: () => this.hide() // IE-specific\n\n    });\n    this.handleKeyboardNavigation = createShortcuts({\n      ArrowRight: () => this.addDays(1),\n      Right: () => this.addDays(1),\n      ArrowLeft: () => this.addDays(-1),\n      Left: () => this.addDays(-1),\n      ArrowDown: () => this.addDays(7),\n      Down: () => this.addDays(7),\n      ArrowUp: () => this.addDays(-7),\n      Up: () => this.addDays(-7),\n      Home: () => this.startOfWeek(),\n      End: () => this.endOfWeek(),\n      PageUp: () => this.addMonths(-1),\n      PageDown: () => this.addMonths(1),\n      \"Shift+PageUp\": () => this.addYears(-1),\n      \"Shift+PageDown\": () => this.addYears(1)\n    });\n\n    this.handleDaySelect = (_event, day) => {\n      const min = parseISODate(this.min);\n      const max = parseISODate(this.max);\n      this.determineValidity(day);\n\n      if (inRange(day, min, max)) {\n        this.setValue(day);\n        this.hide();\n      }\n    };\n\n    this.handleMonthSelect = e => {\n      this.setMonth(parseInt(e.target.value, 10));\n    };\n\n    this.handleYearSelect = e => {\n      this.setYear(parseInt(e.target.value, 10));\n    };\n\n    this.handleInputChange = e => {\n      this.inputValue = e.detail.value;\n      const parsed = parseDate(this.inputValue);\n      this.determineValidity(parsed);\n\n      if (parsed || this.inputValue === \"\") {\n        this.setValue(parsed);\n      }\n    };\n  }\n\n  updateValidity() {\n    this.determineValidity(parseISODate(this.value));\n  }\n\n  updateInternalValue() {\n    const parsedValue = parseISODate(this.value);\n    const parsedInputValue = parseDate(this.inputValue); // an invalid or empty value should clear the input\n\n    if (!parsedValue) {\n      this.inputValue = \"\";\n    } // but otherwise only update user's input if the new value is different to user's input\n    else if (!isEqual(parsedValue, parsedInputValue)) {\n      this.inputValue = printDate(parsedValue);\n    }\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n    this.determineValidity(parseISODate(this.value));\n    this.updateInternalValue();\n  }\n\n  componentDidUpdate() {\n    // we want to run this code _after_ render\n    // to ensure all elements are visible (and thus focusable)\n    // hence using componentDidUpdate\n    switch (this.focusTarget) {\n      case \"toggle-button\":\n        this.datePickerButton.focus();\n        this.focusTarget = null;\n        break;\n\n      case \"day-button\":\n        // we don't clear focusTarget here since this is cleared\n        // already when focus is moved out of calendar table\n        this.focusedDayNode.focus();\n        break;\n\n      case \"month-select\":\n        this.monthSelectNode.focus();\n        this.focusTarget = null;\n        break;\n    }\n  }\n  /**\n   * Sets focus on the date picker's input. Use this method instead of the global `focus()`.\n   */\n\n\n  setFocus(options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.datePickerInput.setFocus(options);\n    })();\n  }\n  /**\n   * Show the calendar modal, moving focus to the calendar inside.\n   */\n\n\n  show() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.open = true;\n      _this2.focusTarget = \"month-select\";\n\n      _this2.setFocusedDay(parseISODate(_this2.value) || new Date());\n    })();\n  }\n  /**\n   * Hide the calendar modal. Set `moveFocusToButton` to false to prevent focus\n   * returning to the date picker's button. Default is true.\n   */\n\n\n  hide(moveFocusToButton = true) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.open = false;\n\n      if (moveFocusToButton) {\n        _this3.focusTarget = \"toggle-button\";\n      }\n    })();\n  }\n\n  addDays(days) {\n    this.setFocusedDay(addDays(this.focusedDay, days));\n  }\n\n  addMonths(months) {\n    this.setMonth(this.focusedDay.getMonth() + months);\n  }\n\n  addYears(years) {\n    this.setYear(this.focusedDay.getFullYear() + years);\n  }\n\n  startOfWeek() {\n    this.setFocusedDay(startOfWeek(this.focusedDay));\n  }\n\n  endOfWeek() {\n    this.setFocusedDay(endOfWeek(this.focusedDay));\n  }\n\n  setMonth(month) {\n    const min = setMonth(startOfMonth(this.focusedDay), month);\n    const max = endOfMonth(min);\n    const date = setMonth(this.focusedDay, month);\n    this.setFocusedDay(clamp(date, min, max));\n  }\n\n  setYear(year) {\n    const min = setYear(startOfMonth(this.focusedDay), year);\n    const max = endOfMonth(min);\n    const date = setYear(this.focusedDay, year);\n    this.setFocusedDay(clamp(date, min, max));\n  }\n\n  setFocusedDay(day) {\n    this.focusedDay = clamp(day, parseISODate(this.min), parseISODate(this.max));\n  }\n\n  determineValidity(date) {\n    var _a, _b;\n\n    const inputValue = (_b = (_a = this.datePickerInput) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : \"\";\n    const badInput = inputValue !== \"\" && date == null;\n    const valueMissing = this.required && date == null;\n    const rangeOverflow = date ? !inRange(date, null, parseISODate(this.max)) : false;\n    const rangeUnderflow = date ? !inRange(date, parseISODate(this.min)) : false;\n    this.validity = {\n      patternMismatch: false,\n      customError: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing,\n      badInput,\n      rangeUnderflow,\n      rangeOverflow,\n      valid: !(valueMissing || badInput || rangeUnderflow || rangeOverflow)\n    };\n  }\n\n  setValue(date) {\n    const newValue = printISODate(date);\n\n    if (newValue === this.value) {\n      return;\n    }\n\n    this.value = newValue;\n    this.duetChange.emit({\n      component: \"duet-date-picker\",\n      value: this.value,\n      valueAsDate: date\n    });\n  }\n\n  handleDocumentClick(e) {\n    if (!this.open) {\n      return;\n    } // the dialog and the button aren't considered clicks outside.\n    // dialog for obvious reasons, but the button needs to be skipped\n    // so that two things are possible:\n    //\n    // a) clicking again on the button when dialog is open should close the modal.\n    //    without skipping the button here, we would see a click outside\n    //    _and_ a click on the button, so the `open` state goes\n    //    open -> close (click outside) -> open (click button)\n    //\n    // b) clicking another date picker's button should close the current calendar\n    //    and open the new one. this means we can't stopPropagation() on the button itself\n\n\n    const isClickOutside = e.composedPath().every(node => node !== this.dialogWrapperNode && node !== this.datePickerButton);\n\n    if (isClickOutside) {\n      this.hide(false);\n    }\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    const valueAsDate = parseISODate(this.value);\n    const selectedYear = (valueAsDate || this.focusedDay).getFullYear();\n    const focusedMonth = this.focusedDay.getMonth();\n    const focusedYear = this.focusedDay.getFullYear();\n    const text = i18n[this.language];\n    const minDate = parseISODate(this.min);\n    const maxDate = parseISODate(this.max);\n    const prevMonthDisabled = minDate != null && minDate.getMonth() === focusedMonth && minDate.getFullYear() === focusedYear;\n    const nextMonthDisabled = maxDate != null && maxDate.getMonth() === focusedMonth && maxDate.getFullYear() === focusedYear;\n    let minYear = selectedYear - 10;\n    let maxYear = selectedYear + 10;\n\n    if (minDate) {\n      minYear = Math.max(minYear, minDate.getFullYear());\n    }\n\n    if (maxDate) {\n      maxYear = Math.min(maxYear, maxDate.getFullYear());\n    }\n\n    return h(Host, {\n      class: {\n        \"duet-expand\": this.expand,\n        \"duet-m-0\": this.margin === \"none\"\n      }\n    }, h(\"div\", {\n      class: \"duet-date\"\n    }, h(DatePickerInput, {\n      value: this.value,\n      valueAsDate: valueAsDate,\n      formattedValue: this.inputValue,\n      language: this.language,\n      onInput: this.handleInputChange,\n      onBlur: this.handleBlur,\n      onFocus: this.handleFocus,\n      onClick: this.toggleOpen,\n      name: this.name,\n      disabled: this.disabled,\n      error: this.error,\n      role: this.role,\n      required: this.required,\n      theme: this.theme,\n      tooltip: this.tooltip,\n      tooltipDirection: this.tooltipDirection,\n      labelHidden: this.labelHidden,\n      placeholder: this.placeholder,\n      inputLabel: this.label,\n      identifier: this.identifier,\n      buttonRef: element => this.datePickerButton = element,\n      inputRef: element => this.datePickerInput = element,\n      accessibleActiveDescendant: this.accessibleActiveDescendant,\n      accessibleControls: this.accessibleControls,\n      accessibleOwns: this.accessibleOwns,\n      accessibleDescribedBy: this.accessibleDescribedBy,\n      echoPlaceholder: this.echoPlaceholder,\n      caption: this.caption\n    })), h(\"div\", {\n      class: {\n        \"duet-theme-turva\": this.theme === \"turva\",\n        \"duet-date-dialog\": true,\n        left: this.direction === \"left\",\n        error: !!this.error,\n        active: this.open\n      },\n      role: \"dialog\",\n      \"aria-modal\": \"true\",\n      \"aria-hidden\": this.open ? \"false\" : \"true\",\n      \"aria-labelledby\": this.dialogLabelId,\n      onTouchMove: this.handleTouchMove,\n      onTouchStart: this.handleTouchStart,\n      onTouchEnd: this.handleTouchEnd\n    }, h(FocusGuard, {\n      moveFocusTo: this.focusedDayNode\n    }), h(\"div\", {\n      class: \"duet-date-dialog-wrapper\",\n      onKeyDown: this.handleEscKey,\n      ref: element => this.dialogWrapperNode = element\n    }, h(\"duet-visually-hidden\", {\n      \"aria-live\": \"polite\"\n    }, text.keyboardInstruction), h(\"div\", {\n      class: \"duet-date-dialog-mobile-header\"\n    }, h(\"duet-label\", {\n      margin: \"none\"\n    }, this.label), h(\"button\", {\n      class: \"duet-date-picker-close\",\n      ref: element => this.closeButtonNode = element,\n      onClick: () => this.hide(),\n      type: \"button\"\n    }, h(\"duet-icon\", {\n      name: \"navigation-close-small\",\n      margin: \"none\",\n      color: \"currentColor\",\n      size: \"xx-small\"\n    }), h(\"duet-visually-hidden\", null, text.closeLabel))), h(\"div\", {\n      class: \"duet-date-dialog-header\"\n    }, h(\"div\", {\n      class: \"duet-date-dialog-dropdowns\"\n    }, h(\"duet-visually-hidden\", null, h(\"h2\", {\n      id: this.dialogLabelId,\n      \"aria-live\": \"polite\",\n      \"aria-atomic\": \"true\"\n    }, text.monthLabels[focusedMonth], \" \", this.focusedDay.getFullYear())), h(\"duet-visually-hidden\", null, h(\"label\", {\n      htmlFor: this.monthSelectId\n    }, text.monthSelectLabel)), h(\"div\", {\n      class: \"duet-date-dialog-select\"\n    }, h(\"select\", {\n      id: this.monthSelectId,\n      class: \"duet-date-month-select\",\n      ref: element => this.monthSelectNode = element,\n      onChange: this.handleMonthSelect\n    }, text.monthLabels.map((month, i) => h(\"option\", {\n      key: month,\n      value: i,\n      selected: i === focusedMonth,\n      disabled: !inRange(new Date(focusedYear, i, 1), minDate ? startOfMonth(minDate) : null, maxDate ? endOfMonth(maxDate) : null)\n    }, month))), h(\"div\", {\n      class: \"duet-date-dialog-select-label\",\n      \"aria-hidden\": \"true\"\n    }, h(\"span\", null, text.monthLabelsShort[focusedMonth]), h(\"duet-icon\", {\n      name: \"action-arrow-down-small\",\n      color: \"currentColor\",\n      margin: \"none\",\n      size: \"xxx-small\"\n    }))), h(\"duet-visually-hidden\", null, h(\"label\", {\n      htmlFor: this.yearSelectId\n    }, text.yearSelectLabel)), h(\"div\", {\n      class: \"duet-date-dialog-select\"\n    }, h(\"select\", {\n      id: this.yearSelectId,\n      class: \"duet-date-year-select\",\n      onChange: this.handleYearSelect\n    }, range(minYear, maxYear).map(year => h(\"option\", {\n      key: year,\n      selected: year === focusedYear\n    }, year))), h(\"div\", {\n      class: \"duet-date-dialog-select-label\",\n      \"aria-hidden\": \"true\"\n    }, h(\"span\", null, this.focusedDay.getFullYear()), h(\"duet-icon\", {\n      name: \"action-arrow-down-small\",\n      color: \"currentColor\",\n      margin: \"none\",\n      size: \"xxx-small\"\n    })))), h(\"div\", {\n      class: \"duet-date-dialog-buttons\"\n    }, h(\"button\", {\n      class: \"duet-date-dialog-prev\",\n      onClick: this.handlePreviousMonthClick,\n      disabled: prevMonthDisabled,\n      type: \"button\"\n    }, h(\"duet-icon\", {\n      name: \"action-arrow-left-small\",\n      color: \"currentColor\",\n      margin: \"none\",\n      size: \"xx-small\"\n    }), h(\"duet-visually-hidden\", null, text.prevMonthLabel)), h(\"button\", {\n      class: \"duet-date-dialog-next\",\n      onClick: this.handleNextMonthClick,\n      disabled: nextMonthDisabled,\n      type: \"button\"\n    }, h(\"duet-icon\", {\n      name: \"action-arrow-right-small\",\n      color: \"currentColor\",\n      margin: \"none\",\n      size: \"xx-small\"\n    }), h(\"duet-visually-hidden\", null, text.nextMonthLabel)))), h(DatePickerMonth, {\n      selectedDate: valueAsDate,\n      focusedDate: this.focusedDay,\n      onDateSelect: this.handleDaySelect,\n      onKeyboardNavigation: this.handleKeyboardNavigation,\n      labelledById: this.dialogLabelId,\n      language: this.language,\n      theme: this.theme,\n      min: minDate,\n      max: maxDate,\n      focusedDayRef: element => this.focusedDayNode = element,\n      onFocusEnter: this.enableActiveFocus,\n      onFocusExit: this.disableActiveFocus\n    })), h(FocusGuard, {\n      moveFocusTo: this.closeButtonNode\n    })));\n  }\n\n  get element() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"min\": [\"updateValidity\"],\n      \"max\": [\"updateValidity\"],\n      \"value\": [\"updateValidity\", \"updateInternalValue\"],\n      \"required\": [\"updateValidity\"]\n    };\n  }\n\n};\nDuetDatePicker.style = duetDatePickerCss;\nexport { DuetDatePicker as duet_date_picker };","map":null,"metadata":{},"sourceType":"module"}