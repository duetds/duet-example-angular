{"ast":null,"code":"import _asyncToGenerator from \"/Users/klaushougesen/_repos/consulting/lahi/github/duet-example-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Built with Duet Design System\n */\nimport { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-795979f3.js';\nimport { c as createID } from './create-id-981107da.js';\nimport { i as inheritGlobalTheme } from './themeable-component-572685dd.js';\nconst duetCheckboxCss = \"*.sc-duet-checkbox,*.sc-duet-checkbox::after,*.sc-duet-checkbox::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-checkbox-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-right:8px !important;margin-bottom:12px !important;display:inline-flex;width:100%;vertical-align:bottom;-webkit-tap-highlight-color:transparent}.sc-duet-checkbox-h:last-child,.sc-duet-checkbox-h:last-of-type{margin-right:0 !important}.sc-duet-checkbox-h:last-child:not(:only-child){margin-bottom:0 !important}.duet-m-0.sc-duet-checkbox-h{margin:0 !important}.duet-label.sc-duet-checkbox{position:relative;z-index:100;display:inline;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-size:1rem;font-weight:400;line-height:1.5;color:#00294d;vertical-align:top;cursor:pointer;background:transparent;transition:300ms ease}.duet-theme-turva.sc-duet-checkbox .duet-label.sc-duet-checkbox{font-family:\\\"turva-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";color:#171c3a}.duet-label.sc-duet-checkbox span.sc-duet-checkbox{display:inline-block;width:calc(100% - 32px);font-size:1rem;font-weight:400;vertical-align:top}.duet-checkbox-container.sc-duet-checkbox{position:relative;width:100%;height:100%}.duet-checkbox.sc-duet-checkbox{padding:14px !important;position:absolute;top:0;left:0;z-index:2;width:100%;height:100%;cursor:pointer;opacity:0}.duet-checkbox.sc-duet-checkbox+label.sc-duet-checkbox::before{z-index:100;display:inline-block;width:20px;height:20px;margin:2px 10px 1px 1px;vertical-align:top;content:\\\"\\\";background:white;border:1px solid #00294d;border-radius:4px}.duet-theme-turva.sc-duet-checkbox .duet-checkbox.sc-duet-checkbox+label.sc-duet-checkbox::before{border-color:#171c3a}.duet-checkbox.sc-duet-checkbox:checked+label.sc-duet-checkbox::before{background:#00294d;border:1px solid #00294d}.duet-theme-turva.sc-duet-checkbox .duet-checkbox.sc-duet-checkbox:checked+label.sc-duet-checkbox::before{background:#171c3a;border-color:#171c3a}.duet-checkbox.sc-duet-checkbox:focus+label.sc-duet-checkbox::before{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}.duet-theme-turva.sc-duet-checkbox .duet-checkbox.sc-duet-checkbox:focus+label.sc-duet-checkbox::before{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}.duet-checkbox.sc-duet-checkbox+label.sc-duet-checkbox{position:static}.duet-checkbox.sc-duet-checkbox:checked+label.sc-duet-checkbox::after{position:absolute;top:6px;left:5px;z-index:200;width:12px;height:12px;pointer-events:none;content:\\\"\\\";background:transparent url(\\\"data:image/svg+xml,%3Csvg%20fill%3D%27white%27%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20width%3D%2724%27%20height%3D%2724%27%20viewBox%3D%270%200%2024%2024%27%3E%3Cpath%20d%3D%27M23.374.287a1.5%2C1.5%2C0%2C0%2C0-2.093.345L7.246%2C20.2%2C2.561%2C15.511A1.5%2C1.5%2C0%2C1%2C0%2C.439%2C17.632l5.935%2C5.934a1.525%2C1.525%2C0%2C0%2C0%2C2.279-.186l15.066-21A1.5%2C1.5%2C0%2C0%2C0%2C23.374.287Z%27%20%2F%3E%3C%2Fsvg%3E\\\") no-repeat 0 0;background-size:100% auto}.duet-checkbox[disabled].sc-duet-checkbox{cursor:default}.duet-checkbox[disabled].sc-duet-checkbox+label.sc-duet-checkbox{color:#657787}.duet-theme-turva.sc-duet-checkbox .duet-checkbox[disabled].sc-duet-checkbox+label.sc-duet-checkbox{color:#747475}.duet-checkbox[disabled].sc-duet-checkbox+label.sc-duet-checkbox::before{border-color:#cfd2d4}.duet-theme-turva.sc-duet-checkbox .duet-checkbox[disabled].sc-duet-checkbox+label.sc-duet-checkbox::before{border-color:#cfcfd1}.duet-checkbox[disabled].sc-duet-checkbox:checked+label.sc-duet-checkbox::before{background:#657787;border:1px solid #657787}.duet-theme-turva.sc-duet-checkbox .duet-checkbox[disabled].sc-duet-checkbox:checked+label.sc-duet-checkbox::before{background:#747475;border-color:#747475}.duet-label-hidden.sc-duet-checkbox .duet-label.sc-duet-checkbox span.sc-duet-checkbox{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0 0 0 0);border:0}\";\nlet DuetCheckbox = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.duetChange = createEvent(this, \"duetChange\", 3);\n    this.duetFocus = createEvent(this, \"duetFocus\", 7);\n    this.duetBlur = createEvent(this, \"duetBlur\", 7);\n    /**\n     * Own Properties.\n     */\n\n    this.checkboxId = createID(\"DuetCheckbox\");\n    /**\n     * Controls the margin of the component.\n     */\n\n    this.margin = \"auto\";\n    /**\n     * Set whether the input is required or not. Please note that this is required for\n     * accessible inputs when the user is required to fill them. When using this property\n     * you need to also set “novalidate” attribute to your form element to prevent\n     * browser from displaying its own validation errors.\n     */\n\n    this.required = false;\n    /**\n     * Theme of the checkbox.\n     */\n\n    this.theme = \"\";\n    /**\n     * Makes the checkbox component disabled. This prevents users from being able to\n     * interact with the checkbox, and conveys its inactive state to assistive technologies.\n     */\n\n    this.disabled = false;\n    /**\n     * Label for the checkbox\n     */\n\n    this.label = \"label\";\n    /**\n     * Visually hide the label, but still show it to screen readers.\n     */\n\n    this.labelHidden = false;\n    /**\n     * Check state of the checkbox.\n     */\n\n    this.checked = false;\n    /**\n     * Component event handling.\n     */\n\n    this.onChange = ev => {\n      this.checked = !this.checked;\n      this.duetChange.emit({\n        originalEvent: ev,\n        checked: this.checked,\n        value: this.value,\n        component: \"duet-checkbox\"\n      });\n    };\n\n    this.onBlur = ev => {\n      this.duetBlur.emit({\n        originalEvent: ev,\n        checked: this.checked,\n        value: this.value,\n        component: \"duet-checkbox\"\n      });\n    };\n\n    this.onFocus = ev => {\n      this.duetFocus.emit({\n        originalEvent: ev,\n        checked: this.checked,\n        value: this.value,\n        component: \"duet-checkbox\"\n      });\n    };\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n\n    if (this.value === undefined) {\n      this.value = this.identifier;\n    }\n  }\n  /**\n   * Sets focus on the specified `duet-checkbox`. Use this method instead of the global\n   * `input.focus()`.\n   */\n\n\n  setFocus(options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.nativeInput.focus(options);\n    })();\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    const identifier = this.identifier || this.checkboxId;\n    return h(Host, {\n      class: {\n        \"duet-m-0\": this.margin === \"none\"\n      }\n    }, h(\"div\", {\n      class: {\n        \"duet-checkbox-container\": true,\n        \"duet-label-hidden\": this.labelHidden,\n        \"duet-theme-turva\": this.theme === \"turva\"\n      }\n    }, h(\"input\", {\n      ref: input => this.nativeInput = input,\n      type: \"checkbox\",\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onChange: this.onChange,\n      value: this.value,\n      class: {\n        \"duet-checkbox\": true,\n        disabled: this.disabled\n      },\n      checked: this.checked,\n      disabled: this.disabled,\n      tabindex: this.accessibleIndex,\n      \"aria-controls\": this.accessibleControls,\n      \"aria-activedescendant\": this.accessibleActiveDescendant,\n      \"aria-owns\": this.accessibleOwns,\n      \"aria-describedby\": this.accessibleDescribedBy,\n      required: this.required,\n      role: this.role,\n      name: this.name,\n      id: identifier\n    }), h(\"label\", {\n      class: \"duet-label\",\n      htmlFor: identifier\n    }, h(\"span\", null, this.label))));\n  }\n\n  get element() {\n    return getElement(this);\n  }\n\n};\nDuetCheckbox.style = duetCheckboxCss;\nexport { DuetCheckbox as duet_checkbox };","map":null,"metadata":{},"sourceType":"module"}