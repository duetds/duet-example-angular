{"ast":null,"code":"import _asyncToGenerator from \"/Users/klaushougesen/_repos/consulting/lahi/github/duet-example-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Built with Duet Design System\n */\nimport { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-795979f3.js';\nimport { f as formSearch } from './form-search-ea8e19ae.js';\nimport { c as createID } from './create-id-981107da.js';\nimport { c as cleanValue, r as resetCursor } from './input-utils-f4cafee1.js';\nimport { i as inheritGlobalTheme } from './themeable-component-572685dd.js';\nvar formEmail = {\n  \"title\": \"form-email\",\n  \"tags\": \"form email\",\n  \"svg\": \"<svg fill=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" role=\\\"img\\\"><path d=\\\"M12 23.999c-3.205 0-6.218-1.248-8.484-3.514S.001 15.206.001 12.001s1.248-6.218 3.514-8.485C5.782 1.25 8.795.001 12 .001s6.218 1.248 8.485 3.514A11.92 11.92 0 0 1 24 12v2.25A3.754 3.754 0 0 1 20.25 18a3.77 3.77 0 0 1-3.48-2.365A6.009 6.009 0 0 1 12 18c-3.308 0-6-2.692-6-6s2.692-6 6-6 6 2.692 6 6v2.25c0 1.241 1.009 2.25 2.25 2.25s2.25-1.009 2.25-2.25V12c0-2.804-1.092-5.441-3.075-7.424A10.433 10.433 0 0 0 12 1.501c-2.804 0-5.441 1.092-7.424 3.075S1.501 9.196 1.501 12c0 2.805 1.092 5.441 3.075 7.424s4.619 3.074 7.423 3.074c2.257 0 4.494-.746 6.299-2.1a.749.749 0 1 1 .9 1.199A12.049 12.049 0 0 1 12 23.999zM12 7.5c-2.481 0-4.5 2.019-4.5 4.5s2.019 4.5 4.5 4.5 4.5-2.019 4.5-4.5-2.019-4.5-4.5-4.5z\\\"/></svg>\"\n};\nconst duetInputCss = \"*.sc-duet-input,*.sc-duet-input::after,*.sc-duet-input::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-input-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-right:16px !important;margin-bottom:12px !important;display:inline-flex;width:100%;min-width:calc(33.333% - 8px);max-width:100%;text-align:left;vertical-align:bottom}.sc-duet-input-h:last-child,.sc-duet-input-h:last-of-type{margin-right:0 !important}@media (min-width: 36em){.sc-duet-input-h{width:calc(50% - 16px - 3px)}}.duet-expand.sc-duet-input-h{width:100% !important}.duet-m-0.sc-duet-input-h{margin:0 !important}duet-tooltip.sc-duet-input{position:absolute;top:12px;right:0}@media (min-width: 48em){duet-tooltip.sc-duet-input{position:relative;top:4px;right:auto}}duet-caption.sc-duet-input:not(:last-of-type){margin-bottom:0}.duet-input-placeholder.sc-duet-input{position:absolute;top:-9px;left:9px;z-index:200;display:block;width:auto;max-width:60%;padding:0 0.25rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;background:white}.duet-input-icon.sc-duet-input{position:absolute;top:50%;right:16px;z-index:200;width:20px;height:20px;font-size:0;line-height:normal;color:#00294d;pointer-events:none;transform:translateY(-50%)}.duet-theme-turva.sc-duet-input .duet-input-icon.sc-duet-input{color:#171c3a}.duet-input-container.sc-duet-input{position:relative;width:100%;height:100%}.duet-input.sc-duet-input{position:relative;z-index:100;display:block !important;width:100% !important;min-width:8rem;max-width:initial !important;height:auto !important;padding:12px 14px !important;margin:initial !important;margin-bottom:initial !important;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-size:1rem;font-weight:400 !important;font-variant-numeric:tabular-nums;line-height:1.5 !important;color:#00294d !important;cursor:initial !important;background:white !important;background-clip:initial !important;border:1px solid #909599 !important;border-radius:4px !important;box-shadow:initial !important;transition:box-shadow 150ms ease, border 150ms ease !important}.duet-input.is-number.sc-duet-input{padding-right:112px !important}.duet-input.is-date.sc-duet-input{padding-right:64px !important}.has-error.sc-duet-input .duet-input.sc-duet-input{border-color:#de2362 !important}.has-error.sc-duet-input .duet-input.sc-duet-input+.duet-input-icon.sc-duet-input{color:#de2362 !important}.duet-theme-turva.has-error.sc-duet-input .duet-input.sc-duet-input{border-color:#e02a0d !important}.duet-theme-turva.has-error.sc-duet-input .duet-input.sc-duet-input+.duet-input-icon.sc-duet-input{color:#e02a0d !important}.has-icon.sc-duet-input .duet-input.sc-duet-input{padding-right:48px !important}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input{font-family:\\\"turva-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";color:#171c3a !important;border-color:#747475 !important}.duet-input.sc-duet-input::-ms-clear{display:none}.duet-input.sc-duet-input::-webkit-contacts-auto-fill-button{display:none !important}.duet-input.sc-duet-input::-webkit-input-placeholder{color:#657787;opacity:1 !important;transition:color 300ms ease}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input::-webkit-input-placeholder{color:#747475}.duet-input.sc-duet-input:focus::-webkit-input-placeholder{color:#cfd2d4}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input:focus::-webkit-input-placeholder{color:#cfcfd1}.duet-input.sc-duet-input::-moz-placeholder{color:#657787;opacity:1 !important}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input::-moz-placeholder{color:#747475}.duet-input.sc-duet-input:focus::-moz-placeholder{color:#cfd2d4}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input:focus::-moz-placeholder{color:#cfcfd1}.duet-input.sc-duet-input:-ms-input-placeholder{color:#657787}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input:-ms-input-placeholder{color:#747475}.duet-input.sc-duet-input:focus:-ms-input-placeholder{color:#cfd2d4}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input:focus:-ms-input-placeholder{color:#cfcfd1}.duet-input[disabled].sc-duet-input{color:#00294d !important;cursor:text !important;background:#f5f8fa !important;border-color:#f5f8fa !important;box-shadow:none !important;opacity:1 !important;-webkit-text-fill-color:#00294d !important}.duet-theme-turva.sc-duet-input .duet-input[disabled].sc-duet-input{color:#171c3a !important;background:#f5f5f7 !important;border-color:#f5f5f7 !important;-webkit-text-fill-color:#171c3a !important}.duet-input.sc-duet-input:hover:not(:disabled){box-shadow:0 0 0 1px #909599 !important}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input:hover:not(:disabled){box-shadow:0 0 0 1px #747475 !important}.has-error.sc-duet-input .duet-input.sc-duet-input:hover:not(:disabled){box-shadow:0 0 0 1px #de2362}.duet-theme-turva.has-error.sc-duet-input .duet-input.sc-duet-input:hover:not(:disabled){box-shadow:0 0 0 1px #e02a0d}.duet-input.sc-duet-input:focus{border-color:#0077b3 !important;outline:0;box-shadow:0 0 0 1px #0077b3 !important;transition:none}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input:focus{border-color:#171c3a !important;box-shadow:0 0 0 1px #171c3a !important}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input:focus+.duet-input-icon.sc-duet-input{color:#171c3a}.has-error.sc-duet-input .duet-input.sc-duet-input:focus{box-shadow:0 0 0 1px #de2362}.duet-theme-turva.has-error.sc-duet-input .duet-input.sc-duet-input:focus{box-shadow:0 0 0 1px #e02a0d}.duet-input.sc-duet-input:focus+.duet-input-icon.sc-duet-input{color:#0077b3}.duet-input[type=search].sc-duet-input:not(:placeholder-shown):focus+.duet-input-icon.sc-duet-input{display:none}.duet-input.sc-duet-input:not(:focus):not(:hover):invalid{box-shadow:none !important}.duet-input[type=number].sc-duet-input::-webkit-inner-spin-button,.duet-input[type=number].sc-duet-input::-webkit-outer-spin-button,.duet-input[type=time].sc-duet-input::-webkit-inner-spin-button,.duet-input[type=time].sc-duet-input::-webkit-outer-spin-button{display:none;margin:0;-webkit-appearance:none}.duet-input.sc-duet-input::-webkit-search-cancel-button{margin-right:-28px}.duet-input-help.sc-duet-input{display:block;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-size:0.875rem;font-weight:400;line-height:1.25;color:#657787;border-radius:4px}.duet-input-help.sc-duet-input span.sc-duet-input{display:block;margin-top:8px}.duet-theme-turva.sc-duet-input .duet-input-help.sc-duet-input{font-family:\\\"turva-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";color:#747475}.has-error.sc-duet-input .duet-input-help.sc-duet-input{color:#de2362}.duet-theme-turva.has-error.sc-duet-input .duet-input-help.sc-duet-input{color:#e02a0d}.duet-label-hidden.sc-duet-input duet-label.sc-duet-input{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0 0 0 0);border:0}.duet-input-relative.sc-duet-input{position:relative;width:100%}\";\nconst icons = {\n  search: formSearch,\n  email: formEmail\n};\nlet DuetInput = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.duetInput = createEvent(this, \"duetInput\", 7);\n    this.duetChange = createEvent(this, \"duetChange\", 3);\n    this.duetBlur = createEvent(this, \"duetBlur\", 7);\n    this.duetFocus = createEvent(this, \"duetFocus\", 7);\n    /**\n     * Own Properties\n     */\n\n    this.inputId = createID(\"DuetInput\");\n    this.labelId = createID(\"DuetLabel\");\n    this.topCaptionId = createID(\"DuetCaptionTop\");\n    this.topCaptionPlaceholderId = createID(\"DuetCaptionPlaceholderTop\");\n    this.errorId = createID(\"DuetError\");\n    this.disallowPatternRegex = null;\n    /**\n     * Set the amount of time, in milliseconds, to wait to trigger the duetChange\n     * event after each keystroke.\n     */\n\n    this.debounce = 0;\n    /**\n     * If form input field has a placeholder text, and user types anything (causing the placeholder text to disappear),\n     * settings this to true will \"echo\" it into the caption slot - this option will be false by default for the next few versions, but will eventually be true by default (scheduled for 4.30.0)\n     */\n\n    this.echoPlaceholder = false;\n    /**\n     * Theme of the input.\n     */\n\n    this.theme = \"\";\n    /**\n     * Expands the input to fill 100% of the container width.\n     */\n\n    this.expand = false;\n    /**\n     * Makes the input component disabled. This prevents users from being able to\n     * interact with the input, and conveys its inactive state to assistive technologies.\n     */\n\n    this.disabled = false;\n    /**\n     * Controls the margin of the component.\n     */\n\n    this.margin = \"auto\";\n    /**\n     * Set whether the input is required or not. Please note that this is necessary for\n     * accessible inputs when the user is required to fill them. When using this property\n     * you need to also set “novalidate” attribute to your form element to prevent\n     * browser from displaying its own validation errors.\n     */\n\n    this.required = false;\n    /**\n     * Type of the input.\n     */\n\n    this.type = \"text\";\n    /**\n     * Label for the input.\n     */\n\n    this.label = \"label\";\n    /**\n     * Display the input in error state along with an error message.\n     */\n\n    this.error = \"\";\n    /**\n     * Visually hide the label, but still show it to screen readers.\n     */\n\n    this.labelHidden = false;\n    /**\n     * Enable numeric keyboard for the input.\n     */\n\n    this.numericKeyboard = false;\n    /**\n     * Used internally in Duet to adjust whether this component acts as e.g. number input.\n     */\n\n    this.component = \"input\";\n    /**\n     * Enable or disable automatic completion by the browser\n     */\n\n    this.autoComplete = \"on\";\n    /**\n     * A regular expression that matches any characters which should be *disallowed*.\n     * This differs from `pattern`, as it actively prevents users entering any characters which match the regular expression.\n     * e.g. the following will disallow any non-numeric characters `[^0-9]`\n     */\n\n    this.disallowPattern = null;\n    /**\n     * Tooltip to display next to the label of the input.\n     */\n\n    this.tooltip = \"\";\n    /**\n     * With direction setting you can force the tooltip to always open towards left\n     * or right instead of automatically determining the direction.\n     */\n\n    this.tooltipDirection = \"auto\";\n    /**\n     * Component event handling.\n     */\n\n    this.onInput = ev => {\n      if (this.disallowPatternRegex) {\n        cleanValue(this.nativeInput, this.disallowPatternRegex);\n      }\n\n      this.value = this.nativeInput.value || \"\";\n      this.duetInput.emit({\n        originalEvent: ev,\n        value: this.value,\n        component: \"duet-input\"\n      });\n    };\n\n    this.onBlur = ev => {\n      this.duetBlur.emit({\n        originalEvent: ev,\n        value: this.value,\n        component: \"duet-input\"\n      });\n    };\n\n    this.onFocus = ev => {\n      this.duetFocus.emit({\n        originalEvent: ev,\n        value: this.value,\n        component: \"duet-input\"\n      });\n    };\n  }\n\n  disallowedPatternChange() {\n    this.disallowPatternRegex = this.disallowPattern ? new RegExp(this.disallowPattern, \"g\") : null;\n  }\n\n  valueChanged() {\n    var _a;\n\n    if (((_a = this === null || this === void 0 ? void 0 : this.nativeInput) === null || _a === void 0 ? void 0 : _a.value) !== this.value) {\n      const restoreCursor = resetCursor(this.nativeInput);\n      this.nativeInput.value = this.value; // restore selection position after having set value\n      // (in webkit based browsers settings value trigger cursor position and will set it to EndOfText)\n\n      restoreCursor();\n    }\n\n    this.isCaptionVisible = !!this.caption;\n\n    const emitEvent = () => this.duetChange.emit({\n      value: this.value,\n      component: \"duet-input\"\n    });\n\n    if (this.debounce === 0) {\n      emitEvent();\n    } else {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = setTimeout(emitEvent, this.debounce);\n    }\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n    this.disallowedPatternChange();\n    this.isCaptionVisible = !!this.caption;\n  }\n  /**\n   * Sets focus on the specified `duet-input`. Use this method instead of the global\n   * `input.focus()`.\n   */\n\n\n  setFocus(options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.nativeInput) {\n        _this.nativeInput.focus(options);\n      }\n    })();\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    const identifier = this.identifier || this.inputId;\n    const inputProps = {};\n\n    if (this.numericKeyboard) {\n      inputProps.inputmode = \"numeric\";\n    } // Set validation regexes\n\n\n    if (this.pattern && this.type !== \"tel\") {\n      inputProps.pattern = this.pattern;\n    } else if (!this.pattern && this.type === \"tel\") {\n      inputProps.pattern = \"[0-9+ ]+\";\n    }\n\n    return h(Host, {\n      class: {\n        \"duet-expand\": this.expand,\n        \"duet-m-0\": this.margin === \"none\"\n      }\n    }, h(\"div\", {\n      class: {\n        \"duet-input-container\": true,\n        \"duet-theme-turva\": this.theme === \"turva\",\n        \"duet-label-hidden\": this.labelHidden,\n        \"duet-input-top-caption-shown\": this.isCaptionVisible,\n        \"has-icon\": !!this.icon || this.type !== \"text\" && this.type !== \"tel\" && this.type !== \"password\",\n        \"has-error\": !!this.error\n      }\n    }, h(\"duet-label\", {\n      theme: this.theme === \"turva\" ? \"turva\" : \"default\",\n      class: {\n        \"duet-has-tooltip\": !!this.tooltip\n      },\n      margin: this.isCaptionVisible ? \"small\" : \"auto\",\n      id: this.labelId,\n      for: identifier\n    }, this.label), this.tooltip && h(\"duet-tooltip\", {\n      direction: this.tooltipDirection,\n      accessibleInputLabel: this.label\n    }, this.tooltip), this.caption && h(\"duet-caption\", {\n      id: this.topCaptionId,\n      size: \"medium\"\n    }, this.caption), h(\"div\", {\n      class: \"duet-input-relative\"\n    }, this.placeholder && this.echoPlaceholder && this.value && h(\"duet-caption\", {\n      id: this.topCaptionPlaceholderId,\n      class: \"duet-input-placeholder\",\n      margin: \"none\",\n      size: \"small\"\n    }, this.placeholder), h(\"input\", Object.assign({\n      ref: input => this.nativeInput = input,\n      onInput: this.onInput,\n      onBlur: this.onBlur,\n      onFocus: this.onFocus,\n      type: this.type,\n      class: {\n        \"duet-input\": true,\n        disabled: this.disabled,\n        \"is-number\": this.component === \"number\",\n        \"is-date\": this.component === \"date\"\n      },\n      value: this.value,\n      disabled: this.disabled,\n      \"aria-invalid\": this.error ? \"true\" : \"false\",\n      \"aria-labelledby\": `${this.labelId} ${this.errorId}`,\n      \"aria-controls\": this.accessibleControls,\n      \"aria-autocomplete\": this.accessibleAutocomplete,\n      \"aria-activedescendant\": this.accessibleActiveDescendant,\n      \"aria-owns\": this.accessibleOwns,\n      \"aria-describedby\": `${this.isCaptionVisible ? this.topCaptionId : \"\"} ${this.accessibleDescribedBy}`,\n      placeholder: this.placeholder,\n      spellcheck: \"false\",\n      minlength: this.minlength,\n      maxlength: this.maxlength,\n      autocomplete: this.autoComplete,\n      required: this.required,\n      role: this.role,\n      name: this.name,\n      id: identifier\n    }, inputProps)), !this.icon && this.type !== \"text\" && this.type !== \"tel\" && this.type !== \"password\" && h(\"div\", {\n      class: \"duet-input-icon\"\n    }, h(\"duet-icon\", {\n      margin: \"none\",\n      size: \"small\",\n      icon: icons[this.type].svg,\n      color: \"currentColor\"\n    })), this.icon && h(\"div\", {\n      class: \"duet-input-icon\"\n    }, h(\"duet-icon\", {\n      margin: \"none\",\n      size: \"small\",\n      name: this.icon,\n      color: \"currentColor\"\n    })), h(\"slot\", null)), h(\"span\", {\n      class: \"duet-input-help\",\n      id: this.errorId,\n      \"aria-live\": \"assertive\",\n      \"aria-relevant\": \"additions removals\"\n    }, this.error && h(\"span\", {\n      class: \"duet-input-error\"\n    }, this.error))));\n  }\n\n  get element() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"disallowPattern\": [\"disallowedPatternChange\"],\n      \"value\": [\"valueChanged\"]\n    };\n  }\n\n};\nDuetInput.style = duetInputCss;\nconst duetLabelCss = \"*.sc-duet-label,*.sc-duet-label::after,*.sc-duet-label::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-label-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-bottom:12px !important;position:relative;z-index:100;display:inline-flex;width:auto;margin-top:8px !important;line-height:1.25;cursor:default}.duet-p-0.sc-duet-label-h{padding:0 !important}.duet-m-0.sc-duet-label-h{margin:0 !important}.duet-m-0.sc-duet-label-h{margin-bottom:0 !important}.duet-small-margin.sc-duet-label-h{margin-top:8px !important;margin-bottom:4px !important}.duet-has-tooltip.sc-duet-label-h{padding-right:48px}@media (min-width: 48em){.duet-has-tooltip.sc-duet-label-h{padding-right:0}}label.sc-duet-label{margin:0;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-size:1rem;font-weight:600 !important;line-height:1.25;color:#00294d;text-align:left;word-break:break-word}label.sc-duet-label span.sc-duet-label{font-size:1rem;font-weight:600 !important;word-break:break-word}.duet-label-small.sc-duet-label-h label.sc-duet-label{font-size:0.875rem}.duet-label-small.sc-duet-label-h label.sc-duet-label span.sc-duet-label{font-size:0.875rem}.duet-theme-turva.sc-duet-label-h label.sc-duet-label{font-family:\\\"turva-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";color:#171c3a}\";\nlet DuetLabel = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * Theme of the label.\n     */\n\n    this.theme = \"\";\n    /**\n     * Controls the margin of the component.\n     */\n\n    this.margin = \"auto\";\n    /**\n     * Controls the size of the label.\n     */\n\n    this.size = \"medium\";\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    return h(Host, {\n      class: {\n        \"duet-label\": true,\n        \"duet-label-small\": this.size === \"small\",\n        \"duet-theme-turva\": this.theme === \"turva\",\n        \"duet-small-margin\": this.margin === \"small\",\n        \"duet-m-0\": this.margin === \"none\"\n      }\n    }, h(\"label\", {\n      htmlFor: this.for\n    }, h(\"span\", null, h(\"slot\", null))));\n  }\n\n};\nDuetLabel.style = duetLabelCss;\nexport { DuetInput as duet_input, DuetLabel as duet_label };","map":null,"metadata":{},"sourceType":"module"}