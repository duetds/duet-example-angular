{"ast":null,"code":"import _asyncToGenerator from \"/Users/klaushougesen/_repos/consulting/lahi/github/duet-example-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Built with Duet Design System\n */\nimport { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-eb374972.js';\nimport { D as DuetStringsExternalDefaults } from './common-strings-97e04e4b.js';\nimport { a as getLanguage, g as getLocaleString } from './language-utils-344d894c.js';\nimport { i as inheritGlobalTheme } from './themeable-component-572685dd.js';\nimport { g as getColorByName } from './token-utils-75f78ca4.js';\nimport './string-utils-2f1793b8.js';\nimport './tokens.module-49cbf963.js';\nconst duetButtonCss = \"*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-right:8px !important;margin-bottom:12px !important;position:relative;z-index:1;display:inline-flex;width:auto;max-width:100%;vertical-align:bottom;-webkit-tap-highlight-color:transparent}:host:last-child,:host:last-of-type{margin-right:0 !important}@media (max-width: 35.9375em){:host{width:100%}}:host(.duet-small){margin-right:2px !important;margin-bottom:8px !important}:host(.duet-small):last-child,:host(.duet-small):last-of-type{margin-right:0 !important}@media (max-width: 35.9375em){:host(.duet-small){width:auto}}:host(.duet-expand){width:100% !important}:host(.duet-m-0){margin:0 !important}:host(.duet-fixed){width:auto !important}:host(:last-child){margin-right:0 !important}.duet-button-container{position:relative;width:100%}.duet-button{padding:14px 27px 15px !important;-webkit-user-select:none;user-select:none;position:relative;z-index:100;display:block;width:100%;min-width:8rem;font-family:\\\"localtapiola-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";font-size:1rem;font-weight:600;font-variant-numeric:tabular-nums;-webkit-hyphens:auto;hyphens:auto;line-height:1.1;color:#0077b3 !important;text-align:center;text-decoration:none;cursor:pointer;background:transparent;border-style:solid;border-width:2px;border-radius:20rem;transition:background-color 300ms ease, color 300ms ease, border 300ms ease, box-shadow 300ms ease}.duet-button.duet-p-0{padding:0 !important}.duet-button.duet-m-0{margin:0 !important}.duet-button.duet-button-is-small:not(.duet-button-icon-only){padding:9px 19px 10px !important;min-width:5.3333333333rem;font-size:0.875rem}.duet-button.duet-button-is-small:not(.duet-button-icon-only).icon{padding-left:48px !important}.duet-button.duet-button-is-small:not(.duet-button-icon-only).icon-right{padding-right:48px !important;padding-left:20px !important}.duet-theme-turva .duet-button{font-family:\\\"turva-sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";color:#c60c30 !important}.duet-button .duet-button-contents{position:relative;display:inline-block;margin:0 auto;pointer-events:none}.duet-button.duet-no-wrap{white-space:nowrap}.duet-button.icon{padding-left:52px !important}.duet-button.icon-right{padding-right:52px !important;padding-left:28px !important}.duet-button svg{width:100%;min-width:100%;fill:currentColor}.duet-button .duet-button-icon{position:absolute;top:50%;left:-28px;display:flex;align-items:center;justify-content:center;width:16px;height:16px;margin:0 !important;transform:translateY(-50%)}.duet-button .duet-button-icon duet-icon{width:16px;height:16px}.duet-button .duet-button-icon.right{right:-28px;left:auto}.duet-button .duet-button-icon.large{left:-32px;width:20px;height:20px}.duet-button .duet-button-icon.large duet-icon{width:20px;height:20px}.duet-button .duet-button-icon.large.right{right:-32px;left:auto}.duet-button .duet-button-icon.medium-small{left:-16px;width:10px;height:10px;padding-top:1px}.duet-button .duet-button-icon.medium-small duet-icon{width:10px;height:10px}.duet-button .duet-button-icon.medium-small.right{right:-16px;left:auto}.duet-button .duet-button-icon.small{left:-16px;width:7px;height:7px}.duet-button .duet-button-icon.small duet-icon{width:7px;height:7px}.duet-button .duet-button-icon.small.right{right:-16px;left:auto}.duet-button:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}.duet-theme-turva .duet-button:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}.duet-button:active{opacity:0.75;transition:none}.duet-button.default{border-color:#e1e3e6}.duet-theme-turva .duet-button.default{color:#c60c30 !important;border-color:#e4e4e6}.duet-button.default:hover{border-color:#0077b3}.duet-theme-turva .duet-button.default:hover{border-color:#c60c30}.duet-button.default.duet-button-negative{background-color:white}.duet-theme-turva .duet-button.default.duet-button-negative{background-color:#e4e4e6 !important}.duet-button.default.duet-button-negative:hover{color:#0077b3 !important;border-color:#0077b3}.duet-theme-turva .duet-button.default.duet-button-negative:hover{color:#c60c30 !important;border-color:#c60c30}.duet-button.primary{color:white !important;background:#0077b3;border-color:#0077b3}.duet-theme-turva .duet-button.primary{color:white !important;background:#c60c30;border-color:#c60c30}.duet-button.primary:hover{background:#005f8f;border-color:#005f8f;box-shadow:0 4px 20px rgba(34, 34, 34, 0.1)}.duet-theme-turva .duet-button.primary:hover{background:#940925;border-color:#940925}.duet-button.primary:focus{outline:0;box-shadow:0 0 0 1px white, 0 0 0 4px rgba(0, 119, 179, 0.75)}.duet-theme-turva .duet-button.primary:focus{box-shadow:0 0 0 1px white, 0 0 0 4px rgba(23, 28, 58, 0.7)}.duet-button.secondary{color:#00294d !important;background:transparent;border-color:#00294d}.duet-theme-turva .duet-button.secondary{color:#171c3a !important;border-color:#171c3a}.duet-button.secondary:hover{color:#0077b3 !important;border-color:#0077b3}.duet-theme-turva .duet-button.secondary:hover{color:#c60c30 !important;border-color:#c60c30}.duet-button.secondary.duet-button-negative{color:#e1e3e6 !important;border-color:white}.duet-theme-turva .duet-button.secondary.duet-button-negative{color:#e4e4e6 !important}.duet-button.secondary.duet-button-negative:hover{color:#0077b3 !important;border-color:#0077b3}.duet-theme-turva .duet-button.secondary.duet-button-negative:hover{color:#c60c30 !important;border-color:#c60c30}.duet-button.negative{color:#00294d !important;background:white;border-color:white}.duet-theme-turva .duet-button.negative{color:#171c3a !important}.duet-button.negative:hover{color:white !important;background:transparent;border-color:white}.duet-button.negative:focus{outline:0;box-shadow:0 0 0 1px #00294d, 0 0 0 4px rgba(255, 255, 255, 0.7)}.duet-theme-turva .duet-button.negative:focus{box-shadow:0 0 0 1px #171c3a, 0 0 0 4px rgba(255, 255, 255, 0.7)}.duet-button.destructive-primary{color:white !important;background:#de2362;border-color:#de2362}.duet-theme-turva .duet-button.destructive-primary{color:white !important;background:#e02a0d;border-color:#e02a0d}.duet-button.destructive-primary:hover{background:#b21c4e;border-color:#b21c4e;box-shadow:0 4px 20px rgba(34, 34, 34, 0.1)}.duet-theme-turva .duet-button.destructive-primary:hover{background:#b3220a}.duet-button.destructive,.duet-button.destructive-secondary{color:#de2362 !important;background:white;border-color:#de2362}.duet-theme-turva .duet-button.destructive,.duet-theme-turva .duet-button.destructive-secondary{color:#e02a0d !important;background:white;border-color:#e02a0d}.duet-button.destructive:hover,.duet-button.destructive-secondary:hover{color:white !important;background:#b21c4e;border-color:#b21c4e}.duet-theme-turva .duet-button.destructive:hover,.duet-theme-turva .duet-button.destructive-secondary:hover{color:white !important;background:#b3220a;border-color:#b3220a}.duet-button.plain{min-width:48px;padding-right:0 !important;padding-left:0 !important;line-height:1.5;text-align:left;background:transparent;border:0;border-color:transparent;border-radius:4px}.duet-theme-turva .duet-button.plain{color:#c60c30 !important;background:transparent;border-color:transparent}.duet-button.plain.icon{padding-left:20px !important}.duet-button.plain.icon.icon-right{padding-right:20px !important;padding-left:0 !important}.duet-button.plain.icon.medium{padding-left:24px !important}.duet-button.plain.icon.medium.icon-right{padding-right:24px !important;padding-left:0 !important}.duet-button.plain.icon.large{padding-left:30px !important}.duet-button.plain.icon.large.icon-right{padding-right:30px !important;padding-left:0 !important}.duet-button.plain .duet-button-icon.left{left:-16.6666666667px !important}.duet-button.plain .duet-button-icon.left.medium{left:-24px !important}.duet-button.plain .duet-button-icon.left.large{left:-30px !important}.duet-button.plain .duet-button-icon.right{right:-16.6666666667px !important}.duet-button.plain .duet-button-icon.right.medium{right:-24px !important}.duet-button.plain .duet-button-icon.right.large{right:-30px !important}.duet-button.plain[disabled]{color:#657787 !important;background:transparent !important;border-color:transparent !important}.duet-theme-turva .duet-button.plain[disabled]{color:transparent !important;background:transparent !important;border-color:#e4e4e6 !important}.duet-button.plain:hover{color:#004d80 !important;background:transparent !important}.duet-theme-turva .duet-button.plain:hover{color:#940925 !important}.duet-button.plain.duet-button-negative{color:white !important}.duet-theme-turva .duet-button.plain.duet-button-negative{color:#e4e4e6 !important}.duet-button.plain.duet-button-negative:hover{color:#0077b3 !important}.duet-theme-turva .duet-button.plain.duet-button-negative:hover{color:#c60c30 !important}.duet-button.duet-button-icon-only{min-width:48px;min-height:48px;padding:0 !important}.duet-button.duet-button-icon-only .duet-button-contents{position:static}.duet-button.duet-button-icon-only .duet-button-icon.left.large,.duet-button.duet-button-icon-only .duet-button-icon.left.medium,.duet-button.duet-button-icon-only .duet-button-icon.left.small{position:absolute;top:50% !important;left:50% !important;padding:0;margin:0;transform:translateX(-50%) translateY(-50%)}.duet-button[disabled],.duet-button[disabled]:hover,.duet-button.duet-button-negative[disabled],.duet-button.duet-button-negative[disabled]:hover{color:#657787 !important;background:#e1e3e6 !important;border-color:#e1e3e6 !important;box-shadow:none !important}.duet-theme-turva .duet-button[disabled],.duet-theme-turva .duet-button[disabled]:hover,.duet-theme-turva .duet-button.duet-button-negative [disabled],.duet-theme-turva .duet-button.duet-button-negative [disabled]:hover{color:#747475 !important;background:#e4e4e6 !important;border-color:#e4e4e6 !important}.duet-button-is-loading.primary{color:white}.duet-button-is-loading.default{color:#0077b3}.duet-button-is-loading.default.duet-theme-turva{color:#c60c30}.duet-button-is-loading .duet-button-contents{visibility:hidden;opacity:0}\";\nlet DuetButton = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.duetFocus = createEvent(this, \"duetFocus\", 7);\n    this.duetBlur = createEvent(this, \"duetBlur\", 7);\n    /**\n     * Loading state of the button\n     */\n\n    this.loading = false;\n    /**\n     * Style variation of the button.\n     * @negative - value is deprecated and should be used in combination with negative prop in the future\n     * @destructive - value is deprecated and should be replace with destructive-secondary\n     */\n\n    this.variation = \"default\";\n    /**\n     * Negative variation, can be combined with Variation to produce negative versions\n     */\n\n    this.negative = false;\n    /**\n     * Theme of the button.\n     */\n\n    this.theme = \"\";\n    /**\n     * Controls the margin of the component.\n     */\n\n    this.margin = \"auto\";\n    /**\n     * Controls the padding of the component.\n     */\n\n    this.padding = \"auto\";\n    /**\n     * Controls the text wrapping.\n     */\n\n    this.wrapping = \"auto\";\n    /**\n     * Expands the button to fill 100% of the container width.\n     */\n\n    this.expand = false;\n    /**\n     * Keep the button fixed width even on mobile viewports.\n     */\n\n    this.fixed = false;\n    /**\n     * Makes the button component disabled. This prevents users from being able to\n     * interact with the button, and conveys its inactive state to assistive technologies.\n     */\n\n    this.disabled = false;\n    /**\n     * Allows the button to submit a form.\n     */\n\n    this.submit = false;\n    /**\n     * Forces URL to open in a new browser tab. Used together with URL prop.\n     */\n\n    this.external = false;\n    /**\n     * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing\n     * @default \"fi\"\n     */\n\n    this.language = getLanguage();\n    /**\n     * Property to change accessibleLabelExternal defaults on the component.\n     * normally you would handle these strings on an application level and override @accessibleLabelExternal when needed\n     * @default {fi: \"Avautuu uuteen ikkunaan\",sv: \"Öppnas i nytt fönster\",en: \"Opens in a new window\"}\n     */\n\n    this.accessibleLabelExternalDefaults = DuetStringsExternalDefaults;\n    /**\n     * Adds accessible label for tooltip that is shown in external link (url & external have both been set)\n     * @default {fi: \"Avautuu uuteen ikkunaan\",sv: \"Öppnas i nytt fönster\",en: \"Opens in a new window\"}\n     */\n\n    this.accessibleLabelExternal = getLocaleString(this.accessibleLabelExternalDefaults);\n    /**\n     * Icon to display to the left of the button content.\n     * This is ignored/overridden when button is used as an external link.\n     */\n\n    this.icon = \"\";\n    /**\n     * Custom color to be used for text, as a design token entered in camelCase or\n     * kebab-case. Example: \"color-primary\".\n     */\n\n    this.color = \"\";\n    /**\n     * Show icon on the right side of the button content.\n     */\n\n    this.iconRight = false;\n    /**\n     * Icon size.\n     */\n\n    this.iconSize = \"medium\";\n    /**\n     * Button’s size.\n     */\n\n    this.size = \"medium\";\n    /**\n     * Whether this button should use styles meant for displaying just an icon.\n     */\n\n    this.iconOnly = false;\n    /**\n     * Component event handling.\n     */\n\n    this.handleClick = ev => {\n      // If this button wants to specifically submit a form\n      // climb up the dom to see if we're in a <form>\n      // and if so, then use JS to submit it.\n      // To understand better, see: https://www.hjorthhansen.dev/shadow-dom-form-participation/\n      if (!this.url && this.element.closest(\"form\")) {\n        ev.preventDefault();\n        this.proxyButton.click();\n      }\n    };\n\n    this.onFocus = () => {\n      this.duetFocus.emit();\n    };\n\n    this.onBlur = () => {\n      this.duetBlur.emit();\n    };\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n\n    if (this.url && this.external && this.icon) {\n      console.warn(\"[DUET]: Button used as an external link will override any icon that is set\");\n    }\n  }\n\n  connectedCallback() {\n    this.proxyButton = document.createElement(\"button\");\n    this.proxyButton.style.display = \"none\";\n    this.syncToProxyButton();\n\n    if (!this.url && this.element.closest(\"form\")) {\n      this.element.insertAdjacentElement(\"beforebegin\", this.proxyButton);\n    }\n  }\n\n  disconnectedCallback() {\n    this.proxyButton.remove();\n    this.proxyButton = null;\n  }\n\n  syncToProxyButton() {\n    this.proxyButton.type = this.getButtonType();\n    this.proxyButton.disabled = this.disabled; // attributes should be removed in cases where name/value is not set\n\n    if (this.name != null) {\n      this.proxyButton.name = this.name;\n    } else {\n      this.proxyButton.removeAttribute(\"name\");\n    }\n\n    if (this.value != null) {\n      this.proxyButton.value = this.value;\n    } else {\n      this.proxyButton.removeAttribute(\"value\");\n    }\n  }\n\n  getButtonType() {\n    return this.submit ? \"submit\" : \"button\";\n  }\n  /**\n   * Sets focus on the specified `duet-button`. Use this method instead of the global\n   * `button.focus()`.\n   */\n\n\n  setFocus(options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.nativeButton) {\n        _this.nativeButton.focus(options);\n      }\n    })();\n  }\n  /**\n   * render() function.\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    const isExternalLink = this.external && this.url; // enforce consistency for external links\n\n    const icon = isExternalLink ? \"action-new-window\" : this.icon;\n    const iconRight = isExternalLink ? true : this.iconRight;\n    const commonChildren = h(\"span\", {\n      class: \"duet-button-contents\",\n      style: {\n        color: getColorByName(this.color)\n      }\n    }, icon && h(\"div\", {\n      \"aria-hidden\": \"true\",\n      class: {\n        \"duet-button-icon\": true,\n        left: !iconRight,\n        right: iconRight,\n        [this.iconSize]: true\n      }\n    }, h(\"duet-icon\", {\n      size: \"auto\",\n      margin: \"none\",\n      name: icon,\n      color: \"currentColor\"\n    })), h(\"slot\", null));\n    const commonProps = {\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      ref: button => this.nativeButton = button,\n      id: this.identifier,\n      class: {\n        \"duet-m-0\": this.margin === \"none\",\n        \"duet-p-0\": this.padding === \"none\",\n        \"duet-no-wrap\": this.wrapping === \"none\",\n        \"duet-button\": true,\n        \"duet-button-is-small\": this.size === \"small\",\n        \"duet-button-icon-only\": this.iconOnly,\n        \"duet-button-negative\": this.negative || this.variation === \"negative\",\n        [this.variation]: true,\n        disabled: this.disabled,\n        icon: !!icon,\n        \"icon-right\": iconRight,\n        [this.iconSize]: true\n      },\n      \"aria-controls\": this.accessibleControls,\n      \"aria-label\": this.accessibleLabel,\n      \"aria-expanded\": this.accessibleExpanded != null ? this.accessibleExpanded.toString() : undefined,\n      \"aria-activedescendant\": this.accessibleActiveDescendant,\n      \"aria-owns\": this.accessibleOwns,\n      \"aria-describedby\": this.accessibleDescribedBy\n    };\n    return h(Host, {\n      onClick: this.handleClick,\n      class: {\n        \"duet-m-0\": this.margin === \"none\",\n        \"duet-small\": this.size === \"small\",\n        \"duet-fixed\": this.fixed,\n        \"duet-expand\": this.expand\n      }\n    }, h(\"div\", {\n      class: {\n        \"duet-button-container\": true,\n        \"duet-button-is-loading\": this.loading,\n        \"duet-theme-turva\": this.theme === \"turva\",\n        \"duet-button-negative\": this.negative || this.variation === \"negative\",\n        [this.variation]: true\n      }\n    }, this.url ? h(\"a\", Object.assign({}, commonProps, {\n      href: this.url,\n      target: this.external ? \"_blank\" : \"_self\",\n      rel: this.external ? \"noopener\" : undefined\n    }), commonChildren, this.external && h(\"duet-visually-hidden\", null, \", \", this.accessibleLabelExternal)) : h(\"button\", Object.assign({}, commonProps, {\n      type: this.getButtonType(),\n      disabled: this.disabled,\n      name: this.name,\n      value: this.value,\n      \"aria-pressed\": this.accessiblePressed != null ? this.accessiblePressed.toString() : undefined\n    }), commonChildren), this.loading && h(\"duet-spinner\", {\n      color: \"currentColor\"\n    })));\n  }\n\n  get element() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"disabled\": [\"syncToProxyButton\"],\n      \"submit\": [\"syncToProxyButton\"],\n      \"value\": [\"syncToProxyButton\"],\n      \"name\": [\"syncToProxyButton\"]\n    };\n  }\n\n};\nDuetButton.style = duetButtonCss;\nconst duetSpinnerCss = \":host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;position:absolute;top:50%;left:50%;z-index:800;max-width:100%}:host(.duet-theme-default) .duet-spinner{color:#0077b3 !important}:host(.duet-theme-turva) .duet-spinner{color:#c60c30 !important}:host(.duet-custom-color){color:inherit}*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.duet-spinner{-webkit-user-select:none;user-select:none;position:absolute;top:50%;left:50%;z-index:800;width:24px;height:24px;color:#0077b3;border:2px solid transparent;border-left:2px solid currentColor;border-radius:50%;transform:translateZ(0) translateX(-50%) translateY(-50%);transform-origin:0% 0%;animation:duetRotate 0.6s linear infinite}.duet-spinner::after{position:absolute;top:50%;left:50%;z-index:200;box-sizing:content-box;width:100%;height:100%;overflow:hidden;content:\\\"\\\";border:2px solid currentColor;border-radius:50%;opacity:0.3;transform:translateZ(0) translateX(-50%) translateY(-50%);transform-origin:0% 0%}.duet-spinner.medium{width:36px;height:36px;border-width:4px}.duet-spinner.medium::after{border-width:4px}.duet-spinner.large{width:72px;height:72px;border-width:8px}.duet-spinner.large::after{border-width:8px}@keyframes duetRotate{0%{transform:translateZ(0) rotate(0deg) translateX(-50%) translateY(-50%)}100%{transform:translateZ(0) rotate(360deg) translateX(-50%) translateY(-50%)}}\";\nlet DuetSpinner = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * Color of the spinner, as a design token entered in camelCase or kebab-case.\n     * Example: \"color-primary\". This property can also be set to \"currentColor\"\n     * which forces the icon to use the CSS text color of parent element instead.\n     * Useful when you want to control the color in stylesheet instead.\n     */\n\n    this.color = \"gray-lightest\";\n    /**\n     * Size variation of the spinner.\n     */\n\n    this.size = \"small\";\n    /**\n     * Theme of the spinner. When used this will override the color setting and\n     * use \"primary\" or \"primary-turva\" as the color depending on which theme\n     * is chosen.\n     */\n\n    this.theme = \"\";\n  }\n  /**\n   * Component lifecycle events.\n   */\n\n\n  componentWillLoad() {\n    inheritGlobalTheme(this);\n  }\n  /**\n   * render() function\n   * Always the last one in the class.\n   */\n\n\n  render() {\n    const color = this.color === \"currentColor\" ? \"currentColor\" : getColorByName(this.color);\n    return h(Host, {\n      class: {\n        \"duet-custom-color\": this.color !== \"currentColor\" && this.theme !== \"turva\" && this.theme !== \"default\",\n        \"duet-theme-turva\": this.theme === \"turva\" && this.color !== \"currentColor\",\n        \"duet-theme-default\": this.theme === \"default\" && this.color !== \"currentColor\"\n      }\n    }, h(\"div\", {\n      class: {\n        \"duet-spinner\": true,\n        [this.size]: true\n      },\n      style: {\n        color\n      },\n      \"aria-label\": this.accessibleLabel\n    }));\n  }\n\n};\nDuetSpinner.style = duetSpinnerCss;\nexport { DuetButton as duet_button, DuetSpinner as duet_spinner };","map":null,"metadata":{},"sourceType":"module"}